{"version":3,"file":"static/js/821.862b7f4e.chunk.js","mappings":"gMAKO,MAAMA,EAAgEC,IAErEC,EAAAA,EAAAA,MAAA,WAASC,UAAU,iBAAgBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKH,EAAMK,QACXJ,EAAAA,EAAAA,MAAA,WAASC,UAAU,mCAAkCC,SAAA,EAEjDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uDACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIH,EAAMM,YAAcN,EAAMM,YAAc,yBCO/CC,EAA4CP,IAGrD,MAAMQ,GAAgBC,EAAAA,EAAAA,MAMtB,MAA+B,UAA3BT,EAAMU,YAAYC,MAEdV,EAAAA,EAAAA,MAAA,MAA4BC,UAAU,YAAWC,SAAA,CAAEH,EAAMY,KAAKC,UAC1DT,EAAAA,EAAAA,KAAA,QAAMF,UAAU,cAAcY,QAP1CC,iBACIP,EAASQ,EAAAA,GAAAA,gBAA4BhB,EAAMY,KAAKC,SAASb,EAAMY,KAAKK,SACpEjB,EAAMkB,SACV,EAIgEf,SAC/CH,EAAMU,YAAYG,WAAab,EAAMY,KAAKC,UAAYb,EAAMU,YAAYG,WAAab,EAAMY,KAAKC,SAAW,KAAO,mBAFlHb,EAAMY,KAAKK,SASpBb,EAAAA,EAAAA,KAAA,MAA4BF,UAAU,YAAWC,SAC5CH,EAAMY,KAAKC,UADPb,EAAMY,KAAKK,OAK5B,EC5BSE,EAAwCnB,IAAW,IAADoB,EAE3D,MAAMC,GAAaC,EAAAA,EAAAA,KAAaC,GAA8BA,EAAMC,IAAIZ,OAElEJ,GAAgBC,EAAAA,EAAAA,MAEhBgB,GAAOH,EAAAA,EAAAA,KAAaC,GACnBA,EAAMG,MAAMD,KACJF,EAAMG,MAAMD,KAGZ,QAIfE,EAAAA,EAAAA,YAAU,KACNnB,GAASoB,EAAAA,EAAAA,IAAoBP,EAAWJ,QAAkB,GAC5D,CAACQ,IAEH,MAAMI,EAAgB,CAClBnB,YAAaW,EACbI,KAAOA,GAGX,OACIxB,EAAAA,EAAAA,MAAA,WAASC,UAAU,aAAYC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,qBAAoBC,SAAC,gBACnCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,wBAAuBC,SACrB,QADqBiB,EAChCpB,EAAM8B,aAAK,IAAAV,OAAA,EAAXA,EAAaW,KAAI,CAACC,EAAwCC,KAEnD7B,EAAAA,EAAAA,KAACG,EAAY,IAA0BsB,EAAejB,KAAMoB,EAAGd,QAAUlB,EAAMkB,SAA5Dc,EAAGf,cAI5B,E,cC3CX,MAAMiB,EAA0ClC,IAG/CI,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAChCF,EAAAA,EAAAA,MAAA,WAASC,UAAU,QAAOC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,QAAOC,SAAC,iDACtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMU,QAASd,EAAMmC,gBAAgBhC,SAAC,SACtCC,EAAAA,EAAAA,KAAA,QAAMU,QAASd,EAAMoC,SAASjC,SAAC,e,cCsB3C,QA9BA,WAEI,IAAIkC,EAAqB,GAKzB,IAAK,IAAIC,EAAI,GAAGA,GAAK,GAAGA,IAEpBD,EAAQE,KAAKC,OAAOC,aAAaH,IAErC,IAAK,IAAIA,EAAI,GAAIA,GAAK,IAAIA,IACtBD,EAAQE,KAAKC,OAAOC,aAAaH,IAErC,IAAI,IAAIA,EAAI,GAAGA,GAAK,GAAGA,IAEnBD,EAAQE,KAAKC,OAAOC,aAAaH,IAIrC,IAAII,EAAsB,GAE1B,IAAK,IAAIJ,EAAI,EAAEA,GAlBE,GAkBcA,IAC3BI,GAAcL,EAAQM,KAAKC,KAAKD,KAAKE,SAAWR,EAAQS,OAAQ,IAGpE,OAAOJ,CAEX,E,cCKO,MAAMK,EAA8B/C,IAAW,IAADgD,EAAAC,EAAAC,EAEjD,MAAM1C,GAAgBC,EAAAA,EAAAA,MAEtB,IAAK0C,EAAaC,IAAmBC,EAAAA,EAAAA,KAAU,IAE1CC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,IAY3C,MAAMC,GAAenC,EAAAA,EAAAA,KAAaC,GAA8BA,EAAMG,MAAMgC,eAQ5E,OACIzD,EAAAA,EAAAA,MAAA,WAASC,UAAS,4CAA8CC,SAAA,CAC3DgD,IAAgB/C,EAAAA,EAAAA,KAAC8B,EAAW,CAACE,SAAUgB,EAAiBjB,gBARjE,WAEI3B,GAASmD,EAAAA,EAAAA,IAA2B,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcxC,OAA6B,OAAZwC,QAAY,IAAZA,OAAY,EAAZA,EAAc5C,SAAmBb,EAAMyB,KAAKmC,SACnGR,GAEJ,KAIQhD,EAAAA,EAAAA,KAACL,EAAW,CAACO,YAAuB,QAAZ0C,EAAEhD,EAAMyB,YAAI,IAAAuB,OAAA,EAAVA,EAAY1C,YAAuBD,KAAgB,QAAZ4C,EAAEjD,EAAMyB,YAAI,IAAAwB,OAAA,EAAVA,EAAYY,YAC/EzD,EAAAA,EAAAA,KAACe,EAAQ,CAACM,KAAMzB,EAAMyB,KAAMK,MAAiB,QAAZoB,EAAElD,EAAMyB,YAAI,IAAAyB,OAAA,EAAVA,EAAYpB,MAAOZ,QAASkC,KAC/DhD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAACC,KAAK,iBAAiBC,SAjBxC,WACIxD,GAASyD,EAAAA,EAAAA,IAAajE,EAAMyB,KAAKmC,OAAQ5D,EAAMY,KAAKK,OAAkBjB,EAAMY,KAAKC,WACjFL,EAAS0D,EAAAA,GAAAA,YAAwB,IAAKlE,EAAMY,KAAMa,KAAM,KAAMmC,OAAQ,OAC1E,KAeQxD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAACC,KAAK,uBAAuBC,SAxB9C,WACI,IAAIG,EAAOC,IACXb,EAAcY,GACdE,EAAAA,EAAAA,cAA4BrE,EAAMyB,KAAKmC,OAAkBO,EAC7D,IAsBSb,EAAWR,OAAS,IAAK1C,EAAAA,EAAAA,KAAA,QAAMF,UAAU,aAAYC,SAAEmD,MAElD,E,cC/DX,MAAMgB,EAAeA,KAExB,MAAM9D,GAAgBC,EAAAA,EAAAA,OAEhB,aAAE8D,EAAY,QAAEC,EAAO,KAAE5D,IAASU,EAAAA,EAAAA,KAAaC,GAA6BA,EAAMC,MAExF,IAAK2C,EAAMM,IAAWjB,EAAAA,EAAAA,UAAS,IAa/B,OACIvD,EAAAA,EAAAA,MAAAyE,EAAAA,SAAA,CAAAvE,SAAA,CAEKqE,IAAWpE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAEoE,KAC5CtE,EAAAA,EAAAA,MAAA,QAAMC,UAAU,mBAAmByE,SAf3C5D,eAAwB6D,GACpBA,EAAMC,iBACNrE,GAASsE,EAAAA,EAAAA,IAAqBX,EAAKvD,EAAKK,OAAiBL,EAAKC,UAGlE,EAU+DkE,OAAO,GAAE5E,SAAA,EAC5DC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,qBAAqB8E,MAAOb,EAAMc,SAT/DlE,eAAwB6D,GACpBH,EAAQG,EAAMM,cAAcF,MAChC,EAOmFG,KAAK,OAAO9E,KAAK,cAAc+E,YAAY,iBAClHhF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAACqB,KAAK,SAASpB,KAAK,cAElC,EClCEsB,EAAYA,KAKjBpF,EAAAA,EAAAA,MAAA,OAAKC,UAAW,wBAAwBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oBAAmBC,SAAC,+BAClCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,sBAAqBC,SAAC,uCACpCC,EAAAA,EAAAA,KAACkE,EAAY,KAEblE,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCACJC,EAAAA,EAAAA,KAACkF,EAAAA,GAAO,CAACpF,UAAU,cAAcqF,GAAI,eAAepF,SAAC,mB,cCMjE,MAwBA,EAxBoCqF,KAEhC,IAAI/D,ECpBmBgE,MAEvB,MAAMjF,GAAgBC,EAAAA,EAAAA,MAEhBQ,GAASK,EAAAA,EAAAA,KAAaC,GAA6BA,EAAMC,IAAIZ,KAAKK,SAExE,IAAIQ,GAAOH,EAAAA,EAAAA,KAAaC,GAA6BA,EAAMG,MAAMD,OAQjE,OANAE,EAAAA,EAAAA,YAAU,KACNnB,GAASoB,EAAAA,EAAAA,IAAoBX,GAAkB,GAChD,CAACQ,IAIGA,CAAI,EDMAgE,GAGP7E,GAAOU,EAAAA,EAAAA,KAAaC,GAA6BA,EAAMC,IAAIZ,OAE/D,OAAIA,EAAKgD,QAEDxD,EAAAA,EAAAA,KAACsF,EAAAA,EAAa,CAAAvF,UACVC,EAAAA,EAAAA,KAAC2C,EAAQ,CAACnC,KAAMA,EAAMa,KAAMA,OAS7BrB,EAAAA,EAAAA,KAACiF,EAAS,GACrB,C","sources":["Modules/TeamApp/Components/Description.tsx","Modules/TeamApp/Components/UserListItem.tsx","Modules/TeamApp/Components/UserList.tsx","Modules/TeamApp/Components/DeleteConfirmation.tsx","Helpers/InviteCodeGenerator.ts","Modules/TeamApp/TeamPage.tsx","Modules/TeamApp/Components/JoinTeamForm.tsx","Modules/TeamApp/Components/EmptyTeam.tsx","Modules/TeamApp/TeamPageContainer.tsx","Modules/TeamApp/Hooks/useTeam.tsx"],"sourcesContent":["import React from \"react\";\n\n\n\n\nexport const Desctiption: React.FC<{ description: string, name: string }> = (props) => {\n    return (\n        <section className=\"team_page_info\">\n            <h2>{props.name}</h2>\n            <section className=\"team_page_info__team-description\">\n\n                <h3>Описание </h3>\n                <p>{props.description ? props.description : \"No description\"}</p>\n            </section>\n        </section>\n    )\n}","import React, { Dispatch } from \"react\";\n\nimport { useDispatch } from \"react-redux\";\nimport { userPageType } from \"../../../Redux/Types\";\nimport { ClanType, clanActions } from \"../../../Redux/TeamReducer\";\nimport { TeamModuleAPI } from \"../../../services/Firebase/TeamAPI\";\nimport { UseToggle } from \"../../../Helpers/CustomHooks\";\nimport { ModalWindow } from \"./DeleteConfirmation\";\nimport { UserList } from \"./UserList\";\n\n\n// Define a props type\ntype userListItemType = {\n    currentUser: userPageType\n    user: { userName: string, userID: string },\n    team: ClanType,\n    toggler : () => void\n}\n\nexport const UserListItem: React.FC<userListItemType> = (props) => {\n\n    // get Dispatch\n    const dispatch: any = useDispatch();\n    // Ecluder user hamdler\n    async function excluedeUser() {\n        dispatch(clanActions.setUserToDelete(props.user.userName,props.user.userID));\n        props.toggler();\n    }\n    if (props.currentUser.role === \"admin\") {\n        return (\n            <li key={props.user.userID} className=\"user-item\">{props.user.userName}\n                <span className=\"delete-user\" onClick={excluedeUser}>\n                    {props.currentUser.userName === props.user.userName && props.currentUser.userName === props.user.userName ? null : \"exclude user\"}\n                </span>\n            </li>\n        )\n    }\n    else {\n        return (\n            <li key={props.user.userID} className=\"user-item\">\n                {props.user.userName}\n            </li>\n        )\n\n    }\n\n}","import { useDispatch, useSelector } from \"react-redux\"\nimport { UserListItem } from \"./UserListItem\"\nimport { Global_state_type } from \"../../../Redux/Store\"\nimport { ClanType, getClanListByUserID } from \"../../../Redux/TeamReducer\"\nimport { UseToggle } from \"../../../Helpers/CustomHooks\"\nimport { useEffect } from \"react\"\nimport { isArray } from \"util\"\n\n// Define a prop type \ntype UserListPropType = {\n    team : ClanType,\n    users: Array<{userName: string,userID : string}> | undefined,\n    toggler : () => void\n\n}\n\nexport const UserList: React.FC<UserListPropType> = (props) => {\n    // Get current user\n    const curentUser = useSelector((state : Global_state_type) => state.App.user);\n    // Get disptach\n    const dispatch: any = useDispatch();\n    \n    const team = useSelector((state:Global_state_type) => {\n        if(state.clans.team) {\n            return state.clans.team;\n        }\n        else {\n            return null as unknown as ClanType;\n        }\n    });\n    \n    useEffect(() => {\n        dispatch(getClanListByUserID(curentUser.userID as string));\n    },[team])\n\n    const userItemProps = {\n        currentUser: curentUser,\n        team : team\n    }\n\n    return (\n        <section className=\"team_users\">\n            <h3 className=\"team_users__tittle\">Members : </h3>\n            <ul className=\"team_users__user-list\">\n                {props.users?.map((el:{userName: string,userID : string} , indx: number) => {\n                    return (\n                        <UserListItem key={el.userID} {...{ ...userItemProps, user: el,toggler : props.toggler}} />\n                    )\n                })}\n            </ul>\n        </section>\n\n    )\n}","import \"../../../Assets/Styles/modal.css\"\n// Defina a props type \ntype ModalPropsType = {\n    setState : () => void\n    confirmCallback? : () => void\n}\n\nexport const ModalWindow : React.FC<ModalPropsType> = (props) => {\n    \n    return (\n        <div className=\"modal-container\">\n        <section className=\"modal\">\n            <h1 className=\"alert\">Are you shure you want to delete this user?</h1>\n            <div className=\"alert-selection\">\n            <span onClick={props.confirmCallback}>Yes</span>\n            <span onClick={props.setState}>No</span>\n            </div>\n        </section>\n        </div>\n\n    )\n}","\n/**\n * Team Invite code Generator\n * Used in TeamPage -> genereate Invite code buton\n * \n * @returns string \n */\nfunction generateInviteCode  ()  {\n    // Create empty symbols array \n    let symbols : string[] = [];\n    // InvideCode length\n    let codeLength = 20;\n\n    // Fill array with Uppercase letters,lowercase letters and numbers\n    for (let i = 65;i <= 90;i++)\n    {\n        symbols.push(String.fromCharCode(i));\n    }\n    for (let i = 97; i <= 122;i ++) {\n        symbols.push(String.fromCharCode(i));\n    }\n    for(let i = 48;i <= 57;i++)\n    {\n        symbols.push(String.fromCharCode(i));\n    }\n    \n\n    let resultCode : string = \"\"\n    // Generate random string from array charecters\n    for (let i = 0;i <= codeLength;i ++) {\n        resultCode += symbols[Math.ceil(Math.random() * symbols.length -1)];\n    }\n\n    return resultCode;\n\n}\n\nexport default generateInviteCode;","// React,React Hooks\nimport { useState } from \"react\";\nimport { useDispatch, useSelector} from \"react-redux\";\n\n// Styles and Assets\nimport \"../../Assets/Styles/TeamPage.css\"\nimport \"../../App.css\"\n// Redux,Thunks\nimport { ClanType, deleteUSerTunk, leaveTheTeam } from \"../../Redux/TeamReducer\";\nimport { app_actions } from \"../../Redux/AppReducer\";\n// Components\nimport { Desctiption } from \"./Components/Description\";\nimport { UserList } from \"./Components/UserList\";\nimport { UIButton } from \"../../Components/Button\";\nimport { ModalWindow } from \"./Components/DeleteConfirmation\";\n// Types\nimport { userPageType} from \"../../Redux/Types\";\nimport { Global_state_type } from \"../../Redux/Store\";\n// Services\nimport { TeamModuleAPI } from \"../../services/Firebase/TeamAPI\";\n// Helpers\nimport generateInviteCode from \"../../Helpers/InviteCodeGenerator\";\nimport { UseToggle } from \"../../Helpers/CustomHooks\";\n\n\n\n\n\n\n// Define a type\ntype ITeam = {\n    user : userPageType\n    team : ClanType\n}\n/**\n * Team Page top level container\n * \n * @param props \n * @returns React.Ellement\n */\nexport const TeamPage : React.FC<ITeam> = (props) => {\n    \n    const dispatch: any = useDispatch()\n    // Modal window state \n    let [isUserDelete,setIsUserDelete] = UseToggle(false);\n    // Invitecode state\n    let [inviteCode, setInviteCode] = useState(\"\");\n    // Invite generator handler \n    function generateInviteCodeHandler() {\n        let code = generateInviteCode();\n        setInviteCode(code);\n        TeamModuleAPI.setInviteCode(props.team.teamID as string, code)\n    }\n    // LEave team handler function \n    function leaveTeam () {\n        dispatch(leaveTheTeam(props.team.teamID, props.user.userID as string, props.user.userName as string))\n        dispatch(app_actions.setUserPage({ ...props.user, team: null, teamID: null }))\n    }\n    const deletingUSer = useSelector((state  :Global_state_type) => state.clans.userToDelete);\n    // Delete user \n    function deleteUSerDfromTeam () {\n        \n        dispatch(deleteUSerTunk(deletingUSer?.userID as string,deletingUSer?.userName as string,props.team.teamID));\n        setIsUserDelete();\n        // debugger;\n    }\n    return (\n        <section className={`team_page container  translate_animation `}>\n            {isUserDelete && <ModalWindow setState={setIsUserDelete} confirmCallback={deleteUSerDfromTeam}/>}\n            <Desctiption description={props.team?.description as string} name={props.team?.teamName as string} />\n            <UserList team={props.team} users={props.team?.users} toggler={setIsUserDelete}/>\n            <UIButton text=\"Leave the team\" callback={leaveTeam}/>\n            <UIButton text=\"Generate Invite Code\" callback={generateInviteCodeHandler}/>\n            {/* Render invite code depending on invateCode value */}\n            {inviteCode.length > 0 && <span className=\"inviteCode\">{inviteCode}</span>}\n\n        </section>\n    )\n}\n\n\n\n","import { useNavigate } from \"react-router-dom\"\nimport \"../../../Assets/Styles/TeamPage.css\"\nimport { TeamModuleAPI } from \"../../../services/Firebase/TeamAPI\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../Redux/Store\"\nimport { useState } from \"react\"\nimport { Dispatch } from \"redux\"\nimport { app_actions } from \"../../../Redux/AppReducer\"\nimport { clanActions, getClanListByUserID, joinTeamByInviteCode } from \"../../../Redux/TeamReducer\"\nimport { UIButton } from \"../../../Components/Button\"\n\n\n\nexport const JoinTeamForm = () => {\n    // Get dispatch\n    const dispatch: any = useDispatch();\n    // Get App state\n    const { errorMessage, isError, user } = useSelector((state: Global_state_type) => state.App);\n    // Define local state\n    let [code, setCode] = useState(\"\");\n    // Submit Handler\n    async function onSubmit(event: React.SyntheticEvent<HTMLFormElement>) {\n        event.preventDefault();\n        dispatch(joinTeamByInviteCode(code,user.userID as string,user.userName as string));\n        \n       \n    }\n    // On Chanhe handler\n    async function onChange(event: React.SyntheticEvent<HTMLInputElement>) {\n        setCode(event.currentTarget.value);\n    }\n\n    return (\n        <>\n            {/* If has error render the erro message */}\n            {isError && <span className=\"errorMessage\">{errorMessage}</span>}\n            <form className=\"invite-team-form\" onSubmit={onSubmit} action=\"\">\n                <input className=\"invite-form__input\" value={code} onChange={onChange} type=\"text\" name=\"invite-code\" placeholder=\"Invite code\" />\n                <UIButton type=\"submit\" text=\"Join\"/>\n            </form>\n        </>\n    )\n}","import { NavLink, useNavigate } from \"react-router-dom\"\nimport \"../../../Assets/Styles/TeamPage.css\"\nimport { JoinTeamForm } from \"./JoinTeamForm\"\n\n\n\nexport const EmptyTeam = () => {\n\n\n    return (\n\n        <div className={\"empty_team container \"}>\n            <h2 className=\"emty-team__tittle\">You dosen`t have any team</h2>\n            <h2 className=\"invite-code__tittle\">Type invite code to join any team</h2>\n            <JoinTeamForm/>\n            {/* <NavLink to={\"/join-team\"}>Присоединиться</NavLink> */}\n            <h2>Or you can create your own team</h2>\n            <NavLink className=\"create-team\" to={\"/create-team\"}>Create Team</NavLink>\n        </div>\n\n\n\n    )\n\n\n}","// React,React-redux\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n// Custom hooks\nimport { useTeamPage } from \"./Hooks/useTeam\";\n// Styles\n// ....\n// Types and interfaces\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { ClanType } from \"../../Redux/TeamReducer\";\n// Components\nimport { TeamPage } from \"./TeamPage\";\nimport { EmptyTeam } from \"./Components/EmptyTeam\";\nimport ErrorBoundary from \"../../Components/ErrorBoundary\";\n\n\n\n/**\n * Team Module container\n * Contains all users width teams interaction functionality\n * \n * @returns React.Ellement\n */\nconst TeamPageContainer: React.FC = () => {\n    // Get team page fron hook\n    let team = useTeamPage();\n    // Get user data\n    // @ts-ignore\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    // If user Belongs to some kind of team Render Team information page\n    if (user.teamID) {\n        return (\n            <ErrorBoundary>\n                <TeamPage user={user} team={team as ClanType} />\n                \n            </ErrorBoundary>\n        )\n\n    }\n    // If user does not beloong to any team Render EmptyTeam Page\n\n    else {\n        return <EmptyTeam />\n    }\n\n}\n\nexport default TeamPageContainer","import { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { getClanListByUserID } from \"../../../Redux/TeamReducer\";\n\nexport const useTeamPage = () => {\n    // Get dispatch\n    const dispatch: any = useDispatch();\n    // Get user from state\n    const userID = useSelector((state: Global_state_type) => state.App.user.userID);\n    // get Team from state \n    let team = useSelector((state: Global_state_type) => state.clans.team);\n    // Fetch team list\n    useEffect(() => {\n        dispatch(getClanListByUserID(userID as string));\n    }, [team]);\n\n\n\n    return team;\n\n}"],"names":["Desctiption","props","_jsxs","className","children","_jsx","name","description","UserListItem","dispatch","useDispatch","currentUser","role","user","userName","onClick","async","clanActions","userID","toggler","UserList","_props$users","curentUser","useSelector","state","App","team","clans","useEffect","getClanListByUserID","userItemProps","users","map","el","indx","ModalWindow","confirmCallback","setState","symbols","i","push","String","fromCharCode","resultCode","Math","ceil","random","length","TeamPage","_props$team","_props$team2","_props$team3","isUserDelete","setIsUserDelete","UseToggle","inviteCode","setInviteCode","useState","deletingUSer","userToDelete","deleteUSerTunk","teamID","teamName","UIButton","text","callback","leaveTheTeam","app_actions","code","generateInviteCode","TeamModuleAPI","JoinTeamForm","errorMessage","isError","setCode","_Fragment","onSubmit","event","preventDefault","joinTeamByInviteCode","action","value","onChange","currentTarget","type","placeholder","EmptyTeam","NavLink","to","TeamPageContainer","useTeamPage","ErrorBoundary"],"sourceRoot":""}