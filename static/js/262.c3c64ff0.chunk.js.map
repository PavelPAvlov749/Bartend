{"version":3,"file":"static/js/262.c3c64ff0.chunk.js","mappings":"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","sources":["Components/Button.tsx","Helpers/CustomHooks.tsx","Modules/ChecklistApp/Components/Hooks.tsx","Modules/RecepiesApp/RecepiesList.tsx","webpack://bartend/./src/Assets/Styles/DotsMenu.module.css?954c","Modules/ChecklistApp/Components/DotsMenu.tsx","Modules/ChecklistApp/Components/CheclListPage.tsx","Modules/RecepiesApp/Components/Composition.tsx","Modules/RecepiesApp/Components/ProductCalculator.tsx","Modules/RecepiesApp/Components/ProductDescription.tsx","Modules/RecepiesApp/Components/ProductCard.tsx","Modules/ChecklistApp/Components/Hooks..tsx","Modules/RecepiesApp/Components/Editor.tsx","Modules/RecepiesApp/Components/Menu.tsx","Modules/RecepiesApp/Components/Reducer.ts","Modules/RecepiesApp/Components/ProductCardContainer.tsx","Modules/RecepiesApp/Components/UseProductCard.tsx","Modules/TeamApp/CreateTeam.tsx","webpack://bartend/./src/Components/MainPage/HomePage.module.css?5385","Components/MainPage/mainScreen.tsx","Modules/RecepiesApp/NewProduct/SecondStep.tsx","Modules/RecepiesApp/NewProduct/NewIngridientSingleForm.tsx","Modules/RecepiesApp/NewProduct/Compound.tsx","Modules/RecepiesApp/NewProduct/TopSection.tsx","Modules/RecepiesApp/NewProduct/FirstStep.tsx","Modules/RecepiesApp/NewProduct/NewProduct.tsx","Modules/ChecklistApp/Components/NewCheckList.tsx","Modules/KnowledjeBase/Ingridient.tsx","Modules/Auth/RegistrationFormInput.tsx","Modules/Auth/Registration.tsx","Modules/PremixesApp/Components/HistoryPage/PassedShiftItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrroductItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrdocuctList.tsx","Modules/PremixesApp/Reducers/constructorReducer.tsx","Modules/PremixesApp/Components/ConstructorPage/CreateNewShiftControls.tsx","Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer.tsx","webpack://bartend/./src/Modules/Textbook/Styles/TextbookContainer.module.css?7d57","Modules/Textbook/TextbookContainer.tsx","Modules/Textbook/Pages/Distilation.tsx","Modules/KnowledjeBase/CoctrailCard.tsx","Router/Routes.tsx","Router/Router.tsx","webpack://bartend/./src/Modules/ChecklistApp/Styles/CheckLists.module.css?b113","webpack://bartend/./src/Modules/RecepiesApp/Styles/RecepiesContainer.module.css?48ed"],"sourcesContent":["import React from \"react\";\n\n// Define a props type\ntype ButtonPropsType = {\n    text : string,\n    id? : string,\n    className? : string,\n    callback? : (event : React.SyntheticEvent) => void,\n    type? : \"button\" | \"submit\"\n    \n}\n\n/**\n * Unique Button component as\n * @param text text to render as child\n * @param id id for DOM node\n * @param clasName dom node classname\n * @param callback onclick callback function\n * \n * @returns React.Ellement \n */\nexport const UIButton : React.FC<ButtonPropsType> = (props : ButtonPropsType,params?) => {\n    return (\n        <button\n            id={props.id}\n            type={props.type}\n            className={props.className}\n            onClick={props.callback}\n        >\n            {props.text}\n        </button>\n    )\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { productType } from \"../Redux/Types\";\nimport { getProductsByCompanyID } from \"../Redux/ProductReduxer\";\n\n\nexport const useProducts = () => {\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        return state.premixes.premixes\n    })\n    if(products.length > 0) {\n        return products\n    }\n    else{\n        return []\n    }\n}\n\nexport const useProductFilter = (initial : string) : [productType[],(e : string) => void] => {\n    const [filter,setFilter] = useState(initial)\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, []);\n    let products = useSelector((state: Global_state_type) => {\n        if(filter.length === 0) {\n            return state.premixes.premixes\n        }\n        return state.premixes.premixes.filter((el : productType) => el.name.includes(filter))\n    })\n    const updateFilter = (value : string) => {\n        setFilter(value)\n    }\n    \n    return [products,updateFilter]\n    \n}\n\nexport const useWindowInnerWidth = () => {\n    const [windowWidth,setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        const handleResizeWindow = () => setWindowWidth(window.innerWidth)\n        window.addEventListener(\"resize\",handleResizeWindow)\n        return () => {\n            window.removeEventListener(\"resize\",handleResizeWindow)\n        }\n    },[])\n    return windowWidth\n}\n\n\nexport const useDebounce = (callback : (...args:any) => {},delay : number,value : any)=> {\n    const timer = useRef(null);\n    const dispatch : any = useDispatch();\n    const DebounceCallback = useCallback((...args : any) => {\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        else {\n            setTimeout(() => {\n                console.log(\"DISPATHED\")\n               dispatch(callback(value));\n            },delay)\n        }\n    },[callback,delay]);\n\n    console.log(DebounceCallback)\n    return DebounceCallback;\n}\n\n\n/**\n * \n * @param initialValue initial value for boolean flag\n * @returns [actualState,TogglerFunction]\n */\nexport const UseToggle = (initialValue : boolean) : [boolean,() => void] => {\n\n    let [state,setState] = useState<boolean>(initialValue);\n    \n    function toggle () {\n        setState(!state);\n    }\n\n    return [state,toggle];\n}\n\nexport const useNewCardIngridients = () => {\n    const products = useSelector((state : Global_state_type) => state.newCard.composition);\n    return Object.keys(products as {});\n}","\n// React,hooks\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useEffect } from \"react\";\n// Redux,thunks\nimport { checkListType, deleteChekListThunk, getCheckListsthunk } from \"../../../Redux/CheckListReducer\";\n// Types\n\n\n\n\nimport { Global_state_type } from \"../../../Redux/Store\";\n/**\n* @params none\n* \n* \n* Return a typple with specifik checklist object that contains \n* ist of tasks and handler to delete them\n* @returns [checklist,deleteHanler]\n*/\n\nexport const useTaskList = (): [checkListType | null, () => void] => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    let id = useLocation().pathname.split(\"=\")[1];\n    let checklist: checkListType | null = useSelector((state: Global_state_type) => {\n        let result = state.chcekLists.checkLists.find((el: checkListType) => el.id === id);\n        if (result) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    });\n    const deleteHandler = () => {\n        dispatch(deleteChekListThunk(id))\n        navigate(\"/check-lists\")\n    };\n    return [checklist, deleteHandler];\n}\n\n\n/**\n * \n * Return a list of checklists for current establishment\n * @returtn array checkListType[]\n */\nexport const useChecklistList = () => {\n    const dispatch: any = useDispatch();\n    // Get team id to fetch data by him\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Fetch data\n    useEffect(() => {\n        dispatch(getCheckListsthunk(teamID as string))\n    }, []);\n    let checkLists = useSelector((state: Global_state_type) => state.chcekLists.checkLists);\n    \n    return checkLists;\n}","import { productType } from \"../../Redux/Types\"\n// Styles\nimport styles from \"./Styles/RecepiesContainer.module.css\";\n\n// List Props type \ntype RecepiesListPropsType = {\n    recepies: productType[],\n    navigate: any // Remove this any later and define accurate type for this function\n}\n\nexport const RecepiesList: React.FC<RecepiesListPropsType> = (props) => {\n\n    // Navigation to product card function\n    function goToProductCard(event: React.SyntheticEvent<HTMLLIElement>) {\n        props.navigate(\"/card/id=\" + event.currentTarget.dataset.id);\n    }\n    return (\n        <ul className={styles.RecepiesList}>\n            {\n            /*  Map on the recepies array and reuturn <li> with containing \n                name of each element and navigation function passed into onClick \n            */}\n\n            {props.recepies.map((el: productType) => {\n                return (\n                    <li className={styles.listItem} key={el.id} data-id={el.id} onClick={goToProductCard}>{el.name}</li>\n                )\n            })}\n        </ul>\n\n\n\n\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"recepiesContainerHeader\":\"DotsMenu_recepiesContainerHeader__xsXMT\",\"dotsMenu\":\"DotsMenu_dotsMenu__hP93e\",\"dotsMenu__dot\":\"DotsMenu_dotsMenu__dot__tEkFP\",\"menuOptions\":\"DotsMenu_menuOptions__Xcih5\",\"appear\":\"DotsMenu_appear__25f3n\"};","import { useState } from \"react\"\nimport { checkListType, deleteChekListThunk } from \"../../../Redux/CheckListReducer\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport styles from '../../../Assets/Styles/DotsMenu.module.css'\n\n\n// DEFINE A PROPS TYPE\ntype ChecklistDotsMenu = {\n    checklist: checkListType\n}\n\nexport const ChecklistDotsMenu: React.FC<ChecklistDotsMenu> = (props) => {\n    const navigate = useNavigate();\n    // Toggle isWindowOpen \n    let [isOpen, setIsOpen] = useState<boolean>(false);\n    const dispatch : any = useDispatch();\n    // Opening window togggler function \n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // Delete checklist \n    function deleteCheklist() {\n        // Delete\n        dispatch(deleteChekListThunk(props.checklist.id));\n        navigate(-1);\n    }\n\n    if (!isOpen) {\n        // Render menu icon \n        return (\n            <section className={styles.dotsMenu} onClick={toggle}>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n\n            </section>\n        )\n\n    }\n    else {\n        // Opened menu\n        return (\n            <section className={styles.menuOptions}>\n              \n                <span onClick={deleteCheklist}>Delete</span>\n                <span onClick={toggle}>Close</span>\n\n            </section>\n        )\n    }\n}","// Assets\n\n// Hooks\nimport { useTaskList } from \"./Hooks\";\n// Styles\nimport styles from  \"../Styles/CheckLists.module.css\"\nimport { ChecklistDotsMenu } from \"./DotsMenu\";\nimport { checkListType } from \"../../../Redux/CheckListReducer\";\n\n\n/**\n * Checklist taskList in checkList page\n * \n * @returns React.Ellement\n */\nexport const CheckListPage = () => {\n    // Get checklist object amd delete hadler from hook\n    let [checklist] = useTaskList();\n\n\n    return (\n        <section className={styles.single_check_list}>\n           \n            <div className={styles.check_list_controls}>\n                {/* Dots menu calls Modal Window when clicked */}\n                <h1>Tasks</h1>\n              <ChecklistDotsMenu checklist={checklist as checkListType}/>\n            </div>\n\n            <ul className={styles.tasks}>\n                {/* Map on tasks array and render every task*/}\n                {checklist?.tasks.map((el: string, index: number) => {\n                    return (\n                        <li key={el} className={styles.tasks_item}>\n               \n                            <input className={styles.tasks_item__checkbox} type=\"checkbox\" />\n                    \n                            <span>{index + 1 + \".\" + el}</span>\n                            <br />\n                        </li>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","// React,ReactHooks\nimport {useState } from \"react\"\n// Redux,ThunkActions\nimport { productType } from \"../../../Redux/Types\";\n// Helpers\nimport { parseComposition } from \"../../../Helpers/Helpers\";\n// Styles\nimport \"../Styles/RecepieCard.css\"\n\n// DECLARE PROPS TYPE\n\n// -----------------\ntype ProductCompositionType = {\n    isEditMode: boolean,\n    composition: {}[],\n    card: productType\n}\n// -----------------\n\n\n/**\n * A component displaying the composition of the current product. \n * And also the product card editor depending on the isEditMode prop\n *\n * @param props {isEditMode : boolean,composition {}[] ,card}\n * \n * @returns React.Element\n */\nexport const ProductComposition = (props: ProductCompositionType) => {\n    // Hide or show component state\n    let [isOpen, setIsOpen] = useState<boolean>(false);\n\n    // Show|Hide toggler function\n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // If isOpen === false render the Show button\n    if (!isOpen) {\n        return (\n            <button className=\"composition_btn\" onClick={toggle}>Composition</button>\n        )\n    }\n\n    else {\n        return (\n            <section>\n                <button className=\"composition_btn\" onClick={toggle}>Composition</button>\n                <p className=\"composition\">{parseComposition(props.composition)}</p>\n            </section>\n        )\n    }\n\n\n}","// React,ReactHooks\nimport React, { useState } from \"react\";\n// Helpeers\nimport { calculateAndParseIntoComponent } from \"../../../Helpers/Helpers\";\n\n// Types\nimport { productType } from \"../../../Redux/Types\";\n\n\n\nexport const ProdicuCalculater = (props : { product: productType | null}) => {\n    // Multiplier value\n    let [value, setValue] = useState(1);\n    console.log(props.product);\n    // Input Handler\n    // Function to calculate value of prdoduct composition\n    function calculate(event: React.SyntheticEvent<HTMLInputElement>) {\n        if (event.currentTarget.value.length < 1) {\n            setValue(1)\n        } else {\n            setValue(Number(event.currentTarget.value))\n        }\n    };\n\n    return (\n      \n            <section className=\"product-card__calculator\">\n                <input type=\"number\" placeholder=\" How much do we need?\" onChange={calculate} />\n                <br />\n                <div className=\"calculated_result\">\n                    {calculateAndParseIntoComponent(props.product?.composition as {}[], value)}\n                </div>\n            </section>\n\n\n    )\n}","// React,ReactHooks\nimport { Dispatch, useState } from \"react\"\n// Styles and Assets\nimport \"../../../Assets/Styles/PeoduxtCard.css\";\n// Redux,Reducers\nimport { useDispatch } from \"react-redux\";\nimport { productActions } from \"../../../Redux/ProductReduxer\";\n\n\n// Define a `props` type to component\ntype propsType = {\n    setState: Dispatch<{ type: string, payload: any }>,\n    isEditMode: boolean,\n    description: string\n}\n\n/**\n * \n * @param props propsType\n * ProductCard Description component\n * Render actual card description and set them if 'EditMode' is enabled\n * \n * @returns React.Ellement\n */\n\nexport const ProductDescription = (props: propsType) : React.ReactElement => {\n    // Is Description Opened\n    // Shoow <p></p> ellement if true anoterwose just render the Button\n    let [isOpened, setIsOpened] = useState<boolean>(false);\n\n    const dispatch: any = useDispatch();\n    // Description open Toggler function\n    function toggle() {\n        setIsOpened(!isOpened);\n    }\n    // OnChange event handler that we use in textarea if props.isEditMode === true\n    function onChangeHandler(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    }\n \n    if (!isOpened) {\n        // Render Description or textarea to Edit descritpion\n        return (\n            <section >\n                <button className=\"composition_btn\" onClick={toggle}>Dscription</button>\n                {!props.isEditMode ? <p className=\"composition\">{props.description}</p> :\n                    <textarea\n                        onChange={onChangeHandler}\n                        className=\"description-textarea\"\n                        value={props.description}></textarea>}\n            </section>\n        )\n    }\n    else {\n        return (\n            <button className=\"composition_btn\" onClick={toggle}>Description</button>\n        )\n    }\n\n}","// TYPES\nimport { useNavigate } from \"react-router-dom\"\nimport { useProductFilter } from \"../../../Helpers/CustomHooks\"\nimport { productType } from \"../../../Redux/Types\"\nimport { RecepiesList } from \"../RecepiesList\"\n// Components\nimport { ProductComposition } from \"./Composition\"\nimport { DotsMenu } from \"./Menu\"\nimport { ProdicuCalculater } from \"./ProductCalculator\"\nimport { ProductDescription } from \"./ProductDescription\"\n\n// DEFINE A PROP TYPE\n// ------------------\ntype CardPropsType = {\n    isEditMode : {isEditMode : boolean},\n    setEditMode : any,\n    card : productType,\n}\n// -----------------\n\n/**\n * Render product card page if isEditMode equals to false in parent component\n * @param props CardPropdType\n * @returns React.Element\n */\n\nexport const ProductCard : React.FC<CardPropsType> = (props : CardPropsType) => {\n    const [products,filterProducts] = useProductFilter('');\n    const navigate = useNavigate();\n    const windoWidth = window.innerWidth;\n    console.log(windoWidth)\n    return (\n        <section className=\"product_card__page\">\n            <section className=\"card_section\">\n            <ProductDescription isEditMode={props.isEditMode.isEditMode} setState={props.setEditMode} description={props.card?.description as string} />\n            <ProductComposition card={props.card as productType} isEditMode={props.isEditMode.isEditMode} composition={props.card?.composition as {}[]} />\n            <ProdicuCalculater product={props.card} />\n            </section>\n            {windoWidth > 850 ?\n            <section className=\"list\">\n            <RecepiesList navigate={navigate} recepies={products}/>\n            </section> : null}\n        </section>\n    )\n\n}","// React,Hooks\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\"\n\n// Redux,Redux-thunks\n\ntype inputEventType = React.SyntheticEvent<HTMLInputElement>;\ntype setStateType = Dispatch<SetStateAction<string>>;\n\n/**\n//  * INPUTS HOOK\n * \n * @param value default value <string>\n * @param placeholder input placeholder text <string>\n * @returns InputElement : input element : <ReactNode>\n *          state : actual state value : <string>\n *          setState : Dispatch<SetStateAction<string>>\n */\n\nexport const useInput = (value: string = \"\", placeholder: string): [ReactNode, string,setStateType] => {\n    // Input state set default from params\n    const [state, setState] = useState(\"\");\n\n    // On changeHandler tah will be passed into input \n    function onChangeHandler(event: inputEventType) {\n        setState(event.currentTarget.value);\n    };\n\n    let InputElement = <input placeholder={placeholder} value={state} onChange={onChangeHandler} maxLength={100}/>;\n\n    // Return typple with 3 elements [input,state,setState]\n    return [InputElement, state, setState];\n\n\n}\n\n/**\n * VALIDATOR HOOK\n * \n * @param regExp pattern to validate\n * @returns tupple [isError,ErrorText,vslidate function]\n * \n */\nexport const useValidator = (regExp : RegExp) : [boolean,string,(val : string) => void] => {\n    // Boolean error flag\n    let [isError,setError] = useState<boolean>(false);\n    // error message text\n    let [errorText,setErrorText] = useState<string>(\"\");\n    \n    // Define a pattern to validate frpm params\n    let pattern = regExp;\n\n    function validate (value : string) {\n        if(!pattern.test(value))\n        {\n            setError(true);\n            setErrorText(\"Error : invalid input\");\n        }\n    }\n\n    return [isError,errorText,validate]\n}","// React,ReactHooks\nimport { useDispatch } from \"react-redux\"\n// Redux,Actions\nimport { AnyAction, Dispatch } from \"redux\";\nimport { productActions } from \"../../../Redux/ProductReduxer\";\n// Types\nimport { ReactNode, useState } from \"react\";\nimport { productType } from \"../../../Redux/Types\"\n// Custom hooks\nimport { useInput } from \"../../ChecklistApp/Components/Hooks.\";\n\n\n// DECLARE PROP TYPE\n\n// -----------------\ntype EditorPropType = {\n    card: productType,\n}\n\n/** \n * Product card editor component\n * \n * Render only when the isEdit flag is true\n * \n * @param props card : prdocuctType\n * @returns ReactEllement\n */\n\nexport const Editor: React.FC<EditorPropType> = (props: EditorPropType) => {\n    const dispatch: Dispatch<AnyAction> = useDispatch();\n    // Textarea onChange handler\n    function onChange(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    };\n    // Delete handler function \n    function deleteHandler(event: React.SyntheticEvent<HTMLSpanElement>) {\n        dispatch(productActions.deleteComponent(event.currentTarget.id));\n    };\n    // Compoennts to be added state from useInput custom Hook\n    let [input, setInput] = useInput(\"Name\", \"Type name\");\n    // New ingridient state\n    let [key, setKey] = useState(\"\");\n    let [value, setValue] = useState(\"\");\n    // Add component Handler\n    function addComponent() {\n        dispatch(productActions.addComonent({ [key]: value }));\n        setValue(\"\");\n        setKey(\"\");\n    }\n    \n    return (\n        <section className=\"editor\">\n            <h3 className=\"editor__tittle\">Description : </h3>\n            <textarea\n                onChange={onChange}\n                className=\"editor__desctiption-textarea\"\n                // Get actual value from store -> prpops\n                value={props.card.description}>\n            </textarea>\n            <h3 className=\"editor__tittle\">Composition : </h3>\n\n            <ul className=\"editor__composition\">\n                {props.card.composition.map((el: {}, index: number, array: {}[]) => {\n                    return (\n                        <li className=\"editor__item\">\n                            <span>{Object.keys(el)[0] + \" : \"}</span>\n                            <span >{Object.values(el)[0] as ReactNode}</span>\n                            {/* DELETE BUTTON */}\n                            <span\n                                id={Object.keys(el)[0]}\n                                className=\"editot__component__delete\"\n                                onClick={deleteHandler}>Delete</span>\n                            <br />\n                        </li>)\n                })}\n            </ul>\n            {/* Render inputs */}\n            <div className=\"editor__newcomponent-input\">\n                {/* KEY INPUT */}\n                <input type=\"text\"\n                 value={key} placeholder=\"Name\" \n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setKey(e.currentTarget.value)}}/>\n                 {/* VAKUE INPUT */}\n                <input type=\"text\"\n                 value={value} \n                 placeholder=\"Value\"\n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setValue(e.currentTarget.value)}} />\n            </div>\n            <button onClick={addComponent}>Add</button>\n        </section>\n    )\n}","// React,ReactHooks\nimport { Dispatch } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\";\n// Redux,Reducers\nimport { deleteProductCrad } from \"../../../Redux/ProductReduxer\";\nimport { UseToggle } from \"../../../Helpers/CustomHooks\";\nimport { useDispatch } from \"react-redux\";\n// Types\nimport { productType } from \"../../../Redux/Types\";\nimport { premixAPI } from \"../../../services/Firebase/PremixAPI\";\n\n// Styles\nimport styles from \"../../../Assets/Styles/DotsMenu.module.css\"\n// PROPS TYPE\n// --------------\ntype DotsMenuPropsType = {\n    setEditMode: Dispatch<{ type: string, payload: any }>,              //EditMode toggler\n    isEditMode: boolean,\n    card: productType                                                  //Prdouct data\n}\n// --------------\n\n\n\n/**\n * DOTS   MENU COMPONENT : \n * \n * Contains isEditMode toggling function and delete product card\n * \n * @param props DotsMenuPropsType {Dispatch,isEditMode,card}\n * @returns React.Ellement\n */\nexport const DotsMenu = (props: DotsMenuPropsType) => {\n\n    // Get boolean state and toggler function from hook\n    // If isOpen === true render menu with containig items anotherwise\n    // Render three dots menu icon\n    let [isOpen, toggle] = UseToggle(false);\n\n    // Get id of prdocut card\n    const productID = useLocation().pathname.split(\"=\")[1]\n\n    // Navigate function\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    // Delete button handller\n    function deleteProduct() {\n        dispatch(deleteProductCrad(productID));\n        navigate(\"/premixes\");\n    }\n\n    // Eidt mode toggler\n    function setEditMode() {\n        props.setEditMode({ type: \"toggleEditMode\", payload: undefined }); //FIX THIS `UNDEFINED` LATER\n        toggle();\n    }\n    // SaveChanges handler \n    function saveChanges () {\n        premixAPI.updatePrdocurCard(props.card);\n        props.setEditMode({type : 'toggleEditMode',payload : undefined});\n        toggle();\n    }\n    if (!isOpen) {\n        return (\n            <section className={styles.dotsMenu} onClick={toggle}>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n\n            </section>\n        )\n\n    }\n    else {\n        return (\n            <section className={styles.menuOptions}>\n                {props.isEditMode && <span className=\"save-changes\" onClick={saveChanges}>{\"Save changes\"}</span>}\n                <span onClick={setEditMode}>{props.isEditMode ? \"Cancel Editing\" : \"Edit\"}</span>\n                <span onClick={deleteProduct}>Delete</span>\n                <span onClick={toggle}>Close</span>\n            </section>\n        )\n    }\n\n}\n","const TOGGLE_EDIT_MODE = \"toggleEditMode\";\n\n\ntype ActionType = {\n    type : string,\n    payload : any\n}\ntype initialStateType = {\n    isEditMode : boolean\n}\n\nexport const Reducer = (state : initialStateType,action : ActionType) => {\n    switch(action.type) {\n        case TOGGLE_EDIT_MODE : {\n            return {\n                ...state,\n                isEditMode : !state.isEditMode\n            }\n        }\n        default : \n            return state\n    }\n}","// React,React hooks\nimport { Suspense, useReducer } from \"react\";\n// Components\nimport { ProductCard } from \"./ProductCard\";\nimport { Editor } from \"./Editor\";\nimport { Preloader } from \"../../PremixesApp/Components/Preloader\";\nimport { DotsMenu } from \"./Menu\";\n// Styles and Assets\nimport \"../../../Assets/Styles/PeoduxtCard.css\";\n// Redux \nimport { Reducer } from \"./Reducer\";\nimport { productType } from \"../../../Redux/Types\";\n// Custom hooks\nimport { useProductCard } from \"./UseProductCard\";\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../../Redux/Store\";\n\n\n\n\n/**\n * productCard Container Compoennt\n * @returns React.Ellement\n */\n\nexport const ProductCardContainer = () => {\n    // Get data from hook\n    let card = useProductCard();\n    // General reducer for all chil compoennt\n    // Toogle card Editing mode\n    let [isEditMode, setEditMode] = useReducer(Reducer, { isEditMode: false });\n    // get uer team ID to compare with prdocut teamID\n    let userTeamID: string | null = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get product team ID\n    let productTeamID: string | undefined = useSelector((state: Global_state_type) => state.premixes.actualProductCard?.teamID);\n    // Check if card not equals to null\n    if (card) {\n        return (\n\n            <section className={`product_card container translate_animation`}>\n\n                <h1 className=\"card__tittle\">{card?.name}</h1>\n                {/* Render dots menu depending on result of comparison teamID and userTeamID */}\n                {/* If user currrent user not belong to team that create this product he cannot edit or delete prdocut card */}\n                {/* Pass Edit mode toggler into Menu component props */}\n                {userTeamID === productTeamID ? <DotsMenu isEditMode={isEditMode.isEditMode} setEditMode={setEditMode} card={card as productType} />\n                    : null}\n\n                {isEditMode.isEditMode ?\n                    // Render Editor compomnent if Editing\n                    <Editor card={card as productType} />\n                    :\n                    // Or render prdocut card information\n                    <ProductCard isEditMode={isEditMode} setEditMode={setEditMode} card={card} />\n                }\n\n            </section>\n\n        )\n    }\n    // Anotherwise reutn Preloader\n    else {\n        return <Preloader />\n    }\n\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\"\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { setProductCardThunk } from \"../../../Redux/ProductReduxer\";\n\n\nexport const useProductCard = () => {\n    const dispatch : any = useDispatch();\n    // Get current location and select product id from him\n    let location = useLocation().pathname.split(\"=\")[1];\n    let products = useSelector((state : Global_state_type) => state.premixes.actualProductCard);\n\n    \n    useEffect(() => {\n        dispatch(setProductCardThunk(location));\n    },[location]);\n    if(products)\n    {\n        return products;\n    }\n    else\n    {\n        return null;\n    }\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clanActions, createClanThunk } from \"../../Redux/TeamReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CreateTeam.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport {initializeThunk} from \"../../Redux/AppReducer\"\n\nexport const CreateTeam = () => {\n    const dispatch : any = useDispatch()\n    const navigate = useNavigate()\n    const newTeam = useSelector((state : Global_state_type) => state.clans.newTeam)\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const onSubmit = () => {\n        dispatch(createClanThunk(newTeam as {newTeamName : string,newTeamDescription : string,newTeamAvatar : ArrayBuffer},\n            user.userID as string,user.userName as string))\n           \n        dispatch(initializeThunk())\n        navigate(\"/home\")\n    }\n    \n    const onNameChangeHandler = (e : React.SyntheticEvent<HTMLInputElement>) => {\n        dispatch(clanActions.setNewClanName(e.currentTarget.value))\n    }\n    const onDescriptionChangeHandler = (e : React.SyntheticEvent<HTMLTextAreaElement>) => {\n        dispatch(clanActions.setNewTeamDiescription(e.currentTarget.value))\n    }\n    return (\n        <section className={\"create_team_container translate_animation container\"}>\n            <input type=\"text\" placeholder=\"Type name\" onChange={onNameChangeHandler}/>\n            <h3>Description :</h3>\n            <textarea name=\"\" id=\"\" onChange={onDescriptionChangeHandler} ></textarea>\n         \n            <button onClick={onSubmit}>Create Team</button>\n        </section>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"main_page_navigation\":\"HomePage_main_page_navigation__JkPyR\",\"home_page_container\":\"HomePage_home_page_container__osqww\",\"home_page_info\":\"HomePage_home_page_info__ez4rq\"};","import { useNavigate } from \"react-router-dom\";\nimport styles from \"./HomePage.module.css\"\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\nimport docIcon from \"../../Assets/Icons/icons8-document-64.png\"\nimport teamicon from \"../../Assets/Icons/icons8-team-96.png\"\nimport chemistryIcon from \"../../Assets/Icons/icons8-chemistry-100(1).png\"\n\nimport documentIcon from \"../../Assets/Icons/icons8-document-90.png\";\n\n\n\n\n\nconst MainPageNavigation = () => {\n    const navigate = useNavigate()\n\n    return (\n        <section className=\"main_page_navigation\">\n            \n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Prep Shift</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/premixes\") }}>\n\n\n                    <a>Recepie Cards</a>\n                    <img className=\"icon\" src={documentIcon} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n        </section>\n    )\n}\n\nexport const HomePage = () => {\n    const profile = useSelector((state: Global_state_type) => {\n        return state.App.user\n    })\n\n    return (\n        <section className={`${styles.home_page_container} ${styles.translate_animation}`}>\n            <div className={styles.home_page_info}>\n                <h1 id={styles.userName}>Hi,{profile.userName}!\n\n                </h1>\n                <span>{profile.team ? profile.team : null}</span>\n                <br />\n            </div>\n            <MainPageNavigation /> \n\n\n        </section>\n    )\n}","import React from \"react\";\nimport { createNewIngridientCard, newCardActions } from \"../../../Redux/NewCardReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../../Assets/Styles/SecondStep.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { productType } from \"../../../Redux/Types\";\n\nexport const SecondStep = () => {\n    const dispatch: any = useDispatch()\n\n    // SET DESCRITION\n    const setDescription = (e: React.FormEvent<HTMLTextAreaElement>) => {\n        dispatch(newCardActions.setNewDescription(e.currentTarget.value))\n    }\n    const newProduct = useSelector((state: Global_state_type) => state.newCard)\n    const teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    const navigate = useNavigate()\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects(obj: object) {\n            let resultObject = Object.keys(obj).map((el: string, index: number, array: any[]) => {\n                return {\n                    [el]: Object.values(obj)[index]\n                }\n            });\n            return resultObject;\n        }\n        console.log(convertObjectToArrayOfObjects(newProduct));\n        if (teamID) {\n            let card: productType = {\n                name: newProduct.name,\n                description: newProduct.description,\n                composition: convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID: teamID,\n                isVisibleForAll : newProduct.isVisibleForAll\n\n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        } else {\n            navigate(\"/clan-list\")\n        }\n\n\n    }\n    return (\n        <div className={\"second_step\"}>\n            <h2 className=\"second-step__tittle\">Desription : </h2>\n            <textarea name=\"Description\" id=\"description\" onChange={setDescription}></textarea>\n  \n\n        </div>\n    )\n}","\nimport { Formik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { newCardActions } from \"../../../Redux/NewCardReducer\";\nimport \"../Styles/NewProduct.css\"\nimport { addIngridientValidationScema } from \"../../../Helpers/Helpers\";\n\n\nexport const NewIngridientSingleForm = () => {\n    const dispatch: any = useDispatch()\n    // SUBMIT FORMS\n    const Submit = (values: { key: string, value: string }) => {\n        let newIngridient = { [values.key]: values.value }\n        dispatch(newCardActions.addNewIngridient(newIngridient))\n    }\n    return (\n        <div className=\"single_input\">\n            <Formik initialValues={{ key: \"\", value: \"\" }}\n                enableReinitialize={true}\n                validateOnBlur={true}\n                onSubmit={Submit}\n                validationSchema={addIngridientValidationScema}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                    console.log(isValid)\n                    return (\n                        <div className=\"input_container\">\n                            <input type=\"text\" id=\"key\" className={!errors.key ? \"input\" : \"error-input\"} required={true} autoComplete=\"off\" onChange={handleChange} />\n                            <input type=\"number\" id=\"value\" className={!errors.value ? \"input\" : \"error-input\"}  required={true} autoComplete=\"off\" onChange={handleChange} />\n\n                            <button\n                                //@ts-ignore \n                                onClick={handleSubmit} id=\"add_component\" type=\"submit\">add</button>\n                        </div>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}","import { useState } from \"react\";\nimport { NewIngridientSingleForm } from \"./NewIngridientSingleForm\";\n\nexport const Compund: React.FC = () => {\n    // ARRAY OF FORMS FOR ADDING NEW COMMPOENT OBJET\n    let [forms, setForms] = useState([\n        <NewIngridientSingleForm />\n    ]);\n    // ADD NEW INPUTS FOR NEW COMPONENT\n    const addInput = (e: React.MouseEvent<HTMLElement>) => {\n        setForms([...forms, <NewIngridientSingleForm />])\n\n    }\n    return (\n        <section className=\"compound\">\n            <h2>Composition : </h2>\n            <div className=\"compound_inputs\">\n                {forms}\n            </div>\n\n            <button onClick={addInput} className=\"add-ingridient\">Add ingrideint</button>\n        </section>\n    )\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { productType } from \"../../../Redux/Types\";\nimport { createNewIngridientCard, newCardActions } from \"../../../Redux/NewCardReducer\";\n\nexport const TopSection: React.FC = () => {\n    const dispatch: any = useDispatch()\n\n    const navigate = useNavigate();\n    const newProduct = useSelector((state: Global_state_type) => state.newCard)\n    const teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    // SET NAME\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        dispatch(newCardActions.setNewName(e.currentTarget.value))\n    }\n    // Visibility toggler\n    function toggleVisibility() {\n        dispatch(newCardActions.toggleVisibility());\n    };\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects(obj: object) {\n            let resultObject = Object.keys(obj).map((el: string, index: number, array: any[]) => {\n                return {\n                    [el]: Object.values(obj)[index]\n                }\n            });\n            return resultObject;\n        }\n        \n        if (teamID) {\n            let card: productType = {\n                name: newProduct.name,\n                description: newProduct.description,\n                composition: convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID: teamID,\n                isVisibleForAll: newProduct.isVisibleForAll\n\n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        } else {\n            navigate(\"/clan-list\")\n        }\n\n\n    }\n    function validate () {\n        return newProduct.name.length > 2 ? true : false\n    }\n\n    return (\n        <div className=\"top-section\">\n            <input type=\"text\" placeholder=\"Name\"  id=\"name\" onChange={(e) => { onNameChange(e) }} />\n            <div className=\"visibility-input\">\n                <span>Visible for all : </span>\n                <input  id=\"visibility-input\" onChange={toggleVisibility} type=\"checkbox\" />\n                <button className=\"confirm_button\" disabled={!validate()} onClick={createnewProduct}>Create</button>\n            </div>\n        </div>\n    )\n}","\nimport \"../Styles/NewProduct.css\"\n\nimport { SecondStep } from \"./SecondStep\";\n\nimport { Compund } from \"./Compound\";\nimport { TopSection } from \"./TopSection\";\n\nexport const FirstStep = (props: { isDarkTheme: boolean }) => {\n\n    return (\n        <section className={props.isDarkTheme ? \"new_premix_first_step container DarkTheme\" : \"container LightTheme\"}>\n            <h1 className=\"first_step_tittle\">Recepie constructor</h1>\n            <TopSection />\n            <SecondStep />\n            <Compund />\n\n        </section>\n    )\n}","\n// Styles\nimport { NewCardComponent } from \"../Components/newCardComponent\";\nimport \"../Styles/NewProduct.css\";\n// Cpmponents\nimport { FirstStep } from \"./FirstStep\";\n// Hooks\nimport { useLocation, } from \"react-router-dom\";\n\nexport const NewProduct = (props : {isDarkTheme : boolean} ) => {\n\n    const location = useLocation().pathname.split(\"/\")[1]\n\n    console.log(location)\n    return (\n        <section className=\"recepie_constructor translate_animation\">\n            <FirstStep isDarkTheme={props.isDarkTheme}/>\n          {/* <NewCardComponent/> */}\n        \n        </section>\n    )\n}","// Custom Hooks\nimport { useInput, useValidator } from \"./Hooks.\";\n// React,ReactHooks\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// API functions\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\n// Styles and Assesets\nimport add from \"../../../Assets/Icons/icons8-done-150.png\"\nimport styles from \"../Styles/CheckLists.module.css\"\n// Types\nimport { Global_state_type } from \"../../../Redux/Store\";\n// Route\nimport { CHECK_LIST } from \"../../../Router/Routes\";\n\n\nexport const NewCheckList = () => {\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    let navigate = useNavigate();\n\n    // Get inputs from Hook \n    let [nameInput, nameValue] = useInput(\"Untitled\", \"Type name\");\n    let [taskInput, taskValue, setInput] = useInput(\"\", \"Task\");\n    // Define tasks array\n    let [tasks, setTasks] = useState<string[]>([]);\n    // On Error State if input value is not valid\n\n    // Define a RegExp to validate inputs\n    let [onError, errorMessage, validate] = useValidator(/^[a-zA-Z0-9а-яА-Я]+$/);\n\n    // Push new task into \"tasks\" array\n    const onAddClickHandler = () => {\n        // Validate input by rgExp\n        validate(taskValue);\n        if (!onError) {\n            setTasks([...tasks, taskValue]);\n            setInput(\"\");\n        }\n\n    }\n    const createCheckList = () => {\n        // Check if task name are valid\n        validate(nameValue);\n        if (!onError) {\n            //  If valid add new checklist\n            CheckListsAPI.addCheckList(teamID as string, tasks, nameValue);\n            // Movae bavk to check-lists route\n            navigate(CHECK_LIST);\n        }\n\n    }\n    return (\n        <section className={styles.new_check_list_container}>\n            <h1>\n                {/* Finish editing */}\n                <button onClick={createCheckList} id={styles.add_ckeck_list}>Done</button>\n            </h1>\n            {/* Cheklist Name Input */}\n            {nameInput}\n            <ul className={styles.task_list}>\n                {/* Render the added tasks array */}\n                {tasks.map((task: string) => <li key={task}>{task}</li>)}\n            </ul>\n            {/* New task Input */}\n            <div className={styles.new_check_list_controls}>\n                {taskInput}\n                <button className={styles.confirm_button} onClick={onAddClickHandler}>\n                    <img className={styles.icon} src={add} alt=\"\" />\n                </button>\n                <br />\n                {/* Error message (Renders if input conyain errors) */}\n                <span>{onError ? errorMessage : null}</span>\n            </div>\n        </section>\n    )\n}\n\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { getCurrentIngridient } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const IngridientCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCurrentIngridient(location))\n    },[])\n    let currentIngridient = useSelector((state : Global_state_type) => state.knowledgeBase.currentSpirit)\n    return (\n        <section className=\" container spirit_card translate_animation\">\n            <figure>\n            \n            <img id=\"cocktail_photo\" src={currentIngridient?.image} alt=\"\" />\n            <figcaption><h2>{currentIngridient?.displayName}</h2></figcaption>  \n            </figure>\n            <article>\n\n            <h4>Описание : </h4>\n            <p>\n                {currentIngridient?.definition}\n            </p>\n        \n            <span>Технология произодства : </span>\n            <p>{currentIngridient?.production}</p>\n            </article>\n         \n        </section>\n    )\n}","\n// Define Props Type\ntype registrationFormType = {\n    touched: boolean | undefined,\n    handleChange : (e : React.ChangeEvent<any>) => void,\n    errors : string | undefined,\n    type : string,\n    id : string,\n    callback? : () => {},\n\n}\n/**\n * This component return input and span component containig error message\n * If error was thrown\n * \n * @param props registrationFormType\n * @returns React.Ellemet\n */\nexport const RegistrationFormInput: React.FC<registrationFormType> = (props : registrationFormType) => {\n    return (\n        <>\n            <input type={props.type} id={props.id} autoComplete=\"off\" onChange={props.handleChange} placeholder={props.id} />\n            <span className=\"onInputError\">{props.touched ? props.errors : null}</span>\n        </>\n    )\n}\n","// React,ReactHooks\nimport { useState } from \"react\";\n\n// Components\nimport { RegistrationFormInput } from \"./RegistrationFormInput\";\n\n// API funcions,Helpers\nimport { validationShema } from \"../../Helpers/Helpers\";\nimport { authApi } from \"../../services/Firebase/AuthAPI\";\nimport { FirebaseError } from \"firebase/app\";\n\n// Styles and Assets\nimport \"../../Assets/Styles/Registration.css\"\nimport showPasswordIcon from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePasswordIcon from \"../../Assets/Icons/icons8-hide-password-100.png\"\n\n// Formik\nimport { Formik } from \"formik\"\n\n\n\n/**\n * New user registration component.\n * Uses the Formik library for form control and validation\n * \n * @returns React.Ellement\n */\nexport const Registration = () => {\n\n    // Show hide password boolean flag\n    let [isPasswordHided, setPasswordHided] = useState(false);\n    // Error message state\n    let [error, setError] = useState<string>(\"\")\n\n    // Create user function \n    const Submit = async (values: { nickName: string, email: string, password: string, repeatPassword: string }) => {\n        // Try to create user \n        await authApi.createUserWithEmailAndPassword(values.email, values.password, values.nickName)\n            .catch((ex: FirebaseError) => {\n                // If error was throwed set error message\n                setError(ex.message.split(\"(\")[1].split(\")\")[0]);\n            });\n    }\n    // Show hode password toggler function\n    function togglePassword() {\n        setPasswordHided(!isPasswordHided);\n    }\n    return (\n        <section className=\"create_the_team_container\">\n            <h1>Create account</h1>\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ nickName: \"\", companyName: \"\", email: \"\", password: \"\", repeatPassword: \"\" }}\n                onSubmit={Submit}\n                // Formik Validation Shema imported from Helpers\n                validationSchema={validationShema}\n                validateOnBlur={true}\n\n            >\n                {({ errors, touched, handleChange, handleBlur, handleSubmit }) => {\n                    return (\n                        <div className=\"create_team_inputs translate_animation\">\n                            <span className=\"onInputError\">{error}</span>\n                            <RegistrationFormInput type=\"text\" touched={touched.nickName} id={\"nickName\"} handleChange={handleChange} errors={errors.nickName} />\n                            <RegistrationFormInput type=\"text\" id=\"email\" touched={touched.email} handleChange={handleChange} errors={errors.email} />\n\n                            {/* Password input with show password button */}\n                            <div className=\"passwordFirstInput\">\n                                <RegistrationFormInput \n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                                id=\"password\" \n                                touched={touched.password} \n                                errors={errors.password} \n                                />\n                                \n                                {/* Show - hide password toggler */}\n                                <img id=\"passwordToggle\" src={isPasswordHided ? showPasswordIcon : hidePasswordIcon} onClick={togglePassword} alt=\"\" />\n                            </div>\n                            <span className=\"onInputError\"> {touched.password ? errors.password : null}</span>\n                            <RegistrationFormInput\n                                touched={touched.repeatPassword}\n                                errors={errors.repeatPassword} id=\"repeatPassword\"\n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                            />\n\n                            <button\n                                // @ts-ignore \n                                onClick={handleSubmit} id=\"submit_reg\" type=\"submit\">Create account</button>\n                        </div>\n                    )\n                }}\n            </Formik>\n\n\n        </section>\n    )\n}\n\n","// Comoponents,Hooks\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Redux\nimport { getPassedShiftByID } from \"../../../../Redux/BlankShiftReducer\";\n// Styles\nimport \"../../../../Assets/Styles/PassedShift.css\";\n// Types\nimport { productType } from \"../../../../Redux/Types\";\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { UIButton } from \"../../../../Components/Button\";\n\n\nexport const PassedShift = () => {\n    const dispatch: any = useDispatch();\n    const navigate = useNavigate();\n\n    // Get shiftID from URL\n    const shiftID = useLocation().pathname.split(\"=\")[1];\n    \n    // Fetch passed shift data by ID\n    useEffect(() => {\n        dispatch(getPassedShiftByID(shiftID));\n    }, []); // Empty array of dependencies to run the effect only once\n\n    // Get passedShift data from Redux store\n    const PassedShift = useSelector(\n        (state: Global_state_type) => state.blankShift.passedShift\n    );\n\n\n    return (\n        <section className=\"container passed_shift_container translate_animation\">\n            <table>\n                {/* Display shift details */}\n                <tr>Смена от : <td>{PassedShift?.date}</td></tr>\n                <tr>Заготовщик :<td>{PassedShift?.employe}</td></tr>\n                <tr>Сделано позиций : <td>{PassedShift?.products.length}</td></tr>\n                {/* Display list of products */}\n                {PassedShift?.products.map((el: productType) => {\n                    return (\n                        <tr>\n                            <td>{el.name}</td>\n                        </tr>\n                    );\n                })}\n            </table>\n            {/* Go back link */}\n            <UIButton callback={() => navigate(-1)} text=\"Back\"/>\n        </section>\n    );\n};\n\n","\ntype ProdcustItemItemType = {\n    name: string,\n    isChecked: boolean,\n    id: string,\n    toggleFunction: (action: { type: string, payload: string }) => void\n}\n\n\nexport const ProdcustItem = (props: ProdcustItemItemType) => {\n\n    function toggle(id: string) {\n        props.toggleFunction({\n            type: 'toggle-item',\n            payload: id\n        })\n    }\n    return (\n        <li key={props.id}\n            // Is element checked flag\n            className={props.isChecked ? `checked_element list__item` : `unchecked_element list__item`}\n            onClick={() => { toggle(props.id) }} id={props.id}>\n\n            <span>{props.name}</span>\n        </li>\n    )\n};","// Coponents\nimport { ProdcustItem } from \"./PrroductItem\"\n// Types\nimport { productType } from \"../../../../Redux/Types\"\n\n\ntype prdocuctListType = {\n    products: productType[],\n    dispatch : (action : {type : string,payload : string}) => void\n}\n\n\nexport const ProductList = (props: prdocuctListType) => {\n    return (\n        <ul className=\"product_list\">\n            {props.products.map((el: productType) => {\n                 return (\n                    <ProdcustItem name={el.name} isChecked={el.checked as boolean} toggleFunction={props.dispatch} id={el.id as string} />\n                )\n            })}\n        </ul>\n    )\n}","import { productType } from \"../../../Redux/Types\"\n\n\ntype ActionType = {\n    type: string,\n    payload: any\n}\n\nexport const Reducer = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case 'toggle-item': {\n            console.log(action.payload)\n            return [\n                ...state.map((el: productType) => {\n                    if (el.id === action.payload) {\n\n                        return {...el,checked : !el.checked};\n                    }\n                    return el;\n                })\n            ]\n        }\n        case 'toggle-all': {\n            return [\n                ...state.map((el: productType) => {\n                    return { ...el, checked: !el.checked }\n                })\n            ]\n        }\n        case 'set-products' : {\n            console.log(action.payload)\n            return [\n                ...action.payload\n            ]\n        }\n        default:\n            return state;\n    }\n}","// REDUX\nimport { setCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\n// TYPES\nimport { productType, userPageType } from \"../../../../Redux/Types\";\n// React imports\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\n// IMPORT ICONS AND STYLES\nimport \"../../../../Assets/Styles/BlamkShift.css\"\nimport startIcon from \"../../../../Assets/Icons/icons8-start-64.png\"\n\n\n\n\ntype shiftConstructorTopPControls = {\n    products: productType[],\n    user: userPageType,\n    dispatchProducts : any\n}\n\n/**\n *  Check is all items was selected \n * @param products ArrayProductType\n * @returns boolean\n */\n\nfunction checkSelection (products : productType[]) {\n    let result = products.filter((el : productType) => el.checked == true);\n    if (result.length > 0) {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n};\n\n\nexport const CreateNewShiftControls = (props: shiftConstructorTopPControls) => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n    // Check if all items was selectrd or not\n    let isAllSelected = checkSelection(props.products);\n    // Create shift hanler ,get all data and creates new shift object and pass them into \n    // setCurrentShift thunk\n    const createShift = () => {\n        dispatch(setCurrentShiftByCompanyID(\n            props.user.team as string,\n            props.user.teamID as string,\n            props.products,\n            props.user.userName as string));\n\n        navigate(\"/begin-blank-shift\");\n\n    }\n    // Toggler fuction (comes from props)\n    function toggleAll () {\n        props.dispatchProducts({type : 'toggle-all'});\n    }\n    return (\n        <ul className='controls'>\n            <li \n                onClick={toggleAll}>\n                {isAllSelected ? \"Clear\" : \"Select all\"}\n            </li>\n            <li onClick={createShift}>Start\n                <img className=\"icon\" src={startIcon} alt=\"\" />\n            </li>\n\n        </ul>\n    )\n}","// React,React hooks\nimport { useEffect, useReducer } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n// Components\nimport { ProductList } from \"./PrdocuctList\";\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\n// Custom Hooks\nimport { Reducer } from \"../../Reducers/constructorReducer\";\n// Redux.Redux thunks\nimport { CreateNewShiftControls } from \"./CreateNewShiftControls\";\nimport { getProductsByCompanyID } from \"../../../../Redux/ProductReduxer\";\n\n\n\n\nexport const ShiftConstructorContainer = () => {\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    let products = useSelector((state: Global_state_type) => state.blankShift.productList);\n    const dispatch: any = useDispatch();\n    // Define a localal reducer with custom toggling state\n    let [state, dispatchProducts] = useReducer(Reducer, products);\n    // Get products and pass them into the local state\n    useEffect(() => {\n        dispatchProducts({\n            type: 'set-products',\n            payload: products\n        });\n    }, [products.length]);\n\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(user.teamID as string))\n    }, []);\n\n\n    return (\n        <section className=\"shift-constructor container\">\n            <CreateNewShiftControls products={state} user={user} dispatchProducts={dispatchProducts}/>\n            <ProductList products={state} dispatch={dispatchProducts}  />\n        </section>\n    )\n};","// extracted by mini-css-extract-plugin\nexport default {\"textbookContainer\":\"TextbookContainer_textbookContainer__-Nclp\",\"transl\":\"TextbookContainer_transl__zehwu\",\"textbookContainer__tittle\":\"TextbookContainer_textbookContainer__tittle__lOmhR\",\"tittles\":\"TextbookContainer_tittles__veo34\",\"tittleItem\":\"TextbookContainer_tittleItem__anwlz\",\"article\":\"TextbookContainer_article__jOL3V\",\"articleImg\":\"TextbookContainer_articleImg__W00gf\"};","import { NavLink } from 'react-router-dom';\nimport styles from './Styles/TextbookContainer.module.css';\n\n\nexport const TextbookContainer: React.FC = () => {\n\n    return (\n        <section className={[styles.textbookContainer,styles.translate_animation].join('')}>\n            <h1 className={styles.textbookContainer__tittle}>Textbook</h1>\n            <ul className={styles.tittles}>\n                <li className={styles.tittleItem}>\n                    <NavLink to={\"/article/name=tools\"}>\n                        Tools\n                    </NavLink>\n                </li>\n                <li className={styles.tittleItem}>\n                    <NavLink to={\"/article/name=distilation\"}>\n                        Distilation\n                    </NavLink>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=mixibg-techniques\">Mixing techniques</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=spirits\">Spirits</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=modern-techniques\">Modern techniques</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=coctails-categories\">Coctail categories</a>\n                </li>\n            </ul>\n        </section>\n    )\n}","import styles from \"../Styles/TextbookContainer.module.css\";\n\nexport const Distilation = () => {\n    return (\n        <article className={styles.article}>\n            <p>\n                Дистилля́ция (от лат. distillatio — стекание каплями; перегонка) — процесс испарения жидкости с последующим охлаждением и\n                конденсацией паров, который используется, прежде всего, для разделения жидких смесей и очистки выделяемых веществ.\n                Основан на различии в температурах кипения компонентов смеси. В зависимости от состава разделяемой смеси и целей процесса,\n                продуктами дистилляции могут быть как дистиллят (отогнанные фракции), обогащённый более летучими (низкокипящими) компонентами,\n                так и неотогнанный (кубовый) остаток, содержащий менее летучие (высококипящие) компоненты[1][2].\n            </p>\n            <img className={styles.articleImg} src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Simple_distillation_apparatus.svg/800px-Simple_distillation_apparatus.svg.png\" alt=\"Изображение апарата для дистиляции\" />\n            Различают дистилляцию с конденсацией пара в жидкость (при которой получаемый дистиллят имеет усреднённый состав вследствие перемешивания)\n            и дистилляцию с конденсацией пара в твёрдую фазу (при которой в конденсате возникает распределение концентрации компонентов).\n            Основными деталями дистилляционного устройства являются испаритель, предстявляющий собой обогреваемый контейнер (куб) для перегоняемой жидкости\n            , дефлегматор, для частичной конденсации пара, выходящего из испарителя, охлаждаемый конденсатор (холодильник), сборник дистиллята\n            и соединяющий их паропровод[1][2].\n            <h2>История : </h2>\n            <p>\n                Первые сведения о дистилляции относятся к I веку и упоминаются в работах греческих алхимиков в Александрии (Египет)[3].\n                В XI веке, у Авиценны, дистилляция упоминается как метод получения эфирных масел. C середины XIX века разрабатывается ректификация.\n                <br />\n                Применение :\n                Дистилляция применяется в промышленности и в лабораторной практике для разделения и рафинирования сложных веществ: для разделения смесей органических веществ (например, разделение нефти на бензин, керосин, дизельное топливо и др.; получение душистых веществ в парфюмерии; очистка этилового спирта) и для получения высокочистых неорганических веществ (например, металлов: бериллия, свинца, цинка, магния, кадмия, ртути; и неметаллов: серы, селена и др.).\n                <br />\n                Дистилляция с конденсацией пара в жидкость :\n                <br />\n                Простая перегонка — частичное испарение жидкой смеси путём непрерывного отвода и конденсации образовавшихся паров в холодильнике. Полученный конденсат называется дистиллятом, а неиспарившаяся жидкость — кубовым остатком.\n                Фракционная дистилляция (или дробная перегонка) — разделение многокомпонентных жидких смесей на отличающиеся по составу части, фракции, путём сбора конденсата частями с различной летучестью, начиная с первой, обогащенной низкокипящим компонентом. Остаток жидкости обогащён высококипящим компонентом. Для улучшения разделения фракций применяют дефлегматор.\n\n                Ректификация — способ дистилляции, при котором часть жидкого конденсата (флегма) постоянно возвращается в куб, двигаясь навстречу пару в колонне. В результате этого примеси, содержащиеся в паре, частично переходят во флегму и возвращаются в куб, при этом чистота пара (и конденсата) повышается.\n            </p>\n\n        </article>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { cocltalCardType, getCocktailByID } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CoctailCard.css\"\n// Assets\nimport glass from \"../../Assets/Icons/icons8-martini-100.png\";\nimport bottle from \"../../Assets/Icons/icons8-wine-100.png\";\n\n\nconst CocktailCard = () => {\n    const dispatch: any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCocktailByID(location))\n    }, [])\n    let currentCocktail = useSelector((state: Global_state_type) => state.knowledgeBase.currentCocktail) as cocltalCardType\n\n\n    return (\n        <article className=\"cocktail_card_container translate_animation\">\n            <div className=\"coctail-card__content\">\n                <section className=\"left_section\">\n                <img id=\"cocktail_photo\" src={currentCocktail?.strDrinkThumb} alt=\"\" />\n                <button className=\"save_drink\">Save cocktail</button>\n                </section>\n       \n\n\n                <article className=\"coctail-card__info\">\n                    <h2 className=\"coctail-card__tittle\">{currentCocktail?.strDrink}</h2>\n                    <span className=\"info__glass\"><img src={glass}></img>Glass : {currentCocktail?.strGlass}</span>\n                    <span className=\"info__category\">Category IBA : {currentCocktail?.strIBA ? currentCocktail.strIBA : \"не входит в IBA\"}</span>\n                    <span className=\"info__category\">Category : {currentCocktail?.strCategory}</span>\n                    <h3 className=\"info__subtittle\">Techonlogy : </h3>\n                    <p className=\"info__technology\">{currentCocktail?.strInstructions}</p>\n                    <h3 className=\"info__composition\">Composition : </h3>\n                    {currentCocktail ? Object.keys(currentCocktail.composition).map((el: string, index: number) => {\n                        return (\n                            <span className=\"composition__item\"><img src={bottle} alt=\"\" />{el + \" : \" + Object.values(currentCocktail.composition)[index]}</span>\n                        )\n                    }) : null}\n                </article>\n            </div>\n\n\n        </article>\n    )\n};\n\n\nexport default CocktailCard;","// -------------------------------------------\n// \n//.............................................THIS FILE CONTAINS AN ARRAY MATCHING ADDRESS \n//                                              STRINGS WITH THEIR CORRESPONDING COMPONENTS\n//                                              THESE ROUTES ARE USED BY THE FILE Router.tsx\n// -------------------------------------------\n// React imports\nimport React from \"react\";\n// ---------- IMPORT REACT COMPOENTS\n\nimport { Navigate } from \"react-router-dom\";\nimport { CheckListPage } from \"../Modules/ChecklistApp/Components/CheclListPage\";\nimport { ProductCardContainer } from \"../Modules/RecepiesApp/Components/ProductCardContainer\";\nimport { CreateTeam } from \"../Modules/TeamApp/CreateTeam\";\nimport { HomePage } from \"../Components/MainPage/mainScreen\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { NewProduct } from \"../Modules/RecepiesApp/NewProduct/NewProduct\";\nimport { SecondStep } from \"../Modules/RecepiesApp/NewProduct/SecondStep\";\nimport { NewCheckList } from \"../Modules/ChecklistApp/Components/NewCheckList\";\nimport { IngridientCard } from \"../Modules/KnowledjeBase/Ingridient\";\nimport { Registration } from \"../Modules/Auth/Registration\";\nimport { PassedShift } from \"../Modules/PremixesApp/Components/HistoryPage/PassedShiftItem\";\nimport { ShiftConstructorContainer } from \"../Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer\";\nimport { TextbookContainer } from \"../Modules/Textbook/TextbookContainer\";\nimport { Distilation } from \"../Modules/Textbook/Pages/Distilation\";\nimport CocktailCard from \"../Modules/KnowledjeBase/CoctrailCard\";\n\nconst LoginPage = React.lazy(() => import(\"../Modules/Auth/LoginPage\"));\nconst PremixesApp = React.lazy(() => import(\"../Modules/PremixesApp/Premixes\"));\nconst RecepiesApp = React.lazy(() => import(\"../Modules/RecepiesApp/RecepiesAppContainer\"));\nconst ChecklistApp = React.lazy(() => import(\"../Modules/ChecklistApp/Components/CheckLists\"));\nconst TeamApp = React.lazy(() => import('../Modules/TeamApp/TeamPageContainer'));\nconst SearchApp = React.lazy(() => import(\"../Modules/KnowledjeBase/KnowledgeBase\"));\n\n\n// ---------- ROUTES STRINGS\nexport const SHIFT_MANAGER = '/shiftManager/*'\nexport const HOME = \"/home\"\nexport const COCKTAIL_CARD = \"/cocktail/:id\"\nexport const PREMIX_LIST = \"/premixes\"\nexport const ADD_PRODUCT = \"/add\"\nexport const PRODUCT_CARD = \"/card/:id\"\nexport const LOG_OUT = \"/logOut\"\nexport const REGISTRATION = \"/registration\"\nexport const NO_MATCH_ROUTE = \"*\"\nexport const BLANK_SHIFT = \"/blank-shift/*\"\nexport const STEP_2 = \"add-step-two\"\nexport const NEW_BLANK_SHIFT = \"/shiftManager/create-new\"  \nexport const CHECK_LISTS = \"/check-lists\"\nexport const PASSED_SHIFT = \"shiftManager/:id\"\nexport const CLAN_LISTS = \"/clan-list\"\nexport const CREATE_TEAM = \"/create-team\"\nexport const JOIN_TEAM = \"/join-team\"\nexport const NEW_CHECK_LIST = \"/new-check-list\"\nexport const CHECK_LIST = \"/check-lists/:id\"\nexport const KNIWLEDGE_BASE = \"knowledge-base\"\nexport const INGRIDIENT = \"/ingridient/:id\"\nexport const HISTORY = '/blank-shift/history'\nexport const TEXTBOOK = '/textbook'\nexport const ARTICLE = 'article/:name=distilation'\n\n// PRIVATE ROUTES ARRAY\n// These routes are available only to authorized users\n// If an unauthorized user attempts to access, they are redirected to the login page\n\nexport const PRIVATE_ROUTES : ROUTE[] = [\n    {\n        path : HISTORY,\n        element : <h1>History</h1>\n    },\n    {\n        path : HOME,\n        element : <HomePage/>\n    },\n    {\n        path : COCKTAIL_CARD,\n        element : <CocktailCard/>\n    },\n    {\n        path : CREATE_TEAM,\n        element : <CreateTeam/>\n    },\n    {\n        path : SHIFT_MANAGER,\n        element : <PremixesApp/>\n    },\n    {\n        path : CHECK_LIST,\n        element : <CheckListPage/>\n    },\n    {\n        path : PASSED_SHIFT,\n        element : <PassedShift/>\n    },\n    {\n        path : BLANK_SHIFT,\n        element : <PremixesApp/>\n    },\n    {\n        path : PREMIX_LIST,\n        element : <RecepiesApp/>\n    },\n    {\n        path : PRODUCT_CARD,\n        element : <ProductCardContainer/>\n    },\n    {\n        path : NEW_BLANK_SHIFT,\n        element : <ShiftConstructorContainer/>\n    },\n    {\n        path : CHECK_LISTS,\n        element : <ChecklistApp/>\n    },\n    {\n        path : NO_MATCH_ROUTE,\n        element : <Navigate to=\"/home\" />\n    },\n    {\n        path : TEXTBOOK,\n        element : <TextbookContainer/>\n    },\n    {\n        path : ADD_PRODUCT,\n        element : <NewProduct isDarkTheme={true}/>\n    },\n    {\n        path : STEP_2,\n        element : <SecondStep/>\n    },\n    {\n        path : CLAN_LISTS,\n        element : <TeamApp/>\n    },\n    {\n        path : NEW_CHECK_LIST,\n        element : <NewCheckList/>\n    },\n    {\n        path : KNIWLEDGE_BASE,\n        element : <SearchApp/>\n    },\n    {\n        path : INGRIDIENT,\n        element : <IngridientCard/>\n    },\n    {\n        path : ARTICLE,\n        element : <Distilation/>\n    }\n]\n// PUBLICK ROUTES ARRAY\n// This routes are accessible for all users includeing not authiorized users\n// \nexport const PUBLICK_ROUTES : ROUTE [] = [\n    {\n        path : LOG_OUT,\n        element : <LoginPage/>\n    },\n    {\n        path : NO_MATCH_ROUTE,\n        element : <Navigate to={\"/logOut\"}/>\n    },\n    {\n        path : REGISTRATION,\n        element : <Registration/>\n    }\n\n]","\n// ---------- REACT & REACT HOOKS\nimport React, { Suspense } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ---------- REDUX\nimport { Global_state_type } from \"../Redux/Store\";\n\n// ---------- IMPORT PROVATE & PUBLICK ROUND & ROUTE INTERFACE\nimport { PRIVATE_ROUTES, PUBLICK_ROUTES } from \"./Routes\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { Preloader } from \"../Modules/PremixesApp/Components/Preloader\";\n\n// The router component iterates over the routes array and returns a route component\n//  with the corresponding react component. if user is not authorized iterates over PUBLKICK_ROUTES array\n// anotherwise over PRIVATE_ROUTES\n\n\nconst Router = React.memo(() => {\n    // Get Auth state from redux\n    const isAuth = useSelector((state: Global_state_type) => { return state.App.isAuth })\n\n    if (isAuth) {\n        // If authorized map only in PRIVATE_ROUTES\n        return (\n            <div className=\"content\">\n                <Suspense fallback={<Preloader />}>\n                    <Routes>\n                        {PRIVATE_ROUTES.map((route: ROUTE) => {\n                            return (\n\n                                <Route key={route.path} element={route.element} path={route.path} />\n\n                            )\n                        })}\n                    </Routes>\n                </Suspense>\n            </div>\n        )\n    }\n\n    else {\n        return (\n            <>\n                <Routes>\n                    {PUBLICK_ROUTES.map((route: ROUTE) => <Route key={route.path} path={route.path} element={route.element} />)}\n                </Routes>\n            </>\n        )\n    }\n\n})\n\nexport default Router;","// extracted by mini-css-extract-plugin\nexport default {\"check_lists_container__empty_check_list_container\":\"CheckLists_check_lists_container__empty_check_list_container__dbSe7\",\"appear\":\"CheckLists_appear__rCcx9\",\"single_check_list\":\"CheckLists_single_check_list__9IEtt\",\"check_lists__create_btn\":\"CheckLists_check_lists__create_btn__MpuDm\",\"icon\":\"CheckLists_icon__Fugq9\",\"new_check_list_container\":\"CheckLists_new_check_list_container__FMHmi\",\"new_check_list_controls\":\"CheckLists_new_check_list_controls__B-P0Q\",\"task_list\":\"CheckLists_task_list__5iUfF\",\"checklis_list\":\"CheckLists_checklis_list__0T2o2\",\"cheklist_preview__item\":\"CheckLists_cheklist_preview__item__XeFiK\",\"check_list_controls\":\"CheckLists_check_list_controls__bMiXx\",\"tasks\":\"CheckLists_tasks__wvWsD\",\"tasks_item\":\"CheckLists_tasks_item__CKkhW\",\"tasks_item__checkbox\":\"CheckLists_tasks_item__checkbox__JozXF\",\"add_ckeck_list\":\"CheckLists_add_ckeck_list__Gk0YN\",\"check_lists__create-btn\":\"CheckLists_check_lists__create-btn__gu+rV\",\"confirm_button\":\"CheckLists_confirm_button__PaPNL\"};","// extracted by mini-css-extract-plugin\nexport default {\"recepiesContainer\":\"RecepiesContainer_recepiesContainer__SlLBA\",\"recepiesContainerHeader\":\"RecepiesContainer_recepiesContainerHeader__i0YcX\",\"recepiesContainer__tittle\":\"RecepiesContainer_recepiesContainer__tittle__sjMJ8\",\"recepiesContainerEmpty\":\"RecepiesContainer_recepiesContainerEmpty__7dp7p\",\"nothinFoundIcon\":\"RecepiesContainer_nothinFoundIcon__FuAth\",\"addButton\":\"RecepiesContainer_addButton__33RtY\",\"RecepiesList\":\"RecepiesContainer_RecepiesList__rwMOU\",\"listItem\":\"RecepiesContainer_listItem__wCtEU\",\"dotsMenu\":\"RecepiesContainer_dotsMenu__KubNy\",\"dotsMenu__dot\":\"RecepiesContainer_dotsMenu__dot__k9Oqt\",\"menuOptions\":\"RecepiesContainer_menuOptions__+1Fi1\",\"appear\":\"RecepiesContainer_appear__ra75J\"};"],"names":["UIButton","props","params","_jsx","id","type","className","onClick","callback","children","text","useProductFilter","initial","filter","setFilter","useState","dispatch","useDispatch","teamID","useSelector","state","App","user","useEffect","getProductsByCompanyID","length","premixes","el","name","includes","value","UseToggle","initialValue","setState","useTaskList","navigate","useNavigate","useLocation","pathname","split","result","chcekLists","checkLists","find","deleteHandler","deleteChekListThunk","useChecklistList","getCheckListsthunk","RecepiesList","goToProductCard","event","currentTarget","dataset","styles","recepies","map","ChecklistDotsMenu","isOpen","setIsOpen","toggle","_jsxs","checklist","CheckListPage","tasks","index","ProductComposition","parseComposition","composition","ProdicuCalculater","_props$product","setValue","console","log","product","placeholder","onChange","Number","calculateAndParseIntoComponent","ProductDescription","isOpened","setIsOpened","isEditMode","productActions","description","ProductCard","_props$card","_props$card2","products","filterProducts","windoWidth","window","innerWidth","setEditMode","card","useInput","arguments","undefined","maxLength","Editor","input","setInput","key","setKey","array","Object","keys","values","e","DotsMenu","productID","premixAPI","payload","deleteProductCrad","Reducer","action","ProductCardContainer","useProductCard","location","actualProductCard","setProductCardThunk","useReducer","userTeamID","productTeamID","_state$premixes$actua","Preloader","CreateTeam","newTeam","clans","clanActions","onSubmit","createClanThunk","userID","userName","initializeThunk","MainPageNavigation","src","alt","HomePage","profile","concat","team","SecondStep","newCard","newCardActions","NewIngridientSingleForm","Formik","initialValues","enableReinitialize","validateOnBlur","newIngridient","validationSchema","addIngridientValidationScema","_ref","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","required","autoComplete","Compund","forms","setForms","TopSection","newProduct","onNameChange","disabled","createnewProduct","obj","isVisibleForAll","createNewIngridientCard","FirstStep","isDarkTheme","NewProduct","NewCheckList","nameInput","nameValue","taskInput","taskValue","setTasks","onError","errorMessage","validate","regExp","isError","setError","errorText","setErrorText","pattern","test","useValidator","createCheckList","CheckListsAPI","CHECK_LIST","task","onAddClickHandler","IngridientCard","getCurrentIngridient","currentIngridient","knowledgeBase","currentSpirit","image","displayName","definition","production","RegistrationFormInput","_Fragment","Registration","isPasswordHided","setPasswordHided","error","togglePassword","nickName","companyName","email","password","repeatPassword","async","authApi","catch","ex","message","validationShema","showPasswordIcon","hidePasswordIcon","PassedShift","shiftID","getPassedShiftByID","blankShift","passedShift","date","employe","ProdcustItem","isChecked","toggleFunction","ProductList","checked","CreateNewShiftControls","isAllSelected","dispatchProducts","createShift","setCurrentShiftByCompanyID","ShiftConstructorContainer","productList","TextbookContainer","join","NavLink","to","href","Distilation","CocktailCard","getCocktailByID","currentCocktail","strDrinkThumb","strDrink","strGlass","strIBA","strCategory","strInstructions","LoginPage","React","PremixesApp","RecepiesApp","ChecklistApp","TeamApp","SearchApp","PRIVATE_ROUTES","path","element","Navigate","PUBLICK_ROUTES","isAuth","Suspense","fallback","Routes","route","Route"],"sourceRoot":""}