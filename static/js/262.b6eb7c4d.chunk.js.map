{"version":3,"file":"static/js/262.b6eb7c4d.chunk.js","mappings":"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","sources":["Components/Button.tsx","Components/ErrorBoundary.tsx","Helpers/CustomHooks.tsx","Modules/ChecklistApp/Components/Hooks.tsx","Modules/RecepiesApp/RecepiesList.tsx","webpack://bartend/./src/Assets/Styles/DotsMenu.module.css?954c","Modules/ChecklistApp/Components/DotsMenu.tsx","Modules/ChecklistApp/Components/CheclListPage.tsx","Modules/RecepiesApp/Components/Composition.tsx","Modules/RecepiesApp/Components/ProductCalculator.tsx","Modules/RecepiesApp/Components/ProductDescription.tsx","Modules/RecepiesApp/Components/ProductCard.tsx","Modules/RecepiesApp/Components/Editor.tsx","Modules/RecepiesApp/Components/Menu.tsx","Modules/RecepiesApp/Components/Reducer.ts","Modules/RecepiesApp/Components/ProductCardContainer.tsx","Modules/RecepiesApp/Components/UseProductCard.tsx","Modules/TeamApp/CreateTeam.tsx","webpack://bartend/./src/Components/MainPage/HomePage.module.css?5385","Components/MainPage/mainScreen.tsx","Modules/RecepiesApp/NewProduct/SecondStep.tsx","Modules/RecepiesApp/NewProduct/NewIngridientSingleForm.tsx","Modules/RecepiesApp/NewProduct/Compound.tsx","Modules/RecepiesApp/NewProduct/TopSection.tsx","Modules/RecepiesApp/NewProduct/FirstStep.tsx","Modules/RecepiesApp/NewProduct/NewProduct.tsx","Modules/ChecklistApp/Components/Hooks..tsx","Modules/ChecklistApp/Components/NewCheckList.tsx","Modules/KnowledjeBase/Ingridient.tsx","Modules/Auth/RegistrationFormInput.tsx","Modules/Auth/Registration.tsx","Modules/PremixesApp/Components/HistoryPage/PassedShiftItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrroductItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrdocuctList.tsx","Modules/PremixesApp/Reducers/constructorReducer.tsx","Modules/PremixesApp/Components/ConstructorPage/CreateNewShiftControls.tsx","Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer.tsx","webpack://bartend/./src/Modules/Textbook/Styles/TextbookContainer.module.css?7d57","Modules/Textbook/TextbookContainer.tsx","Modules/Textbook/Pages/Distilation.tsx","Modules/KnowledjeBase/CoctrailCard.tsx","Router/Routes.tsx","Router/Router.tsx","webpack://bartend/./src/Modules/ChecklistApp/Styles/CheckLists.module.css?b113","webpack://bartend/./src/Modules/RecepiesApp/Styles/RecepiesContainer.module.css?48ed"],"sourcesContent":["import React from \"react\";\n\n// Define a props type\ntype ButtonPropsType = {\n    text : string,\n    id? : string,\n    className? : string,\n    callback? : (event : React.SyntheticEvent) => void,\n    type? : \"button\" | \"submit\"\n    \n}\n\n/**\n * Unique Button component as\n * @param text text to render as child\n * @param id id for DOM node\n * @param clasName dom node classname\n * @param callback onclick callback function\n * \n * @returns React.Ellement \n */\nexport const UIButton : React.FC<ButtonPropsType> = (props : ButtonPropsType,params?) => {\n    return (\n        <button\n            id={props.id}\n            type={props.type}\n            className={props.className}\n            onClick={props.callback}\n        >\n            {props.text}\n        </button>\n    )\n}","import { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n    children?: ReactNode;\n}\n\ninterface State {\n    hasError: boolean;\n}\n\n\nclass ErrorBoundary extends Component<Props, State>\n{\n    state = {\n        hasError: false\n    }\n    public static getDerivedStateFromError(error: Error) {\n        return { error };\n    }\n\n    public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        console.error(\"Uncaught error:\", error, errorInfo);\n    }\n    render() {\n        const error = this.state.hasError;\n\n        if (error) {\n            return (\n                <section className=\"error-page\">\n                    <span>Something went wrong</span>\n                </section>\n            )\n        }\n        else {\n            return this.props.children;\n        }\n    }\n};\n\n\nexport default ErrorBoundary;","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { productType } from \"../Redux/Types\";\nimport { getProductsByCompanyID } from \"../Redux/ProductReduxer\";\n\n\nexport const useProducts = () => {\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        return state.premixes.premixes\n    })\n    if(products.length > 0) {\n        return products\n    }\n    else{\n        return []\n    }\n}\n\nexport const useProductFilter = (initial : string) : [productType[],(e : string) => void] => {\n    const [filter,setFilter] = useState(initial)\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, []);\n    let products = useSelector((state: Global_state_type) => {\n        if(filter.length === 0) {\n            return state.premixes.premixes\n        }\n        return state.premixes.premixes.filter((el : productType) => el.name.includes(filter))\n    })\n    const updateFilter = (value : string) => {\n        setFilter(value)\n    }\n    \n    return [products,updateFilter]\n    \n}\n\nexport const useWindowInnerWidth = () => {\n    const [windowWidth,setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        const handleResizeWindow = () => setWindowWidth(window.innerWidth)\n        window.addEventListener(\"resize\",handleResizeWindow)\n        return () => {\n            window.removeEventListener(\"resize\",handleResizeWindow)\n        }\n    },[])\n    return windowWidth\n}\n\n\nexport const useDebounce = (callback : (...args:any) => {},delay : number,value : any)=> {\n    const timer = useRef(null);\n    const dispatch : any = useDispatch();\n    const DebounceCallback = useCallback((...args : any) => {\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        else {\n            setTimeout(() => {\n                console.log(\"DISPATHED\")\n               dispatch(callback(value));\n            },delay)\n        }\n    },[callback,delay]);\n\n    console.log(DebounceCallback)\n    return DebounceCallback;\n}\n\n\n/**\n * \n * @param initialValue initial value for boolean flag\n * @returns [actualState,TogglerFunction]\n */\nexport const UseToggle = (initialValue : boolean) : [boolean,() => void] => {\n\n    let [state,setState] = useState<boolean>(initialValue);\n    \n    function toggle () {\n        setState(!state);\n    }\n\n    return [state,toggle];\n}\n\nexport const useNewCardIngridients = () => {\n    const products = useSelector((state : Global_state_type) => state.newCard.composition);\n    return Object.keys(products as {});\n}","\n// React,hooks\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useEffect } from \"react\";\n// Redux,thunks\nimport { checkListType, deleteChekListThunk, getCheckListsthunk } from \"../../../Redux/CheckListReducer\";\n// Types\n\n\n\n\nimport { Global_state_type } from \"../../../Redux/Store\";\n/**\n* @params none\n* \n* \n* Return a typple with specifik checklist object that contains \n* ist of tasks and handler to delete them\n* @returns [checklist,deleteHanler]\n*/\n\nexport const useTaskList = (): [checkListType | null, () => void] => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    let id = useLocation().pathname.split(\"=\")[1];\n    let checklist: checkListType | null = useSelector((state: Global_state_type) => {\n        let result = state.chcekLists.checkLists.find((el: checkListType) => el.id === id);\n        if (result) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    });\n    const deleteHandler = () => {\n        dispatch(deleteChekListThunk(id))\n        navigate(\"/check-lists\")\n    };\n    return [checklist, deleteHandler];\n}\n\n\n/**\n * \n * Return a list of checklists for current establishment\n * @returtn array checkListType[]\n */\nexport const useChecklistList = () => {\n    const dispatch: any = useDispatch();\n    // Get team id to fetch data by him\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Fetch data\n    useEffect(() => {\n        dispatch(getCheckListsthunk(teamID as string))\n    }, []);\n    let checkLists = useSelector((state: Global_state_type) => state.chcekLists.checkLists);\n    \n    return checkLists;\n}","import { productType } from \"../../Redux/Types\"\n// Styles\nimport styles from \"./Styles/RecepiesContainer.module.css\";\n\n// List Props type \ntype RecepiesListPropsType = {\n    recepies: productType[],\n    navigate: any // Remove this any later and define accurate type for this function\n}\n\nexport const RecepiesList: React.FC<RecepiesListPropsType> = (props) => {\n\n    // Navigation to product card function\n    function goToProductCard(event: React.SyntheticEvent<HTMLLIElement>) {\n        props.navigate(\"/card/id=\" + event.currentTarget.dataset.id);\n    }\n    return (\n        <ul className={styles.RecepiesList}>\n            {\n            /*  Map on the recepies array and reuturn <li> with containing \n                name of each element and navigation function passed into onClick \n            */}\n\n            {props.recepies.map((el: productType) => {\n                return (\n                    <li className={styles.listItem} key={el.id} data-id={el.id} onClick={goToProductCard}>{el.name}</li>\n                )\n            })}\n        </ul>\n\n\n\n\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"recepiesContainerHeader\":\"DotsMenu_recepiesContainerHeader__xsXMT\",\"dotsMenu\":\"DotsMenu_dotsMenu__hP93e\",\"dotsMenu__dot\":\"DotsMenu_dotsMenu__dot__tEkFP\",\"menuOptions\":\"DotsMenu_menuOptions__Xcih5\",\"appear\":\"DotsMenu_appear__25f3n\"};","import { useState } from \"react\"\nimport { checkListType, deleteChekListThunk } from \"../../../Redux/CheckListReducer\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport styles from '../../../Assets/Styles/DotsMenu.module.css'\n\n\n// DEFINE A PROPS TYPE\ntype ChecklistDotsMenu = {\n    checklist: checkListType\n}\n\nexport const ChecklistDotsMenu: React.FC<ChecklistDotsMenu> = (props) => {\n    const navigate = useNavigate();\n    // Toggle isWindowOpen \n    let [isOpen, setIsOpen] = useState<boolean>(false);\n    const dispatch : any = useDispatch();\n    // Opening window togggler function \n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // Delete checklist \n    function deleteCheklist() {\n        // Delete\n        dispatch(deleteChekListThunk(props.checklist.id));\n        navigate(-1);\n    }\n\n    if (!isOpen) {\n        // Render menu icon \n        return (\n            <section className={styles.dotsMenu} onClick={toggle}>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n\n            </section>\n        )\n\n    }\n    else {\n        // Opened menu\n        return (\n            <section className={styles.menuOptions}>\n              \n                <span onClick={deleteCheklist}>Delete</span>\n                <span onClick={toggle}>Close</span>\n\n            </section>\n        )\n    }\n}","// Assets\n\n// Hooks\nimport { useTaskList } from \"./Hooks\";\n// Styles\nimport styles from  \"../Styles/CheckLists.module.css\"\nimport { ChecklistDotsMenu } from \"./DotsMenu\";\nimport { checkListType } from \"../../../Redux/CheckListReducer\";\n\n\n/**\n * Checklist taskList in checkList page\n * \n * @returns React.Ellement\n */\nexport const CheckListPage = () => {\n    // Get checklist object amd delete hadler from hook\n    let [checklist] = useTaskList();\n\n\n    return (\n        <section className={styles.single_check_list}>\n           \n            <div className={styles.check_list_controls}>\n                {/* Dots menu calls Modal Window when clicked */}\n                <h1>Tasks</h1>\n              <ChecklistDotsMenu checklist={checklist as checkListType}/>\n            </div>\n\n            <ul className={styles.tasks}>\n                {/* Map on tasks array and render every task*/}\n                {checklist?.tasks.map((el: string, index: number) => {\n                    return (\n                        <li key={el} className={styles.tasks_item}>\n               \n                            <input className={styles.tasks_item__checkbox} type=\"checkbox\" />\n                    \n                            <span>{index + 1 + \".\" + el}</span>\n                            <br />\n                        </li>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","// React,ReactHooks\nimport {useState } from \"react\"\n// Redux,ThunkActions\nimport { productType } from \"../../../Redux/Types\";\n// Helpers\nimport { parseComposition } from \"../../../Helpers/Helpers\";\n// Styles\nimport \"../Styles/RecepieCard.css\"\n\n// DECLARE PROPS TYPE\n\n// -----------------\ntype ProductCompositionType = {\n    isEditMode: boolean,\n    composition: {}[],\n    card: productType\n}\n// -----------------\n\n\n/**\n * A component displaying the composition of the current product. \n * And also the product card editor depending on the isEditMode prop\n *\n * @param props {isEditMode : boolean,composition {}[] ,card}\n * \n * @returns React.Element\n */\nexport const ProductComposition = (props: ProductCompositionType) => {\n    // Hide or show component state\n    let [isOpen, setIsOpen] = useState<boolean>(false);\n\n    // Show|Hide toggler function\n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // If isOpen === false render the Show button\n    if (!isOpen) {\n        return (\n            <button className=\"composition_btn\" onClick={toggle}>Composition</button>\n        )\n    }\n\n    else {\n        return (\n            <section>\n                <button className=\"composition_btn\" onClick={toggle}>Composition</button>\n                <p className=\"composition\">{parseComposition(props.composition)}</p>\n            </section>\n        )\n    }\n\n\n}","// React,ReactHooks\nimport React, { useState } from \"react\";\n// Helpeers\nimport { calculateAndParseIntoComponent } from \"../../../Helpers/Helpers\";\n\n// Types\nimport { productType } from \"../../../Redux/Types\";\n\n\n\nexport const ProdicuCalculater = (props : { product: productType | null}) => {\n    // Multiplier value\n    let [value, setValue] = useState(1);\n    console.log(props.product);\n    // Input Handler\n    // Function to calculate value of prdoduct composition\n    function calculate(event: React.SyntheticEvent<HTMLInputElement>) {\n        if (event.currentTarget.value.length < 1) {\n            setValue(1)\n        } else {\n            setValue(Number(event.currentTarget.value))\n        }\n    };\n\n    return (\n      \n            <section className=\"product-card__calculator\">\n                <input type=\"number\" placeholder=\" How much do we need?\" onChange={calculate} />\n                <br />\n                <div className=\"calculated_result\">\n                    {calculateAndParseIntoComponent(props.product?.composition as {}[], value)}\n                </div>\n            </section>\n\n\n    )\n}","// React,ReactHooks\nimport { Dispatch, useState } from \"react\"\n// Styles and Assets\nimport \"../../../Assets/Styles/PeoduxtCard.css\";\n// Redux,Reducers\nimport { useDispatch } from \"react-redux\";\nimport { productActions } from \"../../../Redux/ProductReduxer\";\n\n\n// Define a `props` type to component\ntype propsType = {\n    setState: Dispatch<{ type: string, payload: any }>,\n    isEditMode: boolean,\n    description: string\n}\n\n/**\n * \n * @param props propsType\n * ProductCard Description component\n * Render actual card description and set them if 'EditMode' is enabled\n * \n * @returns React.Ellement\n */\n\nexport const ProductDescription = (props: propsType) : React.ReactElement => {\n    // Is Description Opened\n    // Shoow <p></p> ellement if true anoterwose just render the Button\n    let [isOpened, setIsOpened] = useState<boolean>(false);\n\n    const dispatch: any = useDispatch();\n    // Description open Toggler function\n    function toggle() {\n        setIsOpened(!isOpened);\n    }\n    // OnChange event handler that we use in textarea if props.isEditMode === true\n    function onChangeHandler(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    }\n \n    if (!isOpened) {\n        // Render Description or textarea to Edit descritpion\n        return (\n            <section >\n                <button className=\"composition_btn\" onClick={toggle}>Dscription</button>\n                {!props.isEditMode ? <p className=\"composition\">{props.description}</p> :\n                    <textarea\n                        onChange={onChangeHandler}\n                        className=\"description-textarea\"\n                        value={props.description}></textarea>}\n            </section>\n        )\n    }\n    else {\n        return (\n            <button className=\"composition_btn\" onClick={toggle}>Description</button>\n        )\n    }\n\n}","// TYPES\nimport { useNavigate } from \"react-router-dom\"\nimport { useProductFilter } from \"../../../Helpers/CustomHooks\"\nimport { productType } from \"../../../Redux/Types\"\nimport { RecepiesList } from \"../RecepiesList\"\n// Components\nimport { ProductComposition } from \"./Composition\"\nimport { DotsMenu } from \"./Menu\"\nimport { ProdicuCalculater } from \"./ProductCalculator\"\nimport { ProductDescription } from \"./ProductDescription\"\n\n// DEFINE A PROP TYPE\n// ------------------\ntype CardPropsType = {\n    isEditMode : {isEditMode : boolean},\n    setEditMode : any,\n    card : productType,\n}\n// -----------------\n\n/**\n * Render product card page if isEditMode equals to false in parent component\n * @param props CardPropdType\n * @returns React.Element\n */\n\nexport const ProductCard : React.FC<CardPropsType> = (props : CardPropsType) => {\n    const [products,filterProducts] = useProductFilter('');\n    const navigate = useNavigate();\n    const windoWidth = window.innerWidth;\n    console.log(windoWidth)\n    return (\n        <section className=\"product_card__page\">\n            <section className=\"card_section\">\n            <ProductDescription isEditMode={props.isEditMode.isEditMode} setState={props.setEditMode} description={props.card?.description as string} />\n            <ProductComposition card={props.card as productType} isEditMode={props.isEditMode.isEditMode} composition={props.card?.composition as {}[]} />\n            <ProdicuCalculater product={props.card} />\n            </section>\n            {windoWidth > 850 ?\n            <section className=\"list\">\n            <RecepiesList navigate={navigate} recepies={products}/>\n            </section> : null}\n        </section>\n    )\n\n}","// React,ReactHooks\nimport { useDispatch } from \"react-redux\"\n// Redux,Actions\nimport { AnyAction, Dispatch } from \"redux\";\nimport { productActions } from \"../../../Redux/ProductReduxer\";\n// Types\nimport { ReactNode, useState } from \"react\";\nimport { productType } from \"../../../Redux/Types\"\n\n\n\n// DECLARE PROP TYPE\n\n// -----------------\ntype EditorPropType = {\n    card: productType,\n}\n\n/** \n * Product card editor component\n * \n * Render only when the isEdit flag is true\n * \n * @param props card : prdocuctType\n * @returns ReactEllement\n */\n\nexport const Editor: React.FC<EditorPropType> = (props: EditorPropType) => {\n    const dispatch: Dispatch<AnyAction> = useDispatch();\n    // Textarea onChange handler\n    function onChange(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    };\n    // Delete handler function \n    function deleteHandler(event: React.SyntheticEvent<HTMLSpanElement>) {\n        dispatch(productActions.deleteComponent(event.currentTarget.id));\n    };\n\n    // New ingridient state\n    let [key, setKey] = useState(\"\");\n    let [value, setValue] = useState(\"\");\n    // Add component Handler\n    function addComponent() {\n        dispatch(productActions.addComonent({ [key]: value }));\n        setValue(\"\");\n        setKey(\"\");\n    }\n    \n    return (\n        <section className=\"editor\">\n            <h3 className=\"editor__tittle\">Description : </h3>\n            <textarea\n                onChange={onChange}\n                className=\"editor__desctiption-textarea\"\n                // Get actual value from store -> prpops\n                value={props.card.description}>\n            </textarea>\n            <h3 className=\"editor__tittle\">Composition : </h3>\n\n            <ul className=\"editor__composition\">\n                {props.card.composition.map((el: {}, index: number, array: {}[]) => {\n                    return (\n                        <li className=\"editor__item\">\n                            <span>{Object.keys(el)[0] + \" : \"}</span>\n                            <span >{Object.values(el)[0] as ReactNode}</span>\n                            {/* DELETE BUTTON */}\n                            <span\n                                id={Object.keys(el)[0]}\n                                className=\"editot__component__delete\"\n                                onClick={deleteHandler}>Delete</span>\n                            <br />\n                        </li>)\n                })}\n            </ul>\n            {/* Render inputs */}\n            <div className=\"editor__newcomponent-input\">\n                {/* KEY INPUT */}\n                <input type=\"text\"\n                 value={key} placeholder=\"Name\" \n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setKey(e.currentTarget.value)}}/>\n                 {/* VAKUE INPUT */}\n                <input type=\"text\"\n                 value={value} \n                 placeholder=\"Value\"\n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setValue(e.currentTarget.value)}} />\n            </div>\n            <button onClick={addComponent}>Add</button>\n        </section>\n    )\n}","// React,ReactHooks\nimport { Dispatch } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\";\n// Redux,Reducers\nimport { deleteProductCrad } from \"../../../Redux/ProductReduxer\";\nimport { UseToggle } from \"../../../Helpers/CustomHooks\";\nimport { useDispatch } from \"react-redux\";\n// Types\nimport { productType } from \"../../../Redux/Types\";\nimport { premixAPI } from \"../../../services/Firebase/PremixAPI\";\n\n// Styles\nimport styles from \"../../../Assets/Styles/DotsMenu.module.css\"\n// PROPS TYPE\n// --------------\ntype DotsMenuPropsType = {\n    setEditMode: Dispatch<{ type: string, payload: any }>,              //EditMode toggler\n    isEditMode: boolean,\n    card: productType                                                  //Prdouct data\n}\n// --------------\n\n\n\n/**\n * DOTS   MENU COMPONENT : \n * \n * Contains isEditMode toggling function and delete product card\n * \n * @param props DotsMenuPropsType {Dispatch,isEditMode,card}\n * @returns React.Ellement\n */\nexport const DotsMenu = (props: DotsMenuPropsType) => {\n\n    // Get boolean state and toggler function from hook\n    // If isOpen === true render menu with containig items anotherwise\n    // Render three dots menu icon\n    let [isOpen, toggle] = UseToggle(false);\n\n    // Get id of prdocut card\n    const productID = useLocation().pathname.split(\"=\")[1]\n\n    // Navigate function\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    // Delete button handller\n    function deleteProduct() {\n        dispatch(deleteProductCrad(productID));\n        navigate(\"/premixes\");\n    }\n\n    // Eidt mode toggler\n    function setEditMode() {\n        props.setEditMode({ type: \"toggleEditMode\", payload: undefined }); //FIX THIS `UNDEFINED` LATER\n        toggle();\n    }\n    // SaveChanges handler \n    function saveChanges () {\n        premixAPI.updatePrdocurCard(props.card);\n        props.setEditMode({type : 'toggleEditMode',payload : undefined});\n        toggle();\n    }\n    if (!isOpen) {\n        return (\n            <section className={styles.dotsMenu} onClick={toggle}>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n\n            </section>\n        )\n\n    }\n    else {\n        return (\n            <section className={styles.menuOptions}>\n                {props.isEditMode && <span className=\"save-changes\" onClick={saveChanges}>{\"Save changes\"}</span>}\n                <span onClick={setEditMode}>{props.isEditMode ? \"Cancel Editing\" : \"Edit\"}</span>\n                <span onClick={deleteProduct}>Delete</span>\n                <span onClick={toggle}>Close</span>\n            </section>\n        )\n    }\n\n}\n","const TOGGLE_EDIT_MODE = \"toggleEditMode\";\n\n\ntype ActionType = {\n    type : string,\n    payload : any\n}\ntype initialStateType = {\n    isEditMode : boolean\n}\n\nexport const Reducer = (state : initialStateType,action : ActionType) => {\n    switch(action.type) {\n        case TOGGLE_EDIT_MODE : {\n            return {\n                ...state,\n                isEditMode : !state.isEditMode\n            }\n        }\n        default : \n            return state\n    }\n}","// React,React hooks\nimport { Suspense, useReducer } from \"react\";\n// Components\nimport { ProductCard } from \"./ProductCard\";\nimport { Editor } from \"./Editor\";\nimport { Preloader } from \"../../PremixesApp/Components/Preloader\";\nimport { DotsMenu } from \"./Menu\";\n// Styles and Assets\nimport \"../../../Assets/Styles/PeoduxtCard.css\";\n// Redux \nimport { Reducer } from \"./Reducer\";\nimport { productType } from \"../../../Redux/Types\";\n// Custom hooks\nimport { useProductCard } from \"./UseProductCard\";\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../../Redux/Store\";\n\n\n\n\n/**\n * productCard Container Compoennt\n * @returns React.Ellement\n */\n\nexport const ProductCardContainer = () => {\n    // Get data from hook\n    let card = useProductCard();\n    // General reducer for all chil compoennt\n    // Toogle card Editing mode\n    let [isEditMode, setEditMode] = useReducer(Reducer, { isEditMode: false });\n    // get uer team ID to compare with prdocut teamID\n    let userTeamID: string | null = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get product team ID\n    let productTeamID: string | undefined = useSelector((state: Global_state_type) => state.premixes.actualProductCard?.teamID);\n    // Check if card not equals to null\n    if (card) {\n        return (\n\n            <section className={`product_card container translate_animation`}>\n\n                <h1 className=\"card__tittle\">{card?.name}</h1>\n                {/* Render dots menu depending on result of comparison teamID and userTeamID */}\n                {/* If user currrent user not belong to team that create this product he cannot edit or delete prdocut card */}\n                {/* Pass Edit mode toggler into Menu component props */}\n                {userTeamID === productTeamID ? <DotsMenu isEditMode={isEditMode.isEditMode} setEditMode={setEditMode} card={card as productType} />\n                    : null}\n\n                {isEditMode.isEditMode ?\n                    // Render Editor compomnent if Editing\n                    <Editor card={card as productType} />\n                    :\n                    // Or render prdocut card information\n                    <ProductCard isEditMode={isEditMode} setEditMode={setEditMode} card={card} />\n                }\n\n            </section>\n\n        )\n    }\n    // Anotherwise reutn Preloader\n    else {\n        return <Preloader />\n    }\n\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\"\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { setProductCardThunk } from \"../../../Redux/ProductReduxer\";\n\n\nexport const useProductCard = () => {\n    const dispatch : any = useDispatch();\n    // Get current location and select product id from him\n    let location = useLocation().pathname.split(\"=\")[1];\n    let products = useSelector((state : Global_state_type) => state.premixes.actualProductCard);\n\n    \n    useEffect(() => {\n        dispatch(setProductCardThunk(location));\n    },[location]);\n    if(products)\n    {\n        return products;\n    }\n    else\n    {\n        return null;\n    }\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clanActions, createClanThunk } from \"../../Redux/TeamReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CreateTeam.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport {initializeThunk} from \"../../Redux/AppReducer\"\n\nexport const CreateTeam = () => {\n    const dispatch : any = useDispatch()\n    const navigate = useNavigate()\n    const newTeam = useSelector((state : Global_state_type) => state.clans.newTeam)\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const onSubmit = () => {\n        dispatch(createClanThunk(newTeam as {newTeamName : string,newTeamDescription : string,newTeamAvatar : ArrayBuffer},\n            user.userID as string,user.userName as string))\n           \n        dispatch(initializeThunk())\n        navigate(\"/home\")\n    }\n    \n    const onNameChangeHandler = (e : React.SyntheticEvent<HTMLInputElement>) => {\n        dispatch(clanActions.setNewClanName(e.currentTarget.value))\n    }\n    const onDescriptionChangeHandler = (e : React.SyntheticEvent<HTMLTextAreaElement>) => {\n        dispatch(clanActions.setNewTeamDiescription(e.currentTarget.value))\n    }\n    return (\n        <section className={\"create_team_container translate_animation container\"}>\n            <input type=\"text\" placeholder=\"Type name\" onChange={onNameChangeHandler}/>\n            <h3>Description :</h3>\n            <textarea name=\"\" id=\"\" onChange={onDescriptionChangeHandler} ></textarea>\n         \n            <button onClick={onSubmit}>Create Team</button>\n        </section>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"main_page_navigation\":\"HomePage_main_page_navigation__JkPyR\",\"home_page_container\":\"HomePage_home_page_container__osqww\",\"home_page_info\":\"HomePage_home_page_info__ez4rq\"};","import { useNavigate } from \"react-router-dom\";\nimport styles from \"./HomePage.module.css\"\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\nimport docIcon from \"../../Assets/Icons/icons8-document-64.png\"\nimport teamicon from \"../../Assets/Icons/icons8-team-96.png\"\nimport chemistryIcon from \"../../Assets/Icons/icons8-chemistry-100(1).png\"\n\nimport documentIcon from \"../../Assets/Icons/icons8-document-90.png\";\n\n\n\n\n\nconst MainPageNavigation = () => {\n    const navigate = useNavigate()\n\n    return (\n        <section className=\"main_page_navigation\">\n            \n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Prep Shift</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/premixes\") }}>\n\n\n                    <a>Recepie Cards</a>\n                    <img className=\"icon\" src={documentIcon} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n        </section>\n    )\n}\n\nexport const HomePage = () => {\n    const profile = useSelector((state: Global_state_type) => {\n        return state.App.user\n    })\n\n    return (\n        <section className={`${styles.home_page_container} ${styles.translate_animation}`}>\n            <div className={styles.home_page_info}>\n                <h1 id={styles.userName}>Hi,{profile.userName}!\n\n                </h1>\n                <span>{profile.team ? profile.team : null}</span>\n                <br />\n            </div>\n            <MainPageNavigation /> \n\n\n        </section>\n    )\n}","import React from \"react\";\nimport { createNewIngridientCard, newCardActions } from \"../../../Redux/NewCardReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../../Assets/Styles/SecondStep.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { productType } from \"../../../Redux/Types\";\n\nexport const SecondStep = () => {\n    const dispatch: any = useDispatch()\n\n    // SET DESCRITION\n    const setDescription = (e: React.FormEvent<HTMLTextAreaElement>) => {\n        dispatch(newCardActions.setNewDescription(e.currentTarget.value))\n    }\n    const newProduct = useSelector((state: Global_state_type) => state.newCard)\n    const teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    const navigate = useNavigate()\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects(obj: object) {\n            let resultObject = Object.keys(obj).map((el: string, index: number, array: any[]) => {\n                return {\n                    [el]: Object.values(obj)[index]\n                }\n            });\n            return resultObject;\n        }\n        console.log(convertObjectToArrayOfObjects(newProduct));\n        if (teamID) {\n            let card: productType = {\n                name: newProduct.name,\n                description: newProduct.description,\n                composition: convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID: teamID,\n                isVisibleForAll : newProduct.isVisibleForAll\n\n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        } else {\n            navigate(\"/clan-list\")\n        }\n\n\n    }\n    return (\n        <div className={\"second_step\"}>\n            <h2 className=\"second-step__tittle\">Desription : </h2>\n            <textarea name=\"Description\" id=\"description\" onChange={setDescription}></textarea>\n  \n\n        </div>\n    )\n}","\nimport { Formik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { newCardActions } from \"../../../Redux/NewCardReducer\";\nimport \"../Styles/NewProduct.css\"\nimport { addIngridientValidationScema } from \"../../../Helpers/Helpers\";\n\n\nexport const NewIngridientSingleForm = () => {\n    const dispatch: any = useDispatch()\n    // SUBMIT FORMS\n    const Submit = (values: { key: string, value: string }) => {\n        let newIngridient = { [values.key]: values.value }\n        dispatch(newCardActions.addNewIngridient(newIngridient))\n    }\n    return (\n        <div className=\"single_input\">\n            <Formik initialValues={{ key: \"\", value: \"\" }}\n                enableReinitialize={true}\n                validateOnBlur={true}\n                onSubmit={Submit}\n                validationSchema={addIngridientValidationScema}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                    console.log(isValid)\n                    return (\n                        <div className=\"input_container\">\n                            <input type=\"text\" id=\"key\" className={!errors.key ? \"input\" : \"error-input\"} required={true} autoComplete=\"off\" onChange={handleChange} />\n                            <input type=\"number\" id=\"value\" className={!errors.value ? \"input\" : \"error-input\"}  required={true} autoComplete=\"off\" onChange={handleChange} />\n\n                            <button\n                                //@ts-ignore \n                                onClick={handleSubmit} id=\"add_component\" type=\"submit\">add</button>\n                        </div>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}","import { useState } from \"react\";\nimport { NewIngridientSingleForm } from \"./NewIngridientSingleForm\";\n\nexport const Compund: React.FC = () => {\n    // ARRAY OF FORMS FOR ADDING NEW COMMPOENT OBJET\n    let [forms, setForms] = useState([\n        <NewIngridientSingleForm />\n    ]);\n    // ADD NEW INPUTS FOR NEW COMPONENT\n    const addInput = (e: React.MouseEvent<HTMLElement>) => {\n        setForms([...forms, <NewIngridientSingleForm />])\n\n    }\n    return (\n        <section className=\"compound\">\n            <h2>Composition : </h2>\n            <div className=\"compound_inputs\">\n                {forms}\n            </div>\n\n            <button onClick={addInput} className=\"add-ingridient\">Add ingrideint</button>\n        </section>\n    )\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { productType } from \"../../../Redux/Types\";\nimport { createNewIngridientCard, newCardActions } from \"../../../Redux/NewCardReducer\";\n\nexport const TopSection: React.FC = () => {\n    const dispatch: any = useDispatch()\n\n    const navigate = useNavigate();\n    const newProduct = useSelector((state: Global_state_type) => state.newCard)\n    const teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    // SET NAME\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        dispatch(newCardActions.setNewName(e.currentTarget.value))\n    }\n    // Visibility toggler\n    function toggleVisibility() {\n        dispatch(newCardActions.toggleVisibility());\n    };\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects(obj: object) {\n            let resultObject = Object.keys(obj).map((el: string, index: number, array: any[]) => {\n                return {\n                    [el]: Object.values(obj)[index]\n                }\n            });\n            // CLEAR NEW CARD REDUX STATE\n            dispatch(newCardActions.clear());\n            return resultObject;\n        }\n        \n        if (teamID) {\n            let card: productType = {\n                name: newProduct.name,\n                description: newProduct.description,\n                composition: convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID: teamID,\n                isVisibleForAll: newProduct.isVisibleForAll\n\n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        } else {\n            navigate(\"/clan-list\")\n        }\n\n\n    }\n    function validate () {\n        return newProduct.name.length > 2 ? true : false\n    }\n\n    return (\n        <div className=\"top-section\">\n            <input type=\"text\" placeholder=\"Name\"  id=\"name\" onChange={(e) => { onNameChange(e) }} />\n            <div className=\"visibility-input\">\n                <span>Visible for all : </span>\n                <input  id=\"visibility-input\" onChange={toggleVisibility} type=\"checkbox\" />\n                <button className=\"confirm_button\" disabled={!validate()} onClick={createnewProduct}>Create</button>\n            </div>\n        </div>\n    )\n}","\nimport \"../Styles/NewProduct.css\"\n\nimport { SecondStep } from \"./SecondStep\";\n\nimport { Compund } from \"./Compound\";\nimport { TopSection } from \"./TopSection\";\n\nexport const FirstStep = (props: { isDarkTheme: boolean }) => {\n\n    return (\n        <section className={props.isDarkTheme ? \"new_premix_first_step container DarkTheme\" : \"container LightTheme\"}>\n            <h1 className=\"first_step_tittle\">Recepie constructor</h1>\n            <TopSection />\n            <SecondStep />\n            <Compund />\n\n        </section>\n    )\n}","\n// Styles\nimport { NewCardComponent } from \"../Components/newCardComponent\";\nimport \"../Styles/NewProduct.css\";\n// Cpmponents\nimport { FirstStep } from \"./FirstStep\";\n// Hooks\nimport { useLocation, } from \"react-router-dom\";\n\nexport const NewProduct = (props : {isDarkTheme : boolean} ) => {\n\n    const location = useLocation().pathname.split(\"/\")[1]\n\n    console.log(location)\n    return (\n        <section className=\"recepie_constructor translate_animation\">\n            <FirstStep isDarkTheme={props.isDarkTheme}/>\n          {/* <NewCardComponent/> */}\n        \n        </section>\n    )\n}","// React,Hooks\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\"\n\n// Redux,Redux-thunks\n\ntype inputEventType = React.SyntheticEvent<HTMLInputElement>;\ntype setStateType = Dispatch<SetStateAction<string>>;\n\n/**\n//  * INPUTS HOOK\n * \n * @param value default value <string>\n * @param placeholder input placeholder text <string>\n * @returns InputElement : input element : <ReactNode>\n *          state : actual state value : <string>\n *          setState : Dispatch<SetStateAction<string>>\n */\n\nexport const useInput = (value: string = \"\", placeholder: string): [ReactNode, string,setStateType] => {\n    // Input state set default from params\n    const [state, setState] = useState(\"\");\n\n    // On changeHandler tah will be passed into input \n    function onChangeHandler(event: inputEventType) {\n        setState(event.currentTarget.value);\n    };\n\n    let InputElement = <input placeholder={placeholder} value={state} onChange={onChangeHandler} maxLength={100}/>;\n\n    // Return typple with 3 elements [input,state,setState]\n    return [InputElement, state, setState];\n\n\n}\n\n/**\n * VALIDATOR HOOK\n * \n * @param regExp pattern to validate\n * @returns tupple [isError,ErrorText,vslidate function]\n * \n */\nexport const useValidator = (regExp : RegExp) : [boolean,string,(val : string) => void] => {\n    // Boolean error flag\n    let [isError,setError] = useState<boolean>(false);\n    // error message text\n    let [errorText,setErrorText] = useState<string>(\"\");\n    \n    // Define a pattern to validate frpm params\n    let pattern = regExp;\n\n    function validate (value : string) {\n        if(!pattern.test(value))\n        {\n            setError(true);\n            setErrorText(\"Error : invalid input\");\n        }\n    }\n\n    return [isError,errorText,validate]\n}","// Custom Hooks\nimport { useInput, useValidator } from \"./Hooks.\";\n// React,ReactHooks\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// API functions\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\n// Styles and Assesets\nimport add from \"../../../Assets/Icons/icons8-done-150.png\"\nimport styles from \"../Styles/CheckLists.module.css\"\n// Types\nimport { Global_state_type } from \"../../../Redux/Store\";\n// Route\nimport { CHECK_LIST } from \"../../../Router/Routes\";\n\n\nexport const NewCheckList = () => {\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    let navigate = useNavigate();\n\n    // Get inputs from Hook \n    let [nameInput, nameValue] = useInput(\"Untitled\", \"Type name\");\n    let [taskInput, taskValue, setInput] = useInput(\"\", \"Task\");\n    // Define tasks array\n    let [tasks, setTasks] = useState<string[]>([]);\n    // On Error State if input value is not valid\n\n    // Define a RegExp to validate inputs\n    let [onError, errorMessage, validate] = useValidator(/^[a-zA-Z0-9а-яА-Я]+$/);\n\n    // Push new task into \"tasks\" array\n    const onAddClickHandler = () => {\n        // Validate input by rgExp\n        validate(taskValue);\n        if (!onError) {\n            setTasks([...tasks, taskValue]);\n            setInput(\"\");\n        }\n\n    }\n    const createCheckList = () => {\n        // Check if task name are valid\n        validate(nameValue);\n        if (!onError) {\n            //  If valid add new checklist\n            CheckListsAPI.addCheckList(teamID as string, tasks, nameValue);\n            // Movae bavk to check-lists route\n            navigate(CHECK_LIST);\n        }\n\n    }\n    return (\n        <section className={styles.new_check_list_container}>\n            <h1>\n                {/* Finish editing */}\n                <button onClick={createCheckList} id={styles.add_ckeck_list}>Done</button>\n            </h1>\n            {/* Cheklist Name Input */}\n            {nameInput}\n            <ul className={styles.task_list}>\n                {/* Render the added tasks array */}\n                {tasks.map((task: string) => <li key={task}>{task}</li>)}\n            </ul>\n            {/* New task Input */}\n            <div className={styles.new_check_list_controls}>\n                {taskInput}\n                <button className={styles.confirm_button} onClick={onAddClickHandler}>\n                    <img className={styles.icon} src={add} alt=\"\" />\n                </button>\n                <br />\n                {/* Error message (Renders if input conyain errors) */}\n                <span>{onError ? errorMessage : null}</span>\n            </div>\n        </section>\n    )\n}\n\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { getCurrentIngridient } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const IngridientCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCurrentIngridient(location))\n    },[])\n    let currentIngridient = useSelector((state : Global_state_type) => state.knowledgeBase.currentSpirit)\n    return (\n        <section className=\" container spirit_card translate_animation\">\n            <figure>\n            \n            <img id=\"cocktail_photo\" src={currentIngridient?.image} alt=\"\" />\n            <figcaption><h2>{currentIngridient?.displayName}</h2></figcaption>  \n            </figure>\n            <article>\n\n            <h4>Описание : </h4>\n            <p>\n                {currentIngridient?.definition}\n            </p>\n        \n            <span>Технология произодства : </span>\n            <p>{currentIngridient?.production}</p>\n            </article>\n         \n        </section>\n    )\n}","\n// Define Props Type\ntype registrationFormType = {\n    touched: boolean | undefined,\n    handleChange : (e : React.ChangeEvent<any>) => void,\n    errors : string | undefined,\n    type : string,\n    id : string,\n    callback? : () => {},\n\n}\n/**\n * This component return input and span component containig error message\n * If error was thrown\n * \n * @param props registrationFormType\n * @returns React.Ellemet\n */\nexport const RegistrationFormInput: React.FC<registrationFormType> = (props : registrationFormType) => {\n    return (\n        <>\n            <input type={props.type} id={props.id} autoComplete=\"off\" onChange={props.handleChange} placeholder={props.id} />\n            <span className=\"onInputError\">{props.touched ? props.errors : null}</span>\n        </>\n    )\n}\n","// React,ReactHooks\nimport { useState } from \"react\";\n\n// Components\nimport { RegistrationFormInput } from \"./RegistrationFormInput\";\n\n// API funcions,Helpers\nimport { validationShema } from \"../../Helpers/Helpers\";\nimport { authApi } from \"../../services/Firebase/AuthAPI\";\nimport { FirebaseError } from \"firebase/app\";\n\n// Styles and Assets\nimport \"../../Assets/Styles/Registration.css\"\nimport showPasswordIcon from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePasswordIcon from \"../../Assets/Icons/icons8-hide-password-100.png\"\n\n// Formik\nimport { Formik } from \"formik\"\n\n\n\n/**\n * New user registration component.\n * Uses the Formik library for form control and validation\n * \n * @returns React.Ellement\n */\nexport const Registration = () => {\n\n    // Show hide password boolean flag\n    let [isPasswordHided, setPasswordHided] = useState(false);\n    // Error message state\n    let [error, setError] = useState<string>(\"\")\n\n    // Create user function \n    const Submit = async (values: { nickName: string, email: string, password: string, repeatPassword: string }) => {\n        // Try to create user \n        await authApi.createUserWithEmailAndPassword(values.email, values.password, values.nickName)\n            .catch((ex: FirebaseError) => {\n                // If error was throwed set error message\n                setError(ex.message.split(\"(\")[1].split(\")\")[0]);\n            });\n    }\n    // Show hode password toggler function\n    function togglePassword() {\n        setPasswordHided(!isPasswordHided);\n    }\n    return (\n        <section className=\"create_the_team_container\">\n            <h1>Create account</h1>\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ nickName: \"\", companyName: \"\", email: \"\", password: \"\", repeatPassword: \"\" }}\n                onSubmit={Submit}\n                // Formik Validation Shema imported from Helpers\n                validationSchema={validationShema}\n                validateOnBlur={true}\n\n            >\n                {({ errors, touched, handleChange, handleBlur, handleSubmit }) => {\n                    return (\n                        <div className=\"create_team_inputs translate_animation\">\n                            <span className=\"onInputError\">{error}</span>\n                            <RegistrationFormInput type=\"text\" touched={touched.nickName} id={\"nickName\"} handleChange={handleChange} errors={errors.nickName} />\n                            <RegistrationFormInput type=\"text\" id=\"email\" touched={touched.email} handleChange={handleChange} errors={errors.email} />\n\n                            {/* Password input with show password button */}\n                            <div className=\"passwordFirstInput\">\n                                <RegistrationFormInput \n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                                id=\"password\" \n                                touched={touched.password} \n                                errors={errors.password} \n                                />\n                                \n                                {/* Show - hide password toggler */}\n                                <img id=\"passwordToggle\" src={isPasswordHided ? showPasswordIcon : hidePasswordIcon} onClick={togglePassword} alt=\"\" />\n                            </div>\n                            <span className=\"onInputError\"> {touched.password ? errors.password : null}</span>\n                            <RegistrationFormInput\n                                touched={touched.repeatPassword}\n                                errors={errors.repeatPassword} id=\"repeatPassword\"\n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                            />\n\n                            <button\n                                // @ts-ignore \n                                onClick={handleSubmit} id=\"submit_reg\" type=\"submit\">Create account</button>\n                        </div>\n                    )\n                }}\n            </Formik>\n\n\n        </section>\n    )\n}\n\n","// Comoponents,Hooks\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Redux\nimport { getPassedShiftByID } from \"../../../../Redux/BlankShiftReducer\";\n// Styles\nimport \"../../../../Assets/Styles/PassedShift.css\";\n// Types\nimport { productType } from \"../../../../Redux/Types\";\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { UIButton } from \"../../../../Components/Button\";\n\n\nexport const PassedShift = () => {\n    const dispatch: any = useDispatch();\n    const navigate = useNavigate();\n\n    // Get shiftID from URL\n    const shiftID = useLocation().pathname.split(\"=\")[1];\n    \n    // Fetch passed shift data by ID\n    useEffect(() => {\n        dispatch(getPassedShiftByID(shiftID));\n    }, []); // Empty array of dependencies to run the effect only once\n\n    // Get passedShift data from Redux store\n    const PassedShift = useSelector(\n        (state: Global_state_type) => state.blankShift.passedShift\n    );\n\n\n    return (\n        <section className=\"container passed_shift_container translate_animation\">\n            <table>\n                {/* Display shift details */}\n                <tr>Date : <td>{PassedShift?.date}</td></tr>\n                <tr>Employee  :<td>{PassedShift?.employe}</td></tr>\n                <tr>Premixes count : <td>{PassedShift?.products.length}</td></tr>\n                {/* Display list of products */}\n                {PassedShift?.products.map((el: productType) => {\n                    return (\n                        <tr>\n                            <td>{el.name}</td>\n                        </tr>\n                    );\n                })}\n            </table>\n            {/* Go back link */}\n            <UIButton callback={() => navigate(-1)} text=\"Back\"/>\n        </section>\n    );\n};\n\n","\ntype ProdcustItemItemType = {\n    name: string,\n    isChecked: boolean,\n    id: string,\n    toggleFunction: (action: { type: string, payload: string }) => void\n}\n\n\nexport const ProdcustItem = (props: ProdcustItemItemType) => {\n\n    function toggle(id: string) {\n        props.toggleFunction({\n            type: 'toggle-item',\n            payload: id\n        })\n    }\n    return (\n        <li key={props.id}\n            // Is element checked flag\n            className={props.isChecked ? `checked_element list__item` : `unchecked_element list__item`}\n            onClick={() => { toggle(props.id) }} id={props.id}>\n\n            <span>{props.name}</span>\n        </li>\n    )\n};","// Coponents\nimport { ProdcustItem } from \"./PrroductItem\"\n// Types\nimport { productType } from \"../../../../Redux/Types\"\n\n\ntype prdocuctListType = {\n    products: productType[],\n    dispatch : (action : {type : string,payload : string}) => void\n}\n\n\nexport const ProductList = (props: prdocuctListType) => {\n    return (\n        <ul className=\"product_list\">\n            {props.products.map((el: productType) => {\n                 return (\n                    <ProdcustItem name={el.name} isChecked={el.checked as boolean} toggleFunction={props.dispatch} id={el.id as string} />\n                )\n            })}\n        </ul>\n    )\n}","import { productType } from \"../../../Redux/Types\"\n\n\ntype ActionType = {\n    type: string,\n    payload: any\n}\n\nexport const Reducer = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case 'toggle-item': {\n            console.log(action.payload)\n            return [\n                ...state.map((el: productType) => {\n                    if (el.id === action.payload) {\n\n                        return {...el,checked : !el.checked};\n                    }\n                    return el;\n                })\n            ]\n        }\n        case 'toggle-all': {\n            return [\n                ...state.map((el: productType) => {\n                    return { ...el, checked: !el.checked }\n                })\n            ]\n        }\n        case 'set-products' : {\n            console.log(action.payload)\n            return [\n                ...action.payload\n            ]\n        }\n        default:\n            return state;\n    }\n}","// REDUX\nimport { setCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\n// TYPES\nimport { productType, userPageType } from \"../../../../Redux/Types\";\n// React imports\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\n// IMPORT ICONS AND STYLES\nimport \"../../../../Assets/Styles/BlamkShift.css\"\nimport startIcon from \"../../../../Assets/Icons/icons8-start-64.png\"\n\n\n\n\ntype shiftConstructorTopPControls = {\n    products: productType[],\n    user: userPageType,\n    dispatchProducts : any\n}\n\n/**\n *  Check is all items was selected \n * @param products ArrayProductType\n * @returns boolean\n */\n\nfunction checkSelection (products : productType[]) {\n    let result = products.filter((el : productType) => el.checked == true);\n    if (result.length > 0) {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n};\n\n\nexport const CreateNewShiftControls = (props: shiftConstructorTopPControls) => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n    // Check if all items was selectrd or not\n    let isAllSelected = checkSelection(props.products);\n    // Create shift hanler ,get all data and creates new shift object and pass them into \n    // setCurrentShift thunk\n    const createShift = () => {\n        dispatch(setCurrentShiftByCompanyID(\n            props.user.team as string,\n            props.user.teamID as string,\n            props.products,\n            props.user.userName as string));\n\n        navigate(\"/begin-blank-shift\");\n\n    }\n    // Toggler fuction (comes from props)\n    function toggleAll () {\n        props.dispatchProducts({type : 'toggle-all'});\n    }\n    return (\n        <ul className='controls'>\n            <li \n                onClick={toggleAll}>\n                {isAllSelected ? \"Clear\" : \"Select all\"}\n            </li>\n            <li onClick={createShift}>Start\n                <img className=\"icon\" src={startIcon} alt=\"\" />\n            </li>\n\n        </ul>\n    )\n}","// React,React hooks\nimport { useEffect, useReducer } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n// Components\nimport { ProductList } from \"./PrdocuctList\";\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\n// Custom Hooks\nimport { Reducer } from \"../../Reducers/constructorReducer\";\n// Redux.Redux thunks\nimport { CreateNewShiftControls } from \"./CreateNewShiftControls\";\nimport { getProductsByCompanyID } from \"../../../../Redux/ProductReduxer\";\n\n\n\n\nexport const ShiftConstructorContainer = () => {\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    let products = useSelector((state: Global_state_type) => state.blankShift.productList);\n    const dispatch: any = useDispatch();\n    // Define a localal reducer with custom toggling state\n    let [state, dispatchProducts] = useReducer(Reducer, products);\n    // Get products and pass them into the local state\n    useEffect(() => {\n        dispatchProducts({\n            type: 'set-products',\n            payload: products\n        });\n    }, [products.length]);\n\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(user.teamID as string))\n    }, []);\n\n\n    return (\n        <section className=\"shift-constructor container\">\n            <CreateNewShiftControls products={state} user={user} dispatchProducts={dispatchProducts}/>\n            <ProductList products={state} dispatch={dispatchProducts}  />\n        </section>\n    )\n};","// extracted by mini-css-extract-plugin\nexport default {\"textbookContainer\":\"TextbookContainer_textbookContainer__-Nclp\",\"transl\":\"TextbookContainer_transl__zehwu\",\"textbookContainer__tittle\":\"TextbookContainer_textbookContainer__tittle__lOmhR\",\"tittles\":\"TextbookContainer_tittles__veo34\",\"tittleItem\":\"TextbookContainer_tittleItem__anwlz\",\"article\":\"TextbookContainer_article__jOL3V\",\"articleImg\":\"TextbookContainer_articleImg__W00gf\"};","import { NavLink } from 'react-router-dom';\nimport styles from './Styles/TextbookContainer.module.css';\n\n\nexport const TextbookContainer: React.FC = () => {\n\n    return (\n        <section className={[styles.textbookContainer,styles.translate_animation].join('')}>\n            <h1 className={styles.textbookContainer__tittle}>Textbook</h1>\n            <ul className={styles.tittles}>\n                <li className={styles.tittleItem}>\n                    <NavLink to={\"/article/name=tools\"}>\n                        Tools\n                    </NavLink>\n                </li>\n                <li className={styles.tittleItem}>\n                    <NavLink to={\"/article/name=distilation\"}>\n                        Distilation\n                    </NavLink>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=mixibg-techniques\">Mixing techniques</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=spirits\">Spirits</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=modern-techniques\">Modern techniques</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=coctails-categories\">Coctail categories</a>\n                </li>\n            </ul>\n        </section>\n    )\n}","import styles from \"../Styles/TextbookContainer.module.css\";\n\nexport const Distilation = () => {\n    return (\n        <article className={styles.article}>\n            <p>\n                Дистилля́ция (от лат. distillatio — стекание каплями; перегонка) — процесс испарения жидкости с последующим охлаждением и\n                конденсацией паров, который используется, прежде всего, для разделения жидких смесей и очистки выделяемых веществ.\n                Основан на различии в температурах кипения компонентов смеси. В зависимости от состава разделяемой смеси и целей процесса,\n                продуктами дистилляции могут быть как дистиллят (отогнанные фракции), обогащённый более летучими (низкокипящими) компонентами,\n                так и неотогнанный (кубовый) остаток, содержащий менее летучие (высококипящие) компоненты[1][2].\n            </p>\n            <img className={styles.articleImg} src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Simple_distillation_apparatus.svg/800px-Simple_distillation_apparatus.svg.png\" alt=\"Изображение апарата для дистиляции\" />\n            Различают дистилляцию с конденсацией пара в жидкость (при которой получаемый дистиллят имеет усреднённый состав вследствие перемешивания)\n            и дистилляцию с конденсацией пара в твёрдую фазу (при которой в конденсате возникает распределение концентрации компонентов).\n            Основными деталями дистилляционного устройства являются испаритель, предстявляющий собой обогреваемый контейнер (куб) для перегоняемой жидкости\n            , дефлегматор, для частичной конденсации пара, выходящего из испарителя, охлаждаемый конденсатор (холодильник), сборник дистиллята\n            и соединяющий их паропровод[1][2].\n            <h2>История : </h2>\n            <p>\n                Первые сведения о дистилляции относятся к I веку и упоминаются в работах греческих алхимиков в Александрии (Египет)[3].\n                В XI веке, у Авиценны, дистилляция упоминается как метод получения эфирных масел. C середины XIX века разрабатывается ректификация.\n                <br />\n                Применение :\n                Дистилляция применяется в промышленности и в лабораторной практике для разделения и рафинирования сложных веществ: для разделения смесей органических веществ (например, разделение нефти на бензин, керосин, дизельное топливо и др.; получение душистых веществ в парфюмерии; очистка этилового спирта) и для получения высокочистых неорганических веществ (например, металлов: бериллия, свинца, цинка, магния, кадмия, ртути; и неметаллов: серы, селена и др.).\n                <br />\n                Дистилляция с конденсацией пара в жидкость :\n                <br />\n                Простая перегонка — частичное испарение жидкой смеси путём непрерывного отвода и конденсации образовавшихся паров в холодильнике. Полученный конденсат называется дистиллятом, а неиспарившаяся жидкость — кубовым остатком.\n                Фракционная дистилляция (или дробная перегонка) — разделение многокомпонентных жидких смесей на отличающиеся по составу части, фракции, путём сбора конденсата частями с различной летучестью, начиная с первой, обогащенной низкокипящим компонентом. Остаток жидкости обогащён высококипящим компонентом. Для улучшения разделения фракций применяют дефлегматор.\n\n                Ректификация — способ дистилляции, при котором часть жидкого конденсата (флегма) постоянно возвращается в куб, двигаясь навстречу пару в колонне. В результате этого примеси, содержащиеся в паре, частично переходят во флегму и возвращаются в куб, при этом чистота пара (и конденсата) повышается.\n            </p>\n\n        </article>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { cocltalCardType, getCocktailByID } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CoctailCard.css\"\n// Assets\nimport glass from \"../../Assets/Icons/icons8-martini-100.png\";\nimport bottle from \"../../Assets/Icons/icons8-wine-100.png\";\n\n\nconst CocktailCard = () => {\n    const dispatch: any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCocktailByID(location))\n    }, [])\n    let currentCocktail = useSelector((state: Global_state_type) => state.knowledgeBase.currentCocktail) as cocltalCardType\n\n\n    return (\n        <article className=\"cocktail_card_container translate_animation\">\n            <div className=\"coctail-card__content\">\n                <section className=\"left_section\">\n                <img id=\"cocktail_photo\" src={currentCocktail?.strDrinkThumb} alt=\"\" />\n                <button className=\"save_drink\">Save cocktail</button>\n                </section>\n       \n\n\n                <article className=\"coctail-card__info\">\n                    <h2 className=\"coctail-card__tittle\">{currentCocktail?.strDrink}</h2>\n                    <span className=\"info__glass\"><img src={glass}></img>Glass : {currentCocktail?.strGlass}</span>\n                    <span className=\"info__category\">Category IBA : {currentCocktail?.strIBA ? currentCocktail.strIBA : \"не входит в IBA\"}</span>\n                    <span className=\"info__category\">Category : {currentCocktail?.strCategory}</span>\n                    <h3 className=\"info__subtittle\">Techonlogy : </h3>\n                    <p className=\"info__technology\">{currentCocktail?.strInstructions}</p>\n                    <h3 className=\"info__composition\">Composition : </h3>\n                    {currentCocktail ? Object.keys(currentCocktail.composition).map((el: string, index: number) => {\n                        return (\n                            <span className=\"composition__item\"><img src={bottle} alt=\"\" />{el + \" : \" + Object.values(currentCocktail.composition)[index]}</span>\n                        )\n                    }) : null}\n                </article>\n            </div>\n\n\n        </article>\n    )\n};\n\n\nexport default CocktailCard;","// -------------------------------------------\n// \n//.............................................THIS FILE CONTAINS AN ARRAY MATCHING ADDRESS \n//                                              STRINGS WITH THEIR CORRESPONDING COMPONENTS\n//                                              THESE ROUTES ARE USED BY THE FILE Router.tsx\n// -------------------------------------------\n// React imports\nimport React from \"react\";\n// ---------- IMPORT REACT COMPOENTS\n\nimport { Navigate } from \"react-router-dom\";\nimport { CheckListPage } from \"../Modules/ChecklistApp/Components/CheclListPage\";\nimport { ProductCardContainer } from \"../Modules/RecepiesApp/Components/ProductCardContainer\";\nimport { CreateTeam } from \"../Modules/TeamApp/CreateTeam\";\nimport { HomePage } from \"../Components/MainPage/mainScreen\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { NewProduct } from \"../Modules/RecepiesApp/NewProduct/NewProduct\";\nimport { SecondStep } from \"../Modules/RecepiesApp/NewProduct/SecondStep\";\nimport { NewCheckList } from \"../Modules/ChecklistApp/Components/NewCheckList\";\nimport { IngridientCard } from \"../Modules/KnowledjeBase/Ingridient\";\nimport { Registration } from \"../Modules/Auth/Registration\";\nimport { PassedShift } from \"../Modules/PremixesApp/Components/HistoryPage/PassedShiftItem\";\nimport { ShiftConstructorContainer } from \"../Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer\";\nimport { TextbookContainer } from \"../Modules/Textbook/TextbookContainer\";\nimport { Distilation } from \"../Modules/Textbook/Pages/Distilation\";\nimport CocktailCard from \"../Modules/KnowledjeBase/CoctrailCard\";\n\nconst LoginPage = React.lazy(() => import(\"../Modules/Auth/LoginPage\"));\nconst PremixesApp = React.lazy(() => import(\"../Modules/PremixesApp/Premixes\"));\nconst RecepiesApp = React.lazy(() => import(\"../Modules/RecepiesApp/RecepiesAppContainer\"));\nconst ChecklistApp = React.lazy(() => import(\"../Modules/ChecklistApp/Components/CheckLists\"));\nconst TeamApp = React.lazy(() => import('../Modules/TeamApp/TeamPageContainer'));\nconst SearchApp = React.lazy(() => import(\"../Modules/KnowledjeBase/KnowledgeBase\"));\n\n\n// ---------- ROUTES STRINGS\nexport const SHIFT_MANAGER = '/shiftManager/*'\nexport const HOME = \"/home\"\nexport const COCKTAIL_CARD = \"/cocktail/:id\"\nexport const PREMIX_LIST = \"/premixes\"\nexport const ADD_PRODUCT = \"/add\"\nexport const PRODUCT_CARD = \"/card/:id\"\nexport const LOG_OUT = \"/logOut\"\nexport const REGISTRATION = \"/registration\"\nexport const NO_MATCH_ROUTE = \"*\"\nexport const BLANK_SHIFT = \"/blank-shift/*\"\nexport const STEP_2 = \"add-step-two\"\nexport const NEW_BLANK_SHIFT = \"/shiftManager/create-new\"  \nexport const CHECK_LISTS = \"/check-lists\"\nexport const PASSED_SHIFT = \"shiftManager/:id\"\nexport const CLAN_LISTS = \"/clan-list\"\nexport const CREATE_TEAM = \"/create-team\"\nexport const JOIN_TEAM = \"/join-team\"\nexport const NEW_CHECK_LIST = \"/new-check-list\"\nexport const CHECK_LIST = \"/check-lists/:id\"\nexport const KNIWLEDGE_BASE = \"knowledge-base\"\nexport const INGRIDIENT = \"/ingridient/:id\"\nexport const HISTORY = '/blank-shift/history'\nexport const TEXTBOOK = '/textbook'\nexport const ARTICLE = 'article/:name=distilation'\n\n// PRIVATE ROUTES ARRAY\n// These routes are available only to authorized users\n// If an unauthorized user attempts to access, they are redirected to the login page\n\nexport const PRIVATE_ROUTES : ROUTE[] = [\n    {\n        path : HISTORY,\n        element : <h1>History</h1>\n    },\n    {\n        path : HOME,\n        element : <HomePage/>\n    },\n    {\n        path : COCKTAIL_CARD,\n        element : <CocktailCard/>\n    },\n    {\n        path : CREATE_TEAM,\n        element : <CreateTeam/>\n    },\n    {\n        path : SHIFT_MANAGER,\n        element : <PremixesApp/>\n    },\n    {\n        path : CHECK_LIST,\n        element : <CheckListPage/>\n    },\n    {\n        path : PASSED_SHIFT,\n        element : <PassedShift/>\n    },\n    {\n        path : BLANK_SHIFT,\n        element : <PremixesApp/>\n    },\n    {\n        path : PREMIX_LIST,\n        element : <RecepiesApp/>\n    },\n    {\n        path : PRODUCT_CARD,\n        element : <ProductCardContainer/>\n    },\n    {\n        path : NEW_BLANK_SHIFT,\n        element : <ShiftConstructorContainer/>\n    },\n    {\n        path : CHECK_LISTS,\n        element : <ChecklistApp/>\n    },\n    {\n        path : NO_MATCH_ROUTE,\n        element : <Navigate to=\"/home\" />\n    },\n    {\n        path : TEXTBOOK,\n        element : <TextbookContainer/>\n    },\n    {\n        path : ADD_PRODUCT,\n        element : <NewProduct isDarkTheme={true}/>\n    },\n    {\n        path : STEP_2,\n        element : <SecondStep/>\n    },\n    {\n        path : CLAN_LISTS,\n        element : <TeamApp/>\n    },\n    {\n        path : NEW_CHECK_LIST,\n        element : <NewCheckList/>\n    },\n    {\n        path : KNIWLEDGE_BASE,\n        element : <SearchApp/>\n    },\n    {\n        path : INGRIDIENT,\n        element : <IngridientCard/>\n    },\n    {\n        path : ARTICLE,\n        element : <Distilation/>\n    }\n]\n// PUBLICK ROUTES ARRAY\n// This routes are accessible for all users includeing not authiorized users\n// \nexport const PUBLICK_ROUTES : ROUTE [] = [\n    {\n        path : LOG_OUT,\n        element : <LoginPage/>\n    },\n    {\n        path : NO_MATCH_ROUTE,\n        element : <Navigate to={\"/logOut\"}/>\n    },\n    {\n        path : REGISTRATION,\n        element : <Registration/>\n    }\n\n]","\n// ---------- REACT & REACT HOOKS\nimport React, { Suspense } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ---------- REDUX\nimport { Global_state_type } from \"../Redux/Store\";\n\n// ---------- IMPORT PROVATE & PUBLICK ROUND & ROUTE INTERFACE\nimport { PRIVATE_ROUTES, PUBLICK_ROUTES } from \"./Routes\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { Preloader } from \"../Modules/PremixesApp/Components/Preloader\";\nimport ErrorBoundary from \"../Components/ErrorBoundary\";\n\n// The router component iterates over the routes array and returns a route component\n//  with the corresponding react component. if user is not authorized iterates over PUBLKICK_ROUTES array\n// anotherwise over PRIVATE_ROUTES\n\n\nconst Router = React.memo(() => {\n    // Get Auth state from redux\n    const isAuth = useSelector((state: Global_state_type) => { return state.App.isAuth })\n\n    if (isAuth) {\n        // If authorized map only in PRIVATE_ROUTES\n        return (\n            <div className=\"content\">\n                <Suspense fallback={<Preloader />}>\n                    <ErrorBoundary>\n                        <Routes>\n                            {PRIVATE_ROUTES.map((route: ROUTE) => {\n                                return (\n\n                                    <Route key={route.path} element={route.element} path={route.path} />\n\n                                )\n                            })}\n                        </Routes>\n                    </ErrorBoundary>\n                </Suspense>\n            </div>\n        )\n    }\n\n    else {\n        return (\n            <>\n                <Routes>\n                    {PUBLICK_ROUTES.map((route: ROUTE) => <Route key={route.path} path={route.path} element={route.element} />)}\n                </Routes>\n            </>\n        )\n    }\n\n})\n\nexport default Router;","// extracted by mini-css-extract-plugin\nexport default {\"check_lists_container__empty_check_list_container\":\"CheckLists_check_lists_container__empty_check_list_container__dbSe7\",\"appear\":\"CheckLists_appear__rCcx9\",\"single_check_list\":\"CheckLists_single_check_list__9IEtt\",\"check_lists__create_btn\":\"CheckLists_check_lists__create_btn__MpuDm\",\"icon\":\"CheckLists_icon__Fugq9\",\"new_check_list_container\":\"CheckLists_new_check_list_container__FMHmi\",\"new_check_list_controls\":\"CheckLists_new_check_list_controls__B-P0Q\",\"task_list\":\"CheckLists_task_list__5iUfF\",\"checklis_list\":\"CheckLists_checklis_list__0T2o2\",\"cheklist_preview__item\":\"CheckLists_cheklist_preview__item__XeFiK\",\"check_list_controls\":\"CheckLists_check_list_controls__bMiXx\",\"tasks\":\"CheckLists_tasks__wvWsD\",\"tasks_item\":\"CheckLists_tasks_item__CKkhW\",\"tasks_item__checkbox\":\"CheckLists_tasks_item__checkbox__JozXF\",\"add_ckeck_list\":\"CheckLists_add_ckeck_list__Gk0YN\",\"check_lists__create-btn\":\"CheckLists_check_lists__create-btn__gu+rV\",\"confirm_button\":\"CheckLists_confirm_button__PaPNL\"};","// extracted by mini-css-extract-plugin\nexport default {\"recepiesContainer\":\"RecepiesContainer_recepiesContainer__SlLBA\",\"recepiesContainerHeader\":\"RecepiesContainer_recepiesContainerHeader__i0YcX\",\"recepiesContainer__tittle\":\"RecepiesContainer_recepiesContainer__tittle__sjMJ8\",\"recepiesContainerEmpty\":\"RecepiesContainer_recepiesContainerEmpty__7dp7p\",\"nothinFoundIcon\":\"RecepiesContainer_nothinFoundIcon__FuAth\",\"addButton\":\"RecepiesContainer_addButton__33RtY\",\"RecepiesList\":\"RecepiesContainer_RecepiesList__rwMOU\",\"listItem\":\"RecepiesContainer_listItem__wCtEU\",\"dotsMenu\":\"RecepiesContainer_dotsMenu__KubNy\",\"dotsMenu__dot\":\"RecepiesContainer_dotsMenu__dot__k9Oqt\",\"menuOptions\":\"RecepiesContainer_menuOptions__+1Fi1\",\"appear\":\"RecepiesContainer_appear__ra75J\"};"],"names":["UIButton","props","params","_jsx","id","type","className","onClick","callback","children","text","ErrorBoundary","Component","constructor","arguments","state","hasError","error","componentDidCatch","errorInfo","console","render","this","useProductFilter","initial","filter","setFilter","useState","dispatch","useDispatch","teamID","useSelector","App","user","useEffect","getProductsByCompanyID","length","premixes","el","name","includes","value","UseToggle","initialValue","setState","useTaskList","navigate","useNavigate","useLocation","pathname","split","result","chcekLists","checkLists","find","deleteHandler","deleteChekListThunk","useChecklistList","getCheckListsthunk","RecepiesList","goToProductCard","event","currentTarget","dataset","styles","recepies","map","ChecklistDotsMenu","isOpen","setIsOpen","toggle","_jsxs","checklist","CheckListPage","tasks","index","ProductComposition","parseComposition","composition","ProdicuCalculater","_props$product","setValue","log","product","placeholder","onChange","Number","calculateAndParseIntoComponent","ProductDescription","isOpened","setIsOpened","isEditMode","productActions","description","ProductCard","_props$card","_props$card2","products","filterProducts","windoWidth","window","innerWidth","setEditMode","card","Editor","key","setKey","array","Object","keys","values","e","DotsMenu","productID","premixAPI","payload","undefined","deleteProductCrad","Reducer","action","ProductCardContainer","useProductCard","location","actualProductCard","setProductCardThunk","useReducer","userTeamID","productTeamID","_state$premixes$actua","Preloader","CreateTeam","newTeam","clans","clanActions","onSubmit","createClanThunk","userID","userName","initializeThunk","MainPageNavigation","src","alt","HomePage","profile","concat","team","SecondStep","newCard","newCardActions","NewIngridientSingleForm","Formik","initialValues","enableReinitialize","validateOnBlur","newIngridient","validationSchema","addIngridientValidationScema","_ref","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","required","autoComplete","Compund","forms","setForms","TopSection","newProduct","onNameChange","disabled","createnewProduct","obj","resultObject","convertObjectToArrayOfObjects","isVisibleForAll","createNewIngridientCard","FirstStep","isDarkTheme","NewProduct","useInput","maxLength","NewCheckList","nameInput","nameValue","taskInput","taskValue","setInput","setTasks","onError","errorMessage","validate","regExp","isError","setError","errorText","setErrorText","pattern","test","useValidator","createCheckList","CheckListsAPI","CHECK_LIST","task","onAddClickHandler","IngridientCard","getCurrentIngridient","currentIngridient","knowledgeBase","currentSpirit","image","displayName","definition","production","RegistrationFormInput","_Fragment","Registration","isPasswordHided","setPasswordHided","togglePassword","nickName","companyName","email","password","repeatPassword","async","authApi","catch","ex","message","validationShema","showPasswordIcon","hidePasswordIcon","PassedShift","shiftID","getPassedShiftByID","blankShift","passedShift","date","employe","ProdcustItem","isChecked","toggleFunction","ProductList","checked","CreateNewShiftControls","isAllSelected","dispatchProducts","createShift","setCurrentShiftByCompanyID","ShiftConstructorContainer","productList","TextbookContainer","join","NavLink","to","href","Distilation","CocktailCard","getCocktailByID","currentCocktail","strDrinkThumb","strDrink","strGlass","strIBA","strCategory","strInstructions","LoginPage","React","PremixesApp","RecepiesApp","ChecklistApp","TeamApp","SearchApp","PRIVATE_ROUTES","path","element","Navigate","PUBLICK_ROUTES","isAuth","Suspense","fallback","Routes","route","Route"],"sourceRoot":""}