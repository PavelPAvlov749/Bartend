{"version":3,"file":"static/js/770.979e4036.chunk.js","mappings":"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","sources":["Modules/KnowledjeBase/ProductPreview.tsx","Modules/KnowledjeBase/CocktailList.tsx","Modules/KnowledjeBase/PublicPremixes.tsx","Modules/KnowledjeBase/KnowledgeBaseContent.tsx","Components/SelectionTabs.tsx","Modules/KnowledjeBase/KnowledgeBase.tsx"],"sourcesContent":["import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport icon from \"../../Assets/Icons/icons8-cocktail-96.png\";\n\ninterface IPreview {\n    name: string,\n    img: string | null,\n    id: string,\n    type : string\n}\n\n\nexport const ProductPreview: React.FC<IPreview> = (props) => {\n    const navigate = useNavigate();\n    // Set icon dependin on props.img\n    let src = props.img ? props.img : icon;\n    // onClick hadler navigate to full product information by product id\n    // from html id attr\n    function goToProductCard(event: React.SyntheticEvent<HTMLDivElement>) {\n        switch(props.type){\n            case \"premix\" : {\n                navigate(`/card/id=${event.currentTarget.id}`);\n                break;\n            }\n            case \"spirit\" : {\n                navigate(\"/ingridient/id=\" + event.currentTarget.id);\n                break;\n            }\n            case \"cocktail\" : {\n                navigate(\"/cocktail/id=\" + event.currentTarget.id);\n                break;\n            }\n        }\n       \n    }\n    return (\n        <div key={props.id} id={props.id} className=\"cocktail_card\" onClick={goToProductCard}>\n            <img className=\"cocktail_preview\" src={src} alt=\"\" />\n            <span>{props.name}</span>\n        </div>\n    )\n}\n","import React ,{useEffect}from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { cocltalCardType, getCocktailsByName, getCocktailsThunk } from \"../../Redux/KnowledgeBaseReducer\";\nimport { ProductPreview } from \"./ProductPreview\";\n\n\nexport const CoctailList = () => {\n    let dispatch: any = useDispatch()\n\n    useEffect(() => {\n        dispatch(getCocktailsThunk())\n    }, [])\n    let cocktailsFromState : cocltalCardType[] = useSelector((state: Global_state_type) => state.knowledgeBase.cocktails as cocltalCardType[]);\n\n    function searchByName(e: React.SyntheticEvent<HTMLInputElement>): void {\n\n        dispatch(getCocktailsByName(e.currentTarget.value));\n\n    }\n    console.log(\"render\")\n\n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <section className=\"filters\">\n                <input type=\"text\"  placeholder=\"Search by name\" onChange={searchByName}/>\n            </section>\n            <div className=\"list\">\n            {cocktailsFromState?.map((cocktail : cocltalCardType) => {\n                return (\n                \n                      <ProductPreview key={cocktail.idDrink} type=\"cocktail\"name={cocktail.strDrink} id={cocktail.idDrink} img={cocktail.strDrinkThumb}/>\n                 \n                )\n            })}\n            </div>\n          \n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getPublicPremixes } from \"../../Redux/ProductReduxer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { productType } from \"../../Redux/Types\";\n\nimport { ProductPreview } from \"./ProductPreview\";\n\nexport const PremixesList : React.FC = () => {\n    // Get dispatch \n    const dispatch : any = useDispatch();\n    useEffect(() => {\n        dispatch(getPublicPremixes());\n    },[])\n    // Get premixes from state\n    const state = useSelector((state : Global_state_type) => state.premixes.premixes);\n\n    return (\n        <section className=\"list\">\n            {state.map((el : productType) => {\n                return (\n                    <ProductPreview key={el.id} type=\"premix\" name={el.name} id={el.id as string} img={null}/>\n                )\n            })}\n        </section>\n    )\n}","import React from \"react\";\nimport { CoctailList } from \"./CocktailList\";\n\nimport { PremixesList } from \"./PublicPremixes\";\n\nexport const KnowledgeBaseContent = (props : {value : number}) => {\n    \n    if(props.value == 0) {\n        return (\n            <CoctailList/>\n        )\n    }\n    else\n    {\n        return (\n            <PremixesList/>\n        )\n    }\n\n}\n","import { Box, Tab, Tabs } from \"@mui/material\"\nimport React, { Dispatch } from \"react\";\n\n// Define type to a component\n\ntype SelectionTabsPropsType = {\n    value : number,\n    labels : Array<string>,\n    handleChange : (event : React.SyntheticEvent,newValue : number) => void,\n    setValue : Dispatch<React.SetStateAction<number>>\n}\n\n/**\n * Universal selection tabs component \n * \n * @param props SelectionTabsPropsType\n * @returns React.Ellement\n */\nexport const SelectionTabs: React.FC<SelectionTabsPropsType> = (props) => {\n    // Get a one tab with \n    const tabWidth = Math.floor(100 / props.labels.length);\n    return (\n        <Box sx={{ width: '100%', marginBottom: \"5px\" }}>\n            <Tabs value={props.value} onChange={props.handleChange} sx={{}} >\n                {props.labels.map((label : string,index : number) => {\n                    return (\n                        <Tab sx={{ width: tabWidth + \"%\", fontSize: \"14px\", color: \"white\" }} label={label} />\n                    )\n                })}\n            </Tabs>\n        </Box>\n    )\n}","import React from \"react\";\nimport \"../../Assets/Styles/CocktailList.css\"\nimport { KnowledgeBaseContent } from \"./KnowledgeBaseContent\";\nimport { SelectionTabs } from \"../../Components/SelectionTabs\";\n\n\n\n\n\n\n\nconst KnowledgeBase = () => {\n\n  \n    const [value, setValue] = React.useState(0);\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n      \n    };\n\n    return (\n        <section className=\"knwoledge_base_container container\">\n            <h2>Knowledge base</h2>\n            <SelectionTabs labels={['Coctails','Premixes']} handleChange={handleChange} value={value} setValue={setValue}/>\n            <KnowledgeBaseContent value={value}/>\n        </section>\n    )\n}\n\nexport default KnowledgeBase;"],"names":["ProductPreview","props","navigate","useNavigate","src","img","_jsxs","id","className","onClick","event","type","concat","currentTarget","children","_jsx","alt","name","CoctailList","dispatch","useDispatch","useEffect","getCocktailsThunk","cocktailsFromState","useSelector","state","knowledgeBase","cocktails","console","log","placeholder","onChange","e","getCocktailsByName","value","map","cocktail","strDrink","idDrink","strDrinkThumb","PremixesList","getPublicPremixes","premixes","el","KnowledgeBaseContent","SelectionTabs","tabWidth","Math","floor","labels","length","Box","sx","width","marginBottom","Tabs","handleChange","label","index","Tab","fontSize","color","KnowledgeBase","setValue","React","newValue"],"sourceRoot":""}