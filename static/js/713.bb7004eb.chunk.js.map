{"version":3,"file":"static/js/713.bb7004eb.chunk.js","mappings":"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","sources":["Modules/ChecklistApp/CheckListPreview.tsx","Modules/ChecklistApp/Components/ChekListItem.tsx","Modules/ChecklistApp/Components/CheckLists.tsx","Modules/ChecklistApp/Components/Hooks.tsx","Modules/ChecklistApp/Components/CheclListPage.tsx","Components/Premixes/BlankList.tsx","Components/Ingridients/Premixes.tsx","Helpers/CustomHooks.tsx","Components/Ingridients/ProductCard.tsx","Components/KnowledjeBase/CoctrailCard.tsx","Components/Teams/CreateTeam.tsx","Components/Teams/JoinTeam.tsx","webpack://bartend/./src/Assets/Styles/HomePage.module.css?cf67","Components/ThemeSwitcher.tsx","Components/mainScreen.tsx","Components/NewProduct/NewIngridientSingleForm.tsx","Components/NewProduct/FirstStep.tsx","Components/NewProduct/NewProduct.tsx","Components/NewProduct/SecondStep.tsx","Components/Teams/ClanList.tsx","Modules/ChecklistApp/Components/Hooks..tsx","Modules/ChecklistApp/Components/NewCheckList.tsx","Components/KnowledjeBase/CocktailPrewiew.tsx","Components/KnowledjeBase/CocktailList.tsx","Components/KnowledjeBase/SpiritList.tsx","Components/KnowledjeBase/KnowledgeBaseContent.tsx","Components/KnowledjeBase/KnowledgeBase.tsx","Components/KnowledjeBase/Ingridient.tsx","Components/Registration/LoginPage.tsx","Components/Registration/Registration.tsx","Modules/PremixesApp/Components/CurrentShiftPage/ProgressBar.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridentItem.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridientList.tsx","Modules/PremixesApp/Components/CurrentShiftPage/EmtyShiftPage.tsx","Modules/PremixesApp/Reducers/Reducer.ts","Modules/PremixesApp/Components/CurrentShiftPage/CurrentShift.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftPreview.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftsHistory.tsx","Modules/PremixesApp/Components/MainPage/MainPage.tsx","Modules/PremixesApp/Components/CurrentShiftPage/useProducts.tsx","Modules/PremixesApp/Components/MainPage/UseNabar.tsx","Modules/PremixesApp/Premixes.tsx","Modules/PremixesApp/Components/HistoryPage/PassedShiftItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrroductItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrdocuctList.tsx","Modules/PremixesApp/Reducers/constructorReducer.tsx","Modules/PremixesApp/Components/ConstructorPage/CreateNewShiftControls.tsx","Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer.tsx","Router/Routes.tsx","Router/Router.tsx"],"sourcesContent":["import { ReactJSXElement } from \"@emotion/react/types/jsx-namespace\";\nimport { NavLink } from \"react-router-dom\";\n\n\n\n\n\nexport const CheckListPreview = (props: { name: string, tasks: string[], id: string }) => {\n    let jsxTasks: ReactJSXElement[] = [];\n    function renderTasksPreview(tasks: string[]) {\n        if (tasks.length <= 4) {\n            for (let i = 0; i < tasks.length; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length > 4) {\n            for (let i = 0; i < 4; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length == 0) {\n            jsxTasks.push(<span className=\"preview__item--no-task\">No tasks added ...</span>)\n        }\n\n    }\n    renderTasksPreview(props.tasks);\n    return (\n        <li key={props.id} className=\"cheklist-preview__item\">\n            <NavLink key={props.id} to={`/check-lists/id=${props.id}`}>\n                <h3>{props.name}</h3>\n                {jsxTasks.map((el: ReactJSXElement) => {\n                    return (\n                        <>\n                            {el}\n                            <br />\n                        </>\n                    )\n                })}\n            </NavLink>\n\n        </li>\n    )\n}","// React,hooks\nimport { NavLink, useNavigate } from \"react-router-dom\"\n// Types\nimport { checkListType } from \"../../../Redux/CheckListReducer\"\nimport { CheckListPreview } from \"../CheckListPreview\";\n\n\nexport const ItemList = (props: { checkLists: checkListType[] }) => {\n    const navigate = useNavigate();\n\n    const onClickHandler = function () {\n        // navigate by click\n        navigate(\"/new-check-list\");\n    }\n    return (\n        <div className=\"single_check_list container\">\n            <ul className=\"checklis-list\">\n            {props.checkLists.map((el: checkListType) => {\n                return (\n                    <CheckListPreview name={el.name} tasks={el.tasks} id={el.id}/>\n                )\n            })}\n            </ul>\n            {/* If there is no existing cheklists propose to create */}\n            <button className=\"confirm_button\" \n            onClick={onClickHandler}>Добавить</button>\n        </div >\n    )\n}","// React,Components,ReactHooks\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { ItemList } from \"./ChekListItem\"\n// CustomHooks\nimport { useChecklistList } from \"./Hooks\";\n// Styles\nimport \"../../../Assets/Styles/CheckLists.css\"\n\n\nexport const CheckLists = () => {\n\n    let checklists = useChecklistList();\n\n    return (\n        <section className=\"check_lists_container container page_apperas_animation\">\n            <div className=\"ckeck-lists-content\">\n                {checklists.length > 0 ?\n                    <ItemList checkLists={checklists} />\n                    :\n                    <section className=\"check_lists_container__empty-check-list-container\">\n                        <h3>\n                            Чек листов нет\n                        </h3>\n                        <NavLink to={\"/new-check-list\"}>Добавить</NavLink>\n                    </section>\n                }\n            </div>\n\n        </section>\n    )\n}","\n// React,hooks\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useEffect } from \"react\";\n// Redux,thunks\nimport { checkListType, deleteChekListThunk, getCheckListsthunk } from \"../../../Redux/CheckListReducer\";\n// Types\n\n\n\n\nimport { Global_state_type } from \"../../../Redux/Store\";\n/**\n* @params none\n* \n* \n* Return a typple with specifik checklist object that contains \n* ist of tasks and handler to delete them\n* @returns [checklist,deleteHanler]\n*/\n\nexport const useTaskList = (): [checkListType | null, () => void] => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    let id = useLocation().pathname.split(\"=\")[1];\n    let checklist: checkListType | null = useSelector((state: Global_state_type) => {\n        let result = state.chcekLists.checkLists.find((el: checkListType) => el.id === id);\n        if (result) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    });\n    const deleteHandler = () => {\n        dispatch(deleteChekListThunk(id))\n        navigate(\"/check-lists\")\n    };\n    return [checklist, deleteHandler];\n}\n\n\n/**\n * \n * Return a list of checklists for current establishment\n * @returtn array checkListType[]\n */\nexport const useChecklistList = () => {\n    const dispatch: any = useDispatch();\n    // Get team id to fetch data by him\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Fetch data\n    useEffect(() => {\n        dispatch(getCheckListsthunk(teamID as string))\n    }, []);\n    let checkLists = useSelector((state: Global_state_type) => state.chcekLists.checkLists);\n    \n    return checkLists;\n}","// Assets\nimport deleteIcon from \"../../../Assets/Icons/icons8-delete-64.png\"\n// Hooks\nimport { useTaskList } from \"./Hooks\";\n\n\nexport const CheckListPage = () => {\n    // Get checklist object amd delete hadler from hook\n    let [checklist, deleteHandler] = useTaskList();\n    \n    return (\n        <section className=\"single-check-list container\">\n            <div className=\"check-list-controls controls\">\n                <img className=\"icon\" src={deleteIcon} onClick={deleteHandler}></img>\n            </div>\n\n            <ul className=\"tasks\">\n                {checklist?.tasks.map((el: string, index: number) => {\n                    return (\n                        <li>\n                            <span>{index + 1 + \".\" + el}</span>\n                            <br />\n                        </li>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","\nimport { productType } from \"../../Redux/Types\";\nimport { NavLink } from \"react-router-dom\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\nimport empty from \"../../Assets/Icons/icons8-empty-90.png\"\nimport { parseElementNameToString } from \"../../Helpers/Helpers\";\n\n\n\nexport const PremixesList = (props: { blanks: productType[] ,dispatch : any,Navigate : (a : string) => any}) => {\n    console.log(props.blanks)\n    if (props.blanks.length > 0) {\n        return (\n            <>\n                {props.blanks.map((el : productType) => {\n                    return (\n                        <div key={el.id} className=\"element\" onClick={() => {\n                            props.dispatch(productActions.setAcualProductCard(el))\n                            props.Navigate(\"/card/id=\" + el.id)\n                            }}>\n                        \n                            <NavLink to={\"/product/id=\" + el.id}>\n                            <span>{parseElementNameToString(el.name)}</span>\n                            </NavLink>\n                         \n                            <br />\n                          \n                        </div>\n                    )\n                })}\n            </>\n        )\n        \n              \n    }else{\n        return (\n            <div className=\"nothing_found\">\n            <img src={empty} className=\"emtyIcon\" alt=\"\" />\n            <h1>Список пуст</h1>\n        </div>\n        )\n    }\n}","// ----------------\n// REACT AND HOOKS\n// ----------------\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { useNavigate } from \"react-router-dom\";\n// ----------------\n// STYLES\n// ----------------\nimport \"../../Assets/Styles/Premixes.css\"\n// ----------------\n// IMPORT ICONS\n// ----------------\n// import searchIcon from \"../../Assets/icons8-search-100.png\";\nimport searchIcon from \"../../Assets/Icons/icons8-search-100.png\"\nimport backIcom from \"../../Assets/Icons/icons8-back-90.png\";\nimport addIcon from \"../../Assets/Icons/icons8-add-100.png\";\nimport backIconsLight from \"../../Assets/Icons/icons8-reply-arrow-100.png\"\nimport addIconLight from \"../../Assets/Icons/icons8-add-100 (1).png\"\nimport searchIconLight from \"../../Assets/Icons/icons8-search-100(1).png\"\n// ----------------\n// IMPORT COMPONENTS\n// ----------------\nimport { PremixesList } from \"../Premixes/BlankList\";\n// ----------------\n// IMPORT HELPERS\n// ----------------\nimport { useProductFilter, useProducts } from \"../../Helpers/CustomHooks\";\n\n\n\n\nexport const Premixes = () => {\n    \n    const dispatch: any = useDispatch()\n    const isDarkTheme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    const [products,filterProducts] = useProductFilter(\"\")\n    let [isSearch, setIsSearch] = useState(false)\n    const Navigate = useNavigate()\n\n    return (\n        <section className={isDarkTheme ? \"container translate_animation DarkTheme\" : \"container translate_animation LightTheme\"}>\n            {isSearch ? \n            <div className=\"search_controls\">\n                \n                <input className=\"search\" onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {filterProducts(e.currentTarget.value)}}></input>\n                <button id=\"search_controls__button\" onClick={() => {setIsSearch(false)}}>Отмена</button>\n            </div>\n         :\n                <ul className=\"controls\">\n                    <li className=\"menu-item\" onClick={() => {Navigate(-1)}}>\n                        <span>Назад</span>\n                        <img className=\"icon\" src={isDarkTheme ? backIcom : backIconsLight} id=\"back\"  alt=\"\" />\n                    </li>\n                    <li className=\"menu-item\" onClick={() => {Navigate(\"/add\")}}>\n                      <span >Добавить</span> \n                        <img className=\"icon\" src={isDarkTheme ? addIcon : addIconLight}  alt=\"\" />\n                    </li>\n                    <li  className=\"menu-item\"onClick={() => { setIsSearch(!isSearch) }} >\n                        <span >Поиск</span>\n                        <img className=\"icon\" src={isDarkTheme ? searchIcon : searchIconLight} alt=\"\" />\n\n                    </li>\n\n\n                </ul>\n            }\n\n            <section className=\"conteiner translate_animation\">\n                <PremixesList dispatch={dispatch} Navigate={Navigate} blanks={products || []} />\n\n            </section>\n        </section>\n    )\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { productType } from \"../Redux/Types\";\nimport { set } from \"firebase/database\";\nimport { getProductsByCompanyID } from \"../Redux/ProductReduxer\";\n\n\nexport const useProducts = () => {\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        return state.premixes.premixes\n    })\n    if(products.length > 0) {\n        return products\n    }\n    else{\n        return []\n    }\n}\n\nexport const useProductFilter = (initial : string) : [productType[],(e : string) => void] => {\n    const [filter,setFilter] = useState(initial)\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        if(filter.length === 0) {\n            return state.premixes.premixes\n        }\n        return state.premixes.premixes.filter((el : productType) => el.name.includes(filter))\n    })\n    const updateFilter = (value : string) => {\n        setFilter(value)\n    }\n    return [products,updateFilter]\n    \n}\n\nexport const useWindowInnerWidth = () => {\n    const [windowWidth,setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        const handleResizeWindow = () => setWindowWidth(window.innerWidth)\n        window.addEventListener(\"resize\",handleResizeWindow)\n        return () => {\n            window.removeEventListener(\"resize\",handleResizeWindow)\n        }\n    },[])\n    return windowWidth\n}\n\nexport const useTheme = () => {\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return theme\n}\n\nexport const useDebounce = (callback : (...args:any) => {},delay : number,value : any)=> {\n    const timer = useRef(null);\n    const dispatch : any = useDispatch();\n    const DebounceCallback = useCallback((...args : any) => {\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        else {\n            setTimeout(() => {\n                console.log(\"DISPATHED\")\n               dispatch(callback(value));\n            },delay)\n        }\n    },[callback,delay]);\n\n    console.log(DebounceCallback)\n    return DebounceCallback;\n}","import React, { useState } from \"react\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { productType } from \"../../Redux/Types\";\nimport { Navigate, useLocation, useNavigate } from \"react-router-dom\";\nimport deleteIcon from \"../../Assets/Icons/icons8-delete-64.png\";\nimport backArrow from \"../../Assets/Icons/icons8-back-90.png\";\nimport backArrowLight from \"../../Assets/Icons/icons8-reply-arrow-100.png\"\nimport deleteIconLight from \"../../Assets/Icons/icons8-delete-64.png\"\nimport \"../../Assets/Styles/PeoduxtCard.css\"\nimport { deleteProductCrad } from \"../../Redux/ProductReduxer\";\nimport { calculateAndParseIntoComponent, parseComposition } from \"../../Helpers/Helpers\";\nimport { useTheme } from \"@emotion/react\";\n\n\n\nexport const ProductCard = () => {\n    const dispatch: any = useDispatch()\n    const navigate = useNavigate()\n    const card: productType | null = useSelector((state: Global_state_type) => {\n        return state.premixes.actualProductCard\n    })\n    const isDarkTheme = useTheme()\n    const productID = useLocation().pathname.split(\"=\")[1]\n\n    const [showDescription, setShowDescription] = useState(false)\n    const [showCompositon, setShowComposition] = useState(false)\n    let [value, setValue] = useState(1)\n\n    const deleteProduct = () => {\n        dispatch(deleteProductCrad(productID))\n        navigate(\"/premixes\")\n    }\n\n    return (\n        <section className={`product_card container translate_animation`}>\n\n            <ul className=\"controls\">\n                <li className=\"controls_item\" onClick={() => { navigate(\"/premixes\") }}>\n                <img src={isDarkTheme ? backArrow : backArrowLight} alt=\"\" />\n                    Back\n                   \n                </li>\n                <li className=\"controls_item\" onClick={deleteProduct}>\n                    Delete\n                    <img src={isDarkTheme ? deleteIcon : deleteIconLight} id=\"delete\" alt=\"\" />\n                </li>\n            </ul>\n\n\n\n            <h1>{card?.name}</h1>\n            <button onClick={() => { setShowDescription(!showDescription) }}>Описание</button>\n            {showDescription ? <p>{card?.description}</p> :\n                null\n            }\n            <br />\n            <button onClick={() => setShowComposition(!showCompositon)}>Состав</button>\n            <p>{showCompositon ?\n                parseComposition(card?.composition as {})\n                : null}</p>\n            <br />\n            <input type=\"number\" placeholder=\" Сколько готовим?\" onChange={(e: React.FormEvent<HTMLInputElement>) => {\n\n                if (e.currentTarget.value.length < 1) {\n                    setValue(1)\n                } else {\n                    setValue(Number(e.currentTarget.value))\n                }\n\n            }} />\n            <br />\n            <div className=\"calculated_result\">\n                {card ? calculateAndParseIntoComponent(card, value)\n                    : <Navigate to={\"/premixes\"} />}\n            </div>\n\n\n\n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { cocltalCardType, getCocktailByID } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CoctailCard.css\"\n\nexport const CocktailCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCocktailByID(location))\n    },[])\n    let currentCocktail = useSelector((state : Global_state_type) => state.knowledgeBase.currentCocktail) as cocltalCardType\n\n \n    return (\n        <article className=\"cocktail_card_container contaoiner translate_animation\">\n            <figure>\n            <h2>{currentCocktail?.strDrink}</h2>\n            <img id=\"cocktail_photo\" src={currentCocktail?.strDrinkThumb} alt=\"\" />\n           \n            </figure>\n            <article>\n            <span>Бокал : {currentCocktail?.strGlass }</span>\n            <span>Категория IBA : {currentCocktail?.strIBA ? currentCocktail.strIBA : \"не входит в IBA\"}</span>\n            <span>Категория : {currentCocktail?.strCategory}</span>\n            <h3>Технология приготовления : </h3>\n            <p>{currentCocktail?.strInstructions}</p>\n            <h3>Состав : </h3>\n            {currentCocktail ? Object.keys(currentCocktail.composition).map((el : string,index : number) => {\n                return (\n                    <span>{el + \" : \" + Object.values(currentCocktail.composition)[index]}</span>\n                )\n            }) : null}\n            </article>\n           \n        </article>\n    )\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clanActions, createClanThunk } from \"../../Redux/TeamReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CreateTeam.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport {initializeThunk} from \"../../Redux/AppReducer\"\n\nexport const CreateTeam = () => {\n    const dispatch : any = useDispatch()\n    const navigate = useNavigate()\n    const isDarkTheme = useSelector((state : Global_state_type) => state.App.isDarktheme)\n    const newTeam = useSelector((state : Global_state_type) => state.clans.newTeam)\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const onSubmit = () => {\n        dispatch(createClanThunk(newTeam as {newTeamName : string,newTeamDescription : string,newTeamAvatar : ArrayBuffer},\n            user.userID as string,user.userName as string))\n           \n        dispatch(initializeThunk())\n        navigate(\"/home\")\n    }\n\n    const onNameChangeHandler = (e : React.SyntheticEvent<HTMLInputElement>) => {\n        dispatch(clanActions.setNewClanName(e.currentTarget.value))\n    }\n    const onDescriptionChangeHandler = (e : React.SyntheticEvent<HTMLTextAreaElement>) => {\n        dispatch(clanActions.setNewTeamDiescription(e.currentTarget.value))\n    }\n    return (\n        <section className={\"create_team_container translate_animation container\"}>\n            <input type=\"text\" placeholder=\"Название\" onChange={onNameChangeHandler}/>\n            <h3>Описание :</h3>\n            <br />\n            <textarea name=\"\" id=\"\" onChange={onDescriptionChangeHandler} ></textarea>\n         \n            <button onClick={onSubmit}>Создать команду</button>\n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { ClanType, getAllClans, joinTheClan } from \"../../Redux/TeamReducer\";\nimport \"../../Assets/Styles/TeamPage.css\"\nimport { useNavigate } from \"react-router-dom\";\n\nexport const JoinTeam = () => {\n    const dispatch : any = useDispatch()\n    useEffect(( ) => {\n        dispatch(getAllClans())\n    },[])\n    const navigate = useNavigate()\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const teamList = useSelector((state : Global_state_type) => state.clans.teamList)\n    const joinTeamHandler = (teamID : string,teamName : string) => {\n        dispatch(joinTheClan(user.userID as string,user.userName as string,teamID,teamName))\n        navigate(\"/home\")\n\n    }\n    \n    return (\n        <section className={\"join_team container\"} >\n            <input type=\"text\" placeholder=\"Искать по имени\"/>\n            {teamList?.map((el : ClanType) => {\n                return (\n                    <div className=\"single_team\">\n                    <span>{el.teamName}</span>\n                    <span id=\"join\" onClick={() => {joinTeamHandler(el.teamID,el.teamName)}}>\n                        Присоединиться\n                    </span>\n                    </div>\n                )\n            })}\n        </section>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"main_page_navigation\":\"HomePage_main_page_navigation__aiF1m\",\"home_page_container\":\"HomePage_home_page_container__5i8ay\",\"home_page_info\":\"HomePage_home_page_info__GShzs\",\"blue\":\"HomePage_blue__4w3Pk\",\"orangered\":\"HomePage_orangered__1TkPu\",\"green\":\"HomePage_green__AnSF4\",\"violet\":\"HomePage_violet__y0sou\",\"darkBlue\":\"HomePage_darkBlue__5TELM\",\"orange\":\"HomePage_orange__vpxpS\"};","import React, { useState } from \"react\";\nimport \"../Assets/Styles/ThemeSwitcher.css\"\nimport { useDispatch } from \"react-redux\";\nimport { app_actions } from \"../Redux/AppReducer\";\nimport moonIcon from \"../Assets/Icons/icons8-moon-symbol-90.png\"\nimport sunicon from \"../Assets/Icons/icons8-sun-96.png\"\n\nexport const ThemeSwitcher = (props : {theme : boolean}) => {\n    const [isDarktheme,setTheme] = useState(true)\n    const dispatch = useDispatch()\n    const onClcikHandler = () => {\n      dispatch(app_actions.toggleTheme())\n      setTheme(!isDarktheme)\n    }\n    return (\n      <section className={`theme-switcher-container ${isDarktheme ? `DarkTheme` : `LightTheme`}`}>\n        <span>{isDarktheme ? \"Dark\" : \"Light\"}</span>\n        <img className=\"icon\" src={isDarktheme ? moonIcon : sunicon} alt=\"\" />\n      <div  onClick={onClcikHandler} className={props.theme ? \"darkTheme_container\" : \"lightThemeContainer\"}>\n        <div className={props.theme ? \"dark\" : \"light\"}></div>\n        \n      </div>\n        \n      </section>\n            \n          \n        \n\n    )\n}","import { useNavigate } from \"react-router-dom\";\nimport styles from \"../Assets/Styles/HomePage.module.css\"\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { ThemeSwitcher } from \"./ThemeSwitcher\";\nimport docIcon from \"../Assets/Icons/icons8-document-64.png\"\nimport teamicon from \"../Assets/Icons/icons8-team-96.png\"\nimport chemistryIcon from \"../Assets/Icons/icons8-chemistry-100(1).png\"\nimport sheldue from \"../Assets/Icons/icons8-edit-96.png\"\nimport { useWindowInnerWidth } from \"../Helpers/CustomHooks\";\n\nexport const Header = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n\n    return (\n        <header>\n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Чек-листы</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Заготовки</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>График</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Команда</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n            <div className={styles.swithcer}>\n                <ThemeSwitcher theme={theme} />\n            </div>\n        </header>\n\n\n    )\n}\n\nconst MainPageNavigation = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return (\n        <section className=\"main_page_navigation\">\n             <div className={styles.swithcer}>\n                <ThemeSwitcher theme={theme} />\n            </div>\n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Чек-листы</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Заготовки</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>График</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Команда</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n        </section>\n    )\n}\n\nexport const HomePage = () => {\n    const profile = useSelector((state: Global_state_type) => {\n        return state.App.user\n    })\n\n    const windowWidth = useWindowInnerWidth()\n    return (\n        <section className={`${styles.home_page_container} ${styles.translate_animation}`}>\n            <h2>Bartend</h2>\n            <div className={styles.home_page_info}>\n                <h1 id={styles.userName}>Hi,{profile.userName}!\n\n                </h1>\n                <span>{profile.team ? profile.team : null}</span>\n                <br />\n\n\n\n            </div>\n            <MainPageNavigation /> \n\n\n        </section>\n    )\n}","\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\"\nimport { useDispatch } from \"react-redux\";\nimport {newCardActions } from \"../..//Redux/NewCardReducer\";\nimport \"../../Assets/Styles/NewProduct.css\"\n\n\nexport const NewIngridientSingleForm = () => {\n    const dispatch: any = useDispatch()\n    // VALIDATION SHEMA\n    const validationSchema = yup.object().shape({\n        key: yup.string().typeError(\"This field should be a string\").min(1).max(20).required(\"This field is Required\"),\n        value: yup.number().typeError(\"This field should be a digit\").min(1).max(20).required(\"This field is Required\")\n\n    })\n    // SUBMIT FORMS\n    const Submit = (values: { key: string, value: string }) => {\n        let newIngridient = { [values.key]: values.value }\n        console.log(newIngridient)\n        dispatch(newCardActions.addNewIngridient(newIngridient))\n    }\n    return (\n        <div className=\"single_input\">\n            <Formik initialValues={{ key: \"\", value: \"\" }}\n                enableReinitialize={true}\n                validateOnBlur={true}\n                onSubmit={Submit}\n            //   validationSchema={validationSchema}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                    return (\n                        <div className=\"input_container\">\n                            <input type=\"text\" id=\"key\" autoComplete=\"off\" onChange={handleChange} />\n                            <input type=\"number\" id=\"value\" autoComplete=\"off\" onChange={handleChange} />\n\n                            <button\n                                //@ts-ignore \n                                onClick={handleSubmit} id=\"add_component\" type=\"submit\">+</button>\n\n                        </div>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"../../Assets/Styles/NewProduct.css\"\nimport {newCardActions } from \"../../Redux/NewCardReducer\";\nimport add from \"../../Assets/Icons/icons8-add-96.png\"\nimport { NewIngridientSingleForm } from \"./NewIngridientSingleForm\";\n\n\nexport const FirstStep = (props : {isDarkTheme : boolean}) => {\n    const dispatch: any = useDispatch()\n\n\n    // ADD NEW INPUTS FOR NEW COMPONENT\n    const addInput = (e: React.MouseEvent<HTMLElement>) => {\n        setForms([...forms, <NewIngridientSingleForm/>])\n\n    }\n    // SET NAME\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        dispatch(newCardActions.setNewName(e.currentTarget.value))\n    }\n    // ARRAY OF FORMS FOR ADDING NEW COMMPOENT OBJET\n    let [forms, setForms] = useState([\n       <NewIngridientSingleForm/>\n    ])\n    return (\n        <section className={props.isDarkTheme ? \"new_premix_first_step container DarkTheme\" : \"container LightTheme\"}>\n            <h2>Введите наименование : </h2>\n            <input type=\"text\" placeholder=\"Наименование\" id=\"name\" onChange={(e) => { onNameChange(e) }} />\n            <section className=\"compound\">\n                <h2>Состав : </h2>\n                <div className=\"compound_inputs\">\n                    {forms}\n\n                </div>\n                <button onClick={addInput} >Add ingrideint</button>\n            </section>\n\n        </section>\n    )\n}","\nimport \"../../Assets/Styles/NewProduct.css\"\nimport { FirstStep } from \"./FirstStep\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport const NewProduct = (props : {isDarkTheme : boolean} ) => {\n\n    const location = useLocation().pathname.split(\"/\")[1]\n    const navigate = useNavigate()\n    console.log(location)\n    return (\n        <section className=\"container translate_animation\">\n            <FirstStep isDarkTheme={props.isDarkTheme}/>\n            <button className=\"confirm_button\" onClick={() => {navigate(\"/add-step-two\")}} id=\"next_button\">Next</button>\n        \n        </section>\n    )\n}","import React from \"react\";\nimport { createNewIngridientCard, newCardActions } from \"../../Redux/NewCardReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../Assets/Styles/SecondStep.css\"\nimport backArrow from \"../../Assets/Icons/icons8-back-90.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { productType } from \"../../Redux/Types\";\n\nexport const SecondStep = (props : {isDarkTheme : boolean}) => {\n    const dispatch : any = useDispatch()\n\n    // SET DESCRITION\n    const setDescription = (e : React.FormEvent<HTMLTextAreaElement>) => {\n        dispatch(newCardActions.setNewDescription(e.currentTarget.value))\n    }\n    const newProduct = useSelector((state : Global_state_type) => state.newCard)\n    const teamID = useSelector((state : Global_state_type) => state.App.user.teamID)\n    const navigate = useNavigate()\n    const createnewProduct = () => {\n        if(teamID){\n            let card : productType = {\n                name : newProduct.name,\n                description : newProduct.description,\n                composition : newProduct.composition as {},\n                teamID : teamID,\n                \n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        }else{\n            navigate(\"/clan-list\")\n        }\n     \n      \n    }\n    return (\n        <div className={props.isDarkTheme ? \"second_step container translate_animation DarkTheme\" : \"second_step container translate_animation LightTeheme\"}>\n            <div className=\"controls_item\"  onClick={() => {navigate(-1)}}>\n                <span>Back</span>\n                <img className=\"icon\" src={backArrow} />\n            </div>\n        \n            <h2>Технология приготовления : </h2>\n            <textarea name=\"Description\" id=\"description\" onChange={setDescription}></textarea>\n            <button className=\"confirm_button\" onClick={createnewProduct}>Создать</button>\n\n        </div>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { getClanListByUserID, leaveTheTeam } from \"../../Redux/TeamReducer\";\nimport \"../../Assets/Styles/TeamPage.css\"\nimport \"../../App.css\"\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { app_actions } from \"../../Redux/AppReducer\";\n\n\n\nexport const TeamPage = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n    const user = useSelector((state: Global_state_type) => state.App.user)\n\n    useEffect(() => {\n        dispatch(getClanListByUserID(user.userID as string))\n    }, [])\n    let team = useSelector((state: Global_state_type) => state.clans.team)\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    const LeaveTheTeamHandler = (team: string, userID: string, userName: string) => {\n        dispatch(leaveTheTeam(team, userID, userName))\n        dispatch(app_actions.setUserPage({ ...user, team: null, teamID: null }))\n    }\n\n    return (\n        <section className={`team_page container  translate_animation `}>\n            <h2>{team?.teamName}</h2>\n\n            <section className=\"team_page_info\">\n                <section className=\"team_page_info__team-description\">\n                    <h3>Описание </h3>\n                    <p>{team?.description}</p>\n                </section>\n                <section className=\"team_users\">\n                    <h3>Участники : </h3>\n                    <ul>\n                    {team?.users.map((el: string, index) => {\n                        return (\n                            <li key={index} >{el}</li>\n                                \n                        )\n                    })}\n                    </ul>\n                    \n                </section>\n            </section>\n\n            <button id=\"leave_the_team\" onClick={() => {\n                LeaveTheTeamHandler(teamID as string, user.userID as string, user.userName as string)\n            }}>Покинуть Команду</button>\n\n\n        </section>\n    )\n}\n\nexport const TeamPageContainer = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n    const user = useSelector((state: Global_state_type) => state.App.user)\n    const pic = useSelector((state: Global_state_type) => state.clans.team?.teamAvatar)\n    useEffect(() => {\n        dispatch(getClanListByUserID(user.userID as string))\n\n    }, [])\n\n    return (\n        <section className={\"team_page_container container\"}>\n            {user.teamID ? <TeamPage isDarkTheme={props.isDarkTheme} /> :\n                <div className={\"empty_team container \"}>\n                    <h2>Вы не состоите в команде</h2>\n                    <NavLink to={\"/join-team\"}>Присоединиться</NavLink>\n                    <NavLink to={\"/create-team\"}>Создать команду</NavLink>\n                </div>\n\n            }\n            <img src={pic as string} alt=\"\" />\n        </section>\n    )\n}","// React,Hooks\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\"\n\n// Redux,Redux-thunks\n\ntype inputEventType = React.SyntheticEvent<HTMLInputElement>;\ntype setStateType = Dispatch<SetStateAction<string>>;\n\n/**\n//  * INPUTS HOOK\n * \n * @param value default value <string>\n * @param placeholder input placeholder text <string>\n * @returns InputElement : input element : <ReactNode>\n *          state : actual state value : <string>\n *          setState : Dispatch<SetStateAction<string>>\n */\n\nexport const useInput = (value: string = \"\", placeholder: string): [ReactNode, string,setStateType] => {\n    // Input state set default from params\n    const [state, setState] = useState(\"\");\n\n    // On changeHandler tah will be passed into input \n    function onChangeHandler(event: inputEventType) {\n        setState(event.currentTarget.value);\n    };\n\n    let InputElement = <input placeholder={placeholder} value={state} onChange={onChangeHandler} maxLength={100}/>;\n\n    // Return typple with 3 elements [input,state,setState]\n    return [InputElement, state, setState];\n\n\n}\n\n/**\n * VALIDATOR HOOK\n * \n * @param regExp pattern to validate\n * @returns tupple [isError,ErrorText,vslidate function]\n * \n */\nexport const useValidator = (regExp : RegExp) : [boolean,string,(val : string) => void] => {\n    // Boolean error flag\n    let [isError,setError] = useState<boolean>(false);\n    // error message text\n    let [errorText,setErrorText] = useState<string>(\"\");\n    \n    // Define a pattern to validate frpm params\n    let pattern = regExp;\n\n    function validate (value : string) {\n        if(!pattern.test(value))\n        {\n            setError(true);\n            setErrorText(\"Error : invalid input\");\n        }\n    }\n\n    return [isError,errorText,validate]\n}","// Custom Hooks\nimport { useInput, useValidator } from \"./Hooks.\";\n// React,ReactHooks\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// API functions\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\n// Styles and Assesets\nimport add from \"../../../Assets/Icons/icons8-done-150.png\"\nimport \"../../../Assets/Styles/CheckLists.css\"\n// Types\nimport { Global_state_type } from \"../../../Redux/Store\";\n// Route\nimport { CHECK_LIST } from \"../../../Router/Routes\";\n\n\nexport const NewCheckList = () => {\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    let navigate = useNavigate();\n\n    // Get inputs from Hook \n    let [nameInput, nameValue] = useInput(\"Untitled\", \"Type name\");\n    let [taskInput, taskValue, setInput] = useInput(\"\", \"Task\");\n    // Define tasks array\n    let [tasks, setTasks] = useState<string[]>([]);\n    // On Error State if input value is not valid\n\n    // Define a RegExp to validate inputs\n    let [onError, errorMessage, validate] = useValidator(/^[a-zA-Z0-9]+$/);\n\n    // Push new task into \"tasks\" array\n    const onAddClickHandler = () => {\n        // Validate input by rgExp\n        validate(taskValue);\n        if (!onError) {\n            setTasks([...tasks, taskValue]);\n            setInput(\"\");\n        }\n\n    }\n    const createCheckList = () => {\n        // Check if task name are valid\n        validate(nameValue);\n        if (!onError) {\n            //  If valid add new checklist\n            CheckListsAPI.addCheckList(teamID as string, tasks, nameValue);\n            // Movae bavk to check-lists route\n            navigate(CHECK_LIST);\n        }\n\n    }\n    return (\n        <section className=\"new_check_list_container container translate_animation\">\n            <h1>\n                {/* Finish editing */}\n                <button onClick={createCheckList} id=\"add_ckeck_list\">Done</button>\n            </h1>\n            {/* Cheklist Name Input */}\n            {nameInput}\n            <ul className=\"task_list\">\n                {/* Render the added tasks array */}\n                {tasks.map((task: string) => <li key={task}>{task}</li>)}\n            </ul>\n            {/* New task Input */}\n            <div className=\"new_check_list_controls\">\n                {taskInput}\n                <button className=\"confirm_button\" onClick={onAddClickHandler}>\n                    <img src={add} alt=\"\" />\n                </button>\n                <br />\n                {/* Error message (Renders if input conyain errors) */}\n                <span>{onError ? errorMessage : null}</span>\n            </div>\n        </section>\n    )\n}\n\n","import React from \"react\";\nimport { cocltalCardType } from \"../../Redux/KnowledgeBaseReducer\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const CoctailPreview = (props : {cocktail : cocltalCardType}) => {\n    const navigate = useNavigate()\n    \n    return (\n        <section className=\"cocktail_card\" onClick={() => {navigate(`/cocktail/id=${props.cocktail.idDrink}`)}}>\n            <img className=\"cocktail_preview\" src={props.cocktail.strDrinkThumb} alt=\"\" />\n            <div className=\"coctail_info\">\n            <span>{props.cocktail.strDrink}</span>\n            <br />\n            <span>{props.cocktail.strIBA}</span>\n            </div>\n         \n        </section>\n    )\n}\n","import React ,{useEffect}from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nimport { cocltalCardType, getCocktailsByName, getCocktailsThunk } from \"../../Redux/KnowledgeBaseReducer\";\nimport { CoctailPreview } from \"./CocktailPrewiew\";\nexport const CoctailList = () => {\n    let dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getCocktailsThunk())\n    }, [])\n    let cocktailsFromState : cocltalCardType[] = useSelector((state: Global_state_type) => state.knowledgeBase.cocktails as cocltalCardType[]);\n    // let cocktailsFromState : cocltalCardType[] = [];\n\n    function searchByName(e: React.SyntheticEvent<HTMLInputElement>): void {\n\n        // dispatch(getCocktailsByName(e.currentTarget.value));\n\n    }\n    // debugger\n    console.log(\"RENDER\");\n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <section className=\"filters\">\n                <input type=\"text\"  placeholder=\"Искать по названию\" onChange={searchByName}/>\n            </section>\n            <div className=\"list\">\n            {cocktailsFromState?.map((cocktail : cocltalCardType) => {\n                return (\n                    <div key={cocktail.idDrink}>\n                          <CoctailPreview cocktail={cocktail}/>\n                    </div>\n                 \n                )\n            })}\n            </div>\n          \n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSpiritsThunk, spiritType } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const SpiritList = () => {\n    const dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getSpiritsThunk())\n    }, [])\n    let spirits = useSelector((state: Global_state_type) => state.knowledgeBase.spirits)\n \n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <ul className=\"spirit_list list\">\n                {spirits?.map((el: spiritType) => {\n                    return (\n                        <li key={el.ID} className=\"cocktail_card\">\n                            <NavLink to={`/ingridient/id=${el.ID}`}>\n                                <img className=\"cocktail_preview\" src={el.image} alt=\"\" />\n                                <br />\n                                <span>{el.displayName}</span>\n                            </NavLink>\n                        </li>\n\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import React from \"react\";\nimport { CoctailList } from \"./CocktailList\";\nimport { SpiritList } from \"./SpiritList\";\n\nexport const KnowledgeBaseContent = (props : {value : number}) => {\n    switch(props.value){\n        case 0 : {\n            return (\n                <CoctailList/>\n            )\n        }\n        case 1 : {\n            return (\n                <SpiritList/>\n            )\n        }\n        default : \n            return (\n                <>\n                    <h3>Пусто</h3>\n                </>\n            )\n    }\n}\n","import React, { useEffect } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\nimport \"../../Assets/Styles/CocktailList.css\"\nimport { KnowledgeBaseContent } from \"./KnowledgeBaseContent\";\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\n\n\n\n\nexport const KnowledgeBase = () => {\n\n  \n    const [value, setValue] = React.useState(0);\n    const isDarkTheme = useSelector((state : Global_state_type) => state.App.isDarktheme)\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n      \n    };\n\n    return (\n        <section className=\"knwoledge_base_container container\">\n            <h2>База знаний</h2>\n            <Box sx={{width: '100%',marginBottom : \"5px\" }}>\n                <Tabs value={value} onChange={handleChange} sx={{}} >\n                    <Tab sx={{width : \"50%\",fontSize : \"14px\",color : isDarkTheme ? \"white\" : \"black\"}} label=\"Коктейли\" />\n                    <Tab  sx={{width : \"50%\",fontSize : \"14px\",color :  isDarkTheme ? \"white\" : \"black\"}}  label=\"Спирты\" />\n                </Tabs>\n            </Box>\n            <KnowledgeBaseContent value={value}/>\n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { getCurrentIngridient } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const IngridientCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCurrentIngridient(location))\n    },[])\n    let currentIngridient = useSelector((state : Global_state_type) => state.knowledgeBase.currentSpirit)\n    return (\n        <section className=\" container spirit_card translate_animation\">\n            <figure>\n                <figcaption><h2>{currentIngridient?.displayName}</h2></figcaption>\n            <img id=\"cocktail_photo\" src={currentIngridient?.image} alt=\"\" />\n            </figure>\n            <article>\n\n            <h4>Описание : </h4>\n            <p>\n                {currentIngridient?.definition}\n            </p>\n        \n            <span>Технология произодства : </span>\n            <p>{currentIngridient?.production}</p>\n            </article>\n         \n        </section>\n    )\n}","\nimport { useState } from \"react\";\nimport logo from \"../../Assets/Icons/bartendLogo.png\"\nimport { Formik } from \"formik\";\nimport \"../../Assets/Styles/Login.css\"\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { loginByEmailAndPassword } from \"../../Redux/AppReducer\";\nimport showPass from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePass from \"../../Assets/Icons/icons8-hide-password-100.png\"\nimport { loginValidationShema} from \"../../Helpers/Helpers\";\n\n\nexport const LoginPage = () => {\n    const dispatch : any = useDispatch()\n    const [hidePassword, setHidePassword] = useState(true)\n    const onShowPasswordHandler = () => {\n        if (hidePassword) {\n            setHidePassword(false)\n        } else {\n            setHidePassword(true)\n        }\n    }\n\n    //Login by email & password\n    const Submit = (values: { email: string, password: string }) => {\n       \n        dispatch(loginByEmailAndPassword(values.email,values.password))\n    }\n\n    return (\n        <section className=\"login_page_container translate_animation\">\n\n            <div className=\"login_form\">\n            <img src={logo} alt=\"\" className=\"logo\"/>\n                <Formik initialValues={{\n                    email: \"\",\n                    password: \"\"\n                }}\n                    enableReinitialize={true}\n                    validateOnBlur={true}\n                    onSubmit={Submit}\n                    validationSchema={loginValidationShema}>\n                    {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                        return (\n                            <section className=\"LoginByEmailAndPassword\">\n                                <h1>Логин</h1>\n                               \n                                <input id=\"email\" autoComplete=\"off\" type=\"text\" name=\"email\" onChange={handleChange} placeholder={\"Email\"} onBlur={handleBlur} value={values.email} />\n                              \n                                <br />\n                                <span className=\"spanError\">{touched.email ? errors.email : null}</span>\n                               \n                                \n                                <br />\n                                <div className=\"input_container\">\n                                <input autoComplete=\"off\" id=\"passwordInput\" type={hidePassword ? \"password\" : \"text\"} name=\"password\" onChange={handleChange} placeholder={\"Password\"} onBlur={handleBlur} value={values.password} />\n                                <div className=\"show\" onClick={onShowPasswordHandler}><img  id=\"passwordShow\" src={hidePassword ? showPass : hidePass} alt=\"\" /></div>\n                                </div>\n                                <br />\n                                <span className=\"spanError\">{touched.password ? errors.password : null}</span>\n                                <button id=\"loginButton\" type=\"submit\" \n                                    //@ts-ignore\n                                    onClick={handleSubmit} disabled={false}>Войти</button>\n                                <br />\n                                <h3>или</h3>\n                                <NavLink to=\"/registration\" style={{\"fontSize\" : \"x-large\",\"color\" : \"rgb(242, 122, 67)\"}}>Создать аккаунт</NavLink>\n                            </section>\n                        )\n                    }}\n                </Formik>\n            </div>\n        </section>\n    )\n}   ","import { Formik } from \"formik\"\nimport  \"../../Assets/Styles/Registration.css\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { RegistrationActions, createNewUserByEmailAndPassword } from \"../../Redux/RegistrationReducer\";\nimport { useState } from \"react\";\nimport showPasswordIcon from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePasswordIcon from \"../../Assets/Icons/icons8-hide-password-100.png\"\nimport { validationShema } from \"../../Helpers/Helpers\";\n\n\n\nexport const Registration = () => {\n    const dispatch: any = useDispatch()\n    \n\n    let [isPasswordHided,setPasswordHided] = useState(false)\n    \n    const Submit = (values :{nickName : string ,email : string,password : string,repeatPassword : string}) => {\n        dispatch(RegistrationActions.setEmail(values.email))\n        dispatch(RegistrationActions.setPassword(values.password))\n        dispatch(RegistrationActions.setRepeatPassword(values.repeatPassword))\n        dispatch(createNewUserByEmailAndPassword(values.nickName,values.email,values.password))\n\n    }\n\n    return (\n        <section className=\"create_the_team_container\">\n                <h1>Создать аккаунт</h1>\n          \n                <Formik enableReinitialize={true}\n                    initialValues={{ nickName: \"\", companyName: \"\",email: \"\",password : \"\",repeatPassword : \"\"}}\n                    onSubmit={Submit}\n                    \n                validationSchema={validationShema}\n                validateOnBlur={true}\n                \n                >\n                    {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                        return (\n                            <div className=\"create_team_inputs translate_animation\">\n\n                                <input type=\"text\" id=\"nickName\" autoComplete=\"off\" onChange={handleChange} placeholder=\"Имя\" />\n                                <span className=\"onInputError\">{touched.nickName  ? errors.nickName : null}</span>\n                                <input type=\"text\" id=\"email\" autoComplete=\"off\" onChange={handleChange} placeholder=\"Почта\" />\n                                <span className=\"onInputError\"> {touched.email ? errors.email : null}</span>\n\n                                <div className=\"passwordFirstInput\">\n                                <input id=\"password\" className=\"password\" name=\"password\" type={isPasswordHided ? \"password\" : \"text\"}  autoComplete=\"off\" onChange={handleChange} placeholder=\"Пароль \" />\n                               \n\n                                <img id=\"passwordToggle\" src={isPasswordHided ? showPasswordIcon : hidePasswordIcon}\n                                 onClick={() => {\n                                    setPasswordHided(!isPasswordHided)\n                                 }}alt=\"\" />\n                                </div>\n                                <span className=\"onInputError\"> {touched.password ? errors.password : null}</span>\n                              \n                                <input type={isPasswordHided ? \"password\" : \"text\"} id=\"repeatPassword\"  autoComplete=\"off\" onChange={handleChange} placeholder=\"Повторите пароль\"/>\n                                <span className=\"onInputError\"> {touched.repeatPassword ? errors.repeatPassword : null}</span>\n\n                                <button\n                                    // @ts-ignore \n                                    onClick={handleSubmit} id=\"submit_reg\" type=\"submit\">Создать акаунт</button>\n                            \n                            \n                            </div>\n                        )\n                    }}\n            </Formik>\n             \n            \n        </section>\n    )\n}","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Types\nimport { productType } from \"../../../../Redux/Types\";\n\ntype PropsType = {\n    products: productType[]\n}\n\n\nexport const ProgressBar = (props: PropsType) => {\n\n    let { products } = props;\n    // Here we get the percentage and number of finished ingredients for the progress bar\n    let readyProducts = products.filter((item: any) => item.isDone === true);\n    let percent = 100 / products.length * Number(readyProducts.length);\n    return (\n\n        <div className=\"progress_bar\">\n            <span>{readyProducts.length + \"/\" + products.length}</span>\n            <span>{percent.toFixed(1) + \"%\"}</span>\n        </div>\n    )\n}","\n\ntype IngridientsListItem = {\n    name: string,\n    isDone: boolean,\n    itemId: string,\n    toggle: any\n}\n\nexport let IngridentsItem = (props: IngridientsListItem,) => {\n    return (\n        <li key={props.itemId}>\n            <a href={\"#/card/id=\" + props.itemId}>\n                <span>{props.name}</span>\n            </a>\n            <span onClick={() => {\n                    console.log(\"Click\");\n                    props.toggle(props.itemId);\n                }}>{!props.isDone ? \"В процессе\" : \"Готово\"}</span>\n        </li>\n    )\n}\n","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Components\nimport { IngridentsItem } from \"./IngridentItem\";\n//Types\nimport { productType } from \"../../../../Redux/Types\";\n\n\n\nexport const IngridientList = (props: { ingridients: productType[], setState: React.Dispatch<any> }) => {\n    function toogleItem (id : string ) {\n        // Define an action object\n        let action = {\n            type : 'toggle',\n            payload : id\n        }\n        // Pass action into the set state\n        props.setState(action);\n    }\n    return (\n        <section className=\"product_list_container \">\n            <ul className=\"products__list\">\n                {props.ingridients.map((el: any) => {\n                    return (\n                        <>\n                            <IngridentsItem key={el.itemId} itemId={el.id as string} name={el.name} toggle={toogleItem} isDone={el.isDone as boolean} />\n                        </>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import { NavLink } from \"react-router-dom\";\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n// ---------\n// If theres is no open shift at this time - return this component\n\nexport const EmptyShift = () => {\n    return (\n        <section className={`empty_shift_container container`}>\n        <span>There is no open shift</span>\n        {/* Link to shifth constructor */}\n        <NavLink className={`nav_link begin-shift`} to={\"create-new\"}>\n            Begin\n        </NavLink>\n    </section>\n    )\n}","import { productType } from \"../../../Redux/Types\";\n\n\ntype ActionType = {\n    type: string,\n    payload: string | productType[]\n}\n\nexport const Reducer  = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case \"toggle\" : {\n            return [\n                ...state.map((el: any) => {\n                    if(el.id === action.payload) {\n                        return {...el,isDone : !el.isDone};\n                    }\n                    return el\n                })\n            ]\n            }\n            case 'set-state' : {\n                return [...action.payload as productType[]]\n            }\n            default:\n                return state\n        }\n    }","// React, custom hooks imports\nimport React, { useEffect, useReducer } from \"react\";\nimport { useDispatch } from \"react-redux\";\n// Components \nimport { ProgressBar } from \"./ProgressBar\";\nimport { IngridientList } from \"./IngridientList\";\nimport { EmptyShift } from \"./EmtyShiftPage\";\n\n// Styles imports\nimport \"../../../../Assets/Styles/BlamkShift.css\";\nimport { blankShiftType, productType } from \"../../../../Redux/Types\";\n\n\n// Redux imports\nimport { closeCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\nimport { Reducer } from \"../../Reducers/Reducer\";\n\ntype currentShiftPropType = {\n    products: productType[],\n    shift: blankShiftType\n}\n\n\nexport const CurrentShift = React.memo((props: currentShiftPropType) => {\n    const dispatch: any = useDispatch();\n    // Get current shift ibject by TeamID\n    let [state, setState] = useReducer(Reducer, props.products as unknown as productType[])\n    // Use set state effect if we get a new data in props\n    // By default props.products is an empty array\n    useEffect(() => {\n        let action = {\n            type: \"set-state\",\n            payload: props.products\n        }\n        setState(action);\n    }, [props.products.length]);\n    // End shift handler\n    const endShift = function () {\n        dispatch(closeCurrentShiftByCompanyID(props.shift));\n    }\n\n\n    if (props.shift.shiftID?.length as number > 1) {\n        return (\n            <section className={`current_shift_container translate_animation`}>\n                <ProgressBar products={state} />\n                <IngridientList ingridients={state} setState={setState} />\n                <button\n                    className={'confirm_button'}\n                    onClick={endShift}>Закончить смену\n                </button>\n            </section>\n        )\n    } else {\n        // Render empty shift Component\n        return (\n            <EmptyShift />\n        )\n    }\n\n})","\n// Define the props type for ShiftPreview component\ntype ShiftPreviewType = {\n    employee: string;\n    date: string;\n    count: number;\n    onClickHandler: (shiftID: string) => void;\n    shiftID: string | undefined;\n};\n\n/**\n * A component for displaying shift preview information.\n * @param props - The properties for the ShiftPreview component.\n * @returns The ShiftPreview component.\n */\nexport const ShiftPreview = (props: ShiftPreviewType) => {\n    return (\n        <li key={props.shiftID} className=\"passed_shift_preview_item\" onClick={() => props.onClickHandler(props.shiftID as string)}>\n            <span>Date: {props.date}</span>\n            <span>Employee: {props.employee}</span>\n            <span>Number of Positions: {props.count}</span>\n            <span id={`showMore`} onClick={() => props.onClickHandler(props.shiftID as string)} >Show More</span>\n        </li>\n    );\n};","// Iport Rweact and Components\nimport { useNavigate } from \"react-router-dom\";\nimport { ShiftPreview } from \"./ShiftPreview\";\n// Redux imports and types\nimport { blankShiftType } from \"../../../../Redux/Types\";\n\n// Styles imports \nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n\nexport const ShiftsHistory = (props : { shifts : blankShiftType[]}) => {\n    const navigate = useNavigate()\n    // Navigate to specified shift in history by id\n    const onClickHandler = (id: string) => {\n        navigate(`id=${id}`)\n    }\n\n    if (props.shifts.length > 0) {\n        return (\n            <section className={`history_container translate_animation`}>\n\n                {props.shifts.map((el: blankShiftType) => {\n                    return (\n                        <ShiftPreview \n                        date={el.date} \n                        employee={el.employe} \n                        count={el.count} \n                        onClickHandler={onClickHandler} \n                        shiftID={el.shiftID} />\n                    )\n                })}\n            </section>\n        )\n    } else {\n        return (\n            <div id=\"empty_history\">История смен пуста</div>\n        )\n    }\n\n}\n","// Components\nimport { CurrentShift } from \"../CurrentShiftPage/CurrentShift\";\nimport { ShiftsHistory } from \"../HistoryPage/ShiftsHistory\";\n\n// React hooks \nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Redux state and thunks\nimport { app_actions } from \"../../../../Redux/AppReducer\";\nimport {\n    getShiftsHistoryByCompanyID\n} from \"../../../../Redux/BlankShiftReducer\";\n\n// Custom Hooks\nimport { useProducts } from \"../CurrentShiftPage/useProducts\";\nimport { useNavbar } from \"./UseNabar\";\n\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { Preloader } from \"../Preloader\";\n\n\n\n// Main BlankShiftManager component\n// Container component that receives data for \n// the components current Shift (Object of the current shift) \n// and shiftHistory (Object displaying the history of closed shifts)\n\nexport const MainPage = () => {\n    const dispatch: any = useDispatch();\n    // Get TeamID from global state to fetch current blank shift data\n    let companyID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get an array of closed shits for <ShiftHistoy> component\n    let shifts = useSelector((state: Global_state_type) => state.blankShift.closedShifts);\n    // -------  \n    // Get shift object fro global state to pass him into <CurrentShift> Component\n    //  \n    // This function need to bi fixed (Deed to add fucntion thah will clodse current shift only by ID)\n    // -------\n    let shift = useSelector((state: Global_state_type) => state.blankShift.currentShift);\n    // GET IS FETCH FLAG\n    let isFetch = useSelector((state: Global_state_type) => state.App.isFetch);\n\n    useEffect(() => {\n        dispatch(getShiftsHistoryByCompanyID(companyID as string));\n    }, []);\n    // Get an aray of premixes objects from hook\n    let products = useProducts(companyID as string);\n\n\n    //Get a tuple from the navbar component and the current state of the currentShift variable\n    const [Navbar, shiftType] = useNavbar();\n\n    // Render <Preloader/> or content depending on isFetch boolean flag\n    if (!isFetch) {\n        return (\n            <section className={`blank_shift_container translate_animation`}>\n                {Navbar}\n                {/* Depending on the shift type, we display the corresponding component */}\n                {shiftType === 0 ? <CurrentShift products={products} shift={shift} /> : <ShiftsHistory shifts={shifts} />}\n            </section>\n        );\n    }\n    else {\n        return <Preloader />\n    }\n\n}\n\n","\nimport {  useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../../Redux/Store\"\nimport { useEffect } from \"react\"\nimport { getCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\"\nimport { productType } from \"../../../../Redux/Types\"\n\n\nexport const useProducts = (companyID : string) => {\n    const dispatch : any = useDispatch();\n\n    useEffect(() => {\n        dispatch(getCurrentShiftByCompanyID(companyID));\n    },[]);\n    \n    let products = useSelector((state: Global_state_type) => state.blankShift.currentShift.products);\n\n    products = products.map((el : productType) => {\n        return {\n            ...el,\n            isDone : false  \n        }\n    });\n    if(Array.isArray(products)) {\n        return products;\n    }\n    else\n    {\n        return [];\n    }\n};\n","import React, { useState } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\n\n// Custom hook for a navigation bar\nexport const useNavbar = () => {\n  // State for tracking the selected tab\n  const [shiftType, setShiftType] = useState(0);\n\n  // Event handler for tab changes\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setShiftType(newValue);\n    console.log(newValue);\n  };\n\n  // JSX for the navigation bar\n  const navbar = (\n    <Box sx={{ width: '100%', marginBottom: \"5px\" }}>\n      <Tabs value={shiftType} onChange={handleChange} sx={{}} >\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"Current Shift\" />\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"History\" />\n      </Tabs>\n    </Box>\n  );\n\n  // Returning the navigation bar JSX and the selected tab value\n  return [navbar, shiftType];\n};\n","\nimport {MainPage} from \"./Components/MainPage/MainPage\"\n\nexport const PremixesApp = () => {\n    return (\n        <section>\n            <MainPage/>\n        </section>\n    )\n}","// Comoponents,Hooks\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Redux\nimport { getPassedShiftByID } from \"../../../../Redux/BlankShiftReducer\";\n// Styles\nimport \"../../../../Assets/Styles/PassedShift.css\";\n// Types\nimport { productType } from \"../../../../Redux/Types\";\nimport { Global_state_type } from \"../../../../Redux/Store\";\n\n\nexport const PassedShift = () => {\n    const dispatch: any = useDispatch();\n    const navigate = useNavigate();\n\n    // Get shiftID from URL\n    const shiftID = useLocation().pathname.split(\"=\")[1];\n    \n    // Fetch passed shift data by ID\n    useEffect(() => {\n        dispatch(getPassedShiftByID(shiftID));\n    }, []); // Empty array of dependencies to run the effect only once\n\n    // Get passedShift data from Redux store\n    const PassedShift = useSelector(\n        (state: Global_state_type) => state.blankShift.passedShift\n    );\n\n\n    return (\n        <section className=\"container passed_shift_container translate_animation\">\n            {/* Go back link */}\n            <h3 onClick={() => { navigate(-1) }}>Назад</h3>\n\n            <table>\n                {/* Display shift details */}\n                <tr>Смена от : <td>{PassedShift?.date}</td></tr>\n                <tr>Заготовщик :<td>{PassedShift?.employe}</td></tr>\n                <tr>Сделано позиций : <td>{PassedShift?.products.length}</td></tr>\n                {/* Display list of products */}\n                {PassedShift?.products.map((el: productType) => {\n                    return (\n                        <tr>\n                            <td>{el.name}</td>\n                        </tr>\n                    );\n                })}\n            </table>\n        </section>\n    );\n};\n\n","\ntype ProdcustItemItemType = {\n    name: string,\n    isChecked: boolean,\n    id: string,\n    toggleFunction: (action: { type: string, payload: string }) => void\n}\n\n\nexport const ProdcustItem = (props: ProdcustItemItemType) => {\n\n    function toggle(id: string) {\n        props.toggleFunction({\n            type: 'toggle-item',\n            payload: id\n        })\n    }\n    return (\n        <li key={props.id}\n            // Is element checked flag\n            className={props.isChecked ? `checked_element` : `unchecked_element`}\n            onClick={() => { toggle(props.id) }} id={props.id}>\n\n            <span>{props.name}</span>\n        </li>\n    )\n};","// Coponents\nimport { ProdcustItem } from \"./PrroductItem\"\n// Types\nimport { productType } from \"../../../../Redux/Types\"\n\n\ntype prdocuctListType = {\n    products: productType[],\n    dispatch : (action : {type : string,payload : string}) => void\n}\n\n\nexport const ProductList = (props: prdocuctListType) => {\n    return (\n        <ul>\n            {props.products.map((el: productType) => {\n                 return (\n                    <ProdcustItem name={el.name} isChecked={el.checked as boolean} toggleFunction={props.dispatch} id={el.id as string} />\n                )\n            })}\n        </ul>\n    )\n}","import { productType } from \"../../../Redux/Types\"\n\n\ntype ActionType = {\n    type: string,\n    payload: any\n}\n\nexport const Reducer = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case 'toggle-item': {\n            console.log(action.payload)\n            return [\n                ...state.map((el: productType) => {\n                    if (el.id === action.payload) {\n\n                        return {...el,checked : !el.checked};\n                    }\n                    return el;\n                })\n            ]\n        }\n        case 'toggle-all': {\n            return [\n                ...state.map((el: productType) => {\n                    return { ...el, checked: !el.checked }\n                })\n            ]\n        }\n        case 'set-products' : {\n            console.log(action.payload)\n            return [\n                ...action.payload\n            ]\n        }\n        default:\n            return state;\n    }\n}","// REDUX\nimport { setCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\n// TYPES\nimport { productType, userPageType } from \"../../../../Redux/Types\";\n// React imports\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\n// IMPORT ICONS AND STYLES\nimport \"../../../../Assets/Styles/BlamkShift.css\"\nimport startIcon from \"../../../../Assets/Icons/icons8-start-64.png\"\n\n\n\n\ntype shiftConstructorTopPControls = {\n    products: productType[],\n    user: userPageType,\n    dispatchProducts : any\n}\n\n/**\n *  Check is all items was selected \n * @param products ArrayProductType\n * @returns boolean\n */\n\nfunction checkSelection (products : productType[]) {\n    let result = products.filter((el : productType) => el.checked == true);\n    if (result.length > 0) {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n};\n\n\nexport const CreateNewShiftControls = (props: shiftConstructorTopPControls) => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n    // Check if all items was selectrd or not\n    let isAllSelected = checkSelection(props.products);\n    // Create shift hanler ,get all data and creates new shift object and pass them into \n    // setCurrentShift thunk\n    const createShift = () => {\n        dispatch(setCurrentShiftByCompanyID(\n            props.user.team as string,\n            props.user.teamID as string,\n            props.products,\n            props.user.userName as string));\n\n        navigate(\"/begin-blank-shift\");\n\n    }\n    // Toggler fuction (comes from props)\n    function toggleAll () {\n        props.dispatchProducts({type : 'toggle-all'});\n    }\n    return (\n        <ul className={`controls`}>\n            <li \n                onClick={toggleAll}>\n                {isAllSelected ? \"Clear\" : \"Select all\"}\n            </li>\n            <li onClick={createShift}>Start\n                <img className=\"icon\" src={startIcon} alt=\"\" />\n            </li>\n\n        </ul>\n    )\n}","// React,React hooks\nimport { useEffect, useReducer } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n// Components\nimport { ProductList } from \"./PrdocuctList\";\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\n// Custom Hooks\nimport { Reducer } from \"../../Reducers/constructorReducer\";\n// Redux.Redux thunks\nimport { CreateNewShiftControls } from \"./CreateNewShiftControls\";\nimport { getProductsByCompanyID } from \"../../../../Redux/ProductReduxer\";\n\n\n\n\nexport const ShiftConstructorContainer = () => {\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    let products = useSelector((state: Global_state_type) => state.blankShift.productList);\n    const dispatch: any = useDispatch();\n    // Define a localal reducer with custom toggling state\n    let [state, dispatchProducts] = useReducer(Reducer, products);\n    // Get products and pass them into the local state\n    useEffect(() => {\n        dispatchProducts({\n            type: 'set-products',\n            payload: products\n        });\n    }, [products.length]);\n\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(user.teamID as string))\n    }, []);\n\n\n    return (\n        <section className=\"shift-constructor container\">\n            <CreateNewShiftControls products={state} user={user} dispatchProducts={dispatchProducts}/>\n            <ProductList products={state} dispatch={dispatchProducts}  />\n        </section>\n    )\n};","// ---------- IMPORT REACT COMPOENTS\n\nimport { Navigate } from \"react-router-dom\";\nimport { CheckLists } from \"../Modules/ChecklistApp/Components/CheckLists\";\nimport { CheckListPage } from \"../Modules/ChecklistApp/Components/CheclListPage\";\nimport { Premixes } from \"../Components/Ingridients/Premixes\";\nimport { ProductCard } from \"../Components/Ingridients/ProductCard\";\nimport { CocktailCard } from \"../Components/KnowledjeBase/CoctrailCard\";\n\n\nimport { CreateTeam } from \"../Components/Teams/CreateTeam\";\nimport { JoinTeam } from \"../Components/Teams/JoinTeam\";\nimport { HomePage } from \"../Components/mainScreen\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { NewProduct } from \"../Components/NewProduct/NewProduct\";\nimport { SecondStep } from \"../Components/NewProduct/SecondStep\";\nimport { TeamPageContainer } from \"../Components/Teams/ClanList\";\nimport { NewCheckList } from \"../Modules/ChecklistApp/Components/NewCheckList\";\nimport { KnowledgeBase } from \"../Components/KnowledjeBase/KnowledgeBase\";\nimport { IngridientCard } from \"../Components/KnowledjeBase/Ingridient\";\nimport { LoginPage } from \"../Components/Registration/LoginPage\";\nimport { Registration } from \"../Components/Registration/Registration\";\nimport { PremixesApp } from \"../Modules/PremixesApp/Premixes\";\nimport { PassedShift } from \"../Modules/PremixesApp/Components/HistoryPage/PassedShiftItem\";\nimport { ShiftConstructorContainer } from \"../Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer\";\n\n\n// ---------- ROUTES STRINGS\nexport const SHIFT_MANAGER = '/shiftManager/*'\nexport const HOME = \"/home\"\nexport const COCKTAIL_CARD = \"/cocktail/:id\"\nexport const PREMIX_LIST = \"/premixes\"\nexport const ADD_PRODUCT = \"/add\"\nexport const PRODUCT_CARD = \"/card/:id\"\nexport const LOG_OUT = \"/logOut\"\nexport const REGISTRATION = \"/registration\"\nexport const NO_MATCH_ROUTE = \"*\"\nexport const BLANK_SHIFT = \"/blank-shift/*\"\nexport const STEP_2 = \"add-step-two\"\nexport const NEW_BLANK_SHIFT = \"/shiftManager/create-new\"  \n\nexport const CHECK_LISTS = \"/check-lists\"\nexport const PASSED_SHIFT = \"shiftManager/:id\"\nexport const CLAN_LISTS = \"/clan-list\"\nexport const CREATE_TEAM = \"/create-team\"\nexport const JOIN_TEAM = \"/join-team\"\nexport const NEW_CHECK_LIST = \"/new-check-list\"\nexport const CHECK_LIST = \"/check-lists/:id\"\nexport const KNIWLEDGE_BASE = \"knowledge-base\"\nexport const INGRIDIENT = \"ingridient/:id\"\nexport const HISTORY = '/blank-shift/history'\n\nexport const PRIVATE_ROUTES : ROUTE[] = [\n    {\n        path : HISTORY,\n        element : <h1>History</h1>\n    },\n    {\n        path : HOME,\n        element : <HomePage/>\n    },\n    {\n        path : COCKTAIL_CARD,\n        element : <CocktailCard/>\n    },\n    {\n        path : JOIN_TEAM,\n        element : <JoinTeam/>\n    },\n    {\n        path : CREATE_TEAM,\n        element : <CreateTeam/>\n    },\n    {\n        path : SHIFT_MANAGER,\n        element : <PremixesApp/>\n    },\n    {\n        path : CHECK_LIST,\n        element : <CheckListPage/>\n    },\n    {\n        path : PASSED_SHIFT,\n        element : <PassedShift/>\n    },\n    {\n        path : BLANK_SHIFT,\n        element : <PremixesApp/>\n    },\n    {\n        path : PREMIX_LIST,\n        element : <Premixes/>\n    },\n    {\n        path : PRODUCT_CARD,\n        element : <ProductCard/>\n    },\n    {\n        path : NEW_BLANK_SHIFT,\n        element : <ShiftConstructorContainer/>\n    },\n    {\n        path : CHECK_LISTS,\n        element : <CheckLists/>\n    },\n    {\n        path : NO_MATCH_ROUTE,\n        element : <Navigate to=\"/home\" />\n    },\n    {\n        path : ADD_PRODUCT,\n        element : <NewProduct isDarkTheme={true}/>\n    },\n    {\n        path : STEP_2,\n        element : <SecondStep isDarkTheme={true}/>\n    },\n    {\n        path : CLAN_LISTS,\n        element : <TeamPageContainer isDarkTheme={true}/>\n    },\n    {\n        path : NEW_CHECK_LIST,\n        element : <NewCheckList/>\n    },\n    {\n        path : KNIWLEDGE_BASE,\n        element : <KnowledgeBase/>\n    },\n    {\n        path : INGRIDIENT,\n        element : <IngridientCard/>\n    }\n]\n\nexport const PUBLICK_ROUTES : ROUTE [] = [\n    {\n        path : LOG_OUT,\n        element : <LoginPage/>\n    },\n    {\n        path : NO_MATCH_ROUTE,\n        element : <Navigate to={\"/logOut\"}/>\n    },\n    {\n        path : REGISTRATION,\n        element : <Registration/>\n    }\n\n]","\n// ---------- REACT & REACT HOOKS\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ---------- REDUX\nimport { Global_state_type } from \"../Redux/Store\";\n\n// ---------- IMPORT PROVATE & PUBLICK ROUND & ROUTE INTERFACE\nimport { PRIVATE_ROUTES, PUBLICK_ROUTES } from \"./Routes\";\nimport { ROUTE } from \"../Redux/Types\";\n\n// The router component iterates over the routes array and returns a route component\n//  with the corresponding react component. if user is not authorized iterates over PUBLKICK_ROUTES array\n// anotherwise over PRIVATE_ROUTES\n\n\nconst Router = React.memo((props: { isDarkTheme: boolean }) => {\n    \n    const isAuth = useSelector((state: Global_state_type) => { return state.App.isAuth })\n   \n    if (isAuth) {\n\n        return (\n            <div className=\"content\">\n                <Routes>\n                    {PRIVATE_ROUTES.map((route : ROUTE) => {\n                        return (\n                            <Route key={route.path} element={route.element} path={route.path}/>\n                        )\n                    })}\n                </Routes>\n           \n            </div>\n        )\n    }\n\n    else {\n        return (\n            <>\n                <Routes>\n                    {PUBLICK_ROUTES.map((route : ROUTE) => <Route path={route.path} element={route.element}/>)}\n                </Routes>\n            </>\n        )\n    }\n\n})\n\nexport default Router;"],"names":["CheckListPreview","props","jsxTasks","tasks","length","i","push","_jsx","className","children","renderTasksPreview","_jsxs","NavLink","to","concat","id","name","map","el","_Fragment","ItemList","navigate","useNavigate","checkLists","onClick","CheckLists","checklists","dispatch","useDispatch","teamID","useSelector","state","App","user","useEffect","getCheckListsthunk","chcekLists","useChecklistList","CheckListPage","_useTaskList","useLocation","pathname","split","find","deleteChekListThunk","useTaskList","_useTaskList2","_slicedToArray","checklist","deleteHandler","src","deleteIcon","index","PremixesList","console","log","blanks","productActions","Navigate","parseElementNameToString","alt","Premixes","isDarkTheme","isDarktheme","_useProductFilter","initial","_useState","useState","_useState2","filter","setFilter","getProductsByCompanyID","premixes","includes","value","useProductFilter","_useProductFilter2","products","filterProducts","isSearch","setIsSearch","onChange","e","currentTarget","backIcom","backIconsLight","ProductCard","card","actualProductCard","useTheme","productID","showDescription","setShowDescription","_useState3","_useState4","showCompositon","setShowComposition","_useState5","_useState6","setValue","backArrow","backArrowLight","deleteProductCrad","description","parseComposition","composition","type","placeholder","Number","calculateAndParseIntoComponent","CocktailCard","location","getCocktailByID","currentCocktail","knowledgeBase","strDrink","strDrinkThumb","strGlass","strIBA","strCategory","strInstructions","Object","keys","values","CreateTeam","newTeam","clans","clanActions","createClanThunk","userID","userName","initializeThunk","JoinTeam","getAllClans","teamList","teamName","joinTheClan","ThemeSwitcher","setTheme","app_actions","theme","MainPageNavigation","styles","HomePage","profile","window","innerWidth","windowWidth","setWindowWidth","handleResizeWindow","addEventListener","removeEventListener","useWindowInnerWidth","team","NewIngridientSingleForm","yup","shape","key","typeError","min","max","required","Formik","initialValues","enableReinitialize","validateOnBlur","onSubmit","newIngridient","_defineProperty","newCardActions","_ref","errors","touched","handleChange","handleSubmit","handleBlur","isValid","dirty","autoComplete","FirstStep","forms","setForms","onNameChange","_toConsumableArray","NewProduct","SecondStep","newProduct","newCard","createNewIngridientCard","TeamPage","getClanListByUserID","users","leaveTheTeam","_objectSpread","LeaveTheTeamHandler","TeamPageContainer","pic","_state$clans$team","teamAvatar","useInput","arguments","undefined","setState","event","maxLength","NewCheckList","_useInput","_useInput2","nameInput","nameValue","_useInput3","_useInput4","taskInput","taskValue","setInput","setTasks","_useValidator","regExp","isError","setError","errorText","setErrorText","pattern","test","useValidator","_useValidator2","onError","errorMessage","validate","CheckListsAPI","CHECK_LIST","task","CoctailPreview","cocktail","idDrink","CoctailList","getCocktailsThunk","cocktailsFromState","cocktails","SpiritList","getSpiritsThunk","spirits","ID","image","displayName","KnowledgeBaseContent","KnowledgeBase","_React$useState","React","_React$useState2","Box","sx","width","marginBottom","Tabs","newValue","Tab","fontSize","color","label","IngridientCard","getCurrentIngridient","currentIngridient","currentSpirit","definition","production","LoginPage","hidePassword","setHidePassword","onShowPasswordHandler","logo","email","password","loginByEmailAndPassword","validationSchema","loginValidationShema","onBlur","showPass","hidePass","disabled","style","Registration","isPasswordHided","setPasswordHided","nickName","companyName","repeatPassword","RegistrationActions","createNewUserByEmailAndPassword","validationShema","showPasswordIcon","hidePasswordIcon","ProgressBar","readyProducts","item","isDone","percent","toFixed","IngridentsItem","href","itemId","toggle","IngridientList","toogleItem","action","payload","ingridients","EmptyShift","Reducer","CurrentShift","_props$shift$shiftID","_useReducer","useReducer","_useReducer2","shift","shiftID","closeCurrentShiftByCompanyID","ShiftPreview","onClickHandler","date","employee","count","ShiftsHistory","shifts","employe","MainPage","companyID","blankShift","closedShifts","currentShift","isFetch","getShiftsHistoryByCompanyID","getCurrentShiftByCompanyID","Array","isArray","useProducts","_useNavbar","shiftType","setShiftType","useNavbar","_useNavbar2","Navbar","Preloader","PremixesApp","PassedShift","getPassedShiftByID","passedShift","ProdcustItem","isChecked","toggleFunction","ProductList","checked","CreateNewShiftControls","isAllSelected","dispatchProducts","setCurrentShiftByCompanyID","ShiftConstructorContainer","productList","PRIVATE_ROUTES","path","element","PUBLICK_ROUTES","isAuth","Routes","route","Route"],"sourceRoot":""}