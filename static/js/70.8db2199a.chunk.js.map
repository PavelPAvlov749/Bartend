{"version":3,"file":"static/js/70.8db2199a.chunk.js","mappings":"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","sources":["Modules/PremixesApp/Components/CurrentShiftPage/ProgressBar.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridentItem.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridientList.tsx","Modules/PremixesApp/Components/CurrentShiftPage/EmtyShiftPage.tsx","Modules/PremixesApp/Reducers/Reducer.ts","Modules/PremixesApp/Components/CurrentShiftPage/CurrentShift.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftPreview.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftsHistory.tsx","Modules/PremixesApp/Components/MainPage/MainPage.tsx","Modules/PremixesApp/Components/CurrentShiftPage/useProducts.tsx","Modules/PremixesApp/Components/MainPage/UseNabar.tsx","Modules/PremixesApp/Premixes.tsx"],"sourcesContent":["// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Types\nimport { productType } from \"../../../../Redux/Types\";\n\ntype PropsType = {\n    products: productType[]\n}\n\n\nexport const ProgressBar = (props: PropsType) => {\n\n    let { products } = props;\n    // Here we get the percentage and number of finished ingredients for the progress bar\n    let readyProducts = products.filter((item: any) => item.isDone === true);\n    let percent = 100 / products.length * Number(readyProducts.length);\n    return (\n\n        <div className=\"progress_bar\">\n            <span>{readyProducts.length + \"/\" + products.length}</span>\n            <span>{percent.toFixed(1) + \"%\"}</span>\n        </div>\n    )\n}","\n\ntype IngridientsListItem = {\n    name: string,\n    isDone: boolean,\n    itemId: string,\n    toggle: any\n}\n\nexport let IngridentsItem = (props: IngridientsListItem,) => {\n    console.log(props.itemId);\n    return (\n        <li key={props.itemId}>\n            <a href={\"#/card/id=\" + props.itemId}>\n                <span>{props.name}</span>\n            </a>\n            <span onClick={() => {\n                    console.log(\"Click\");\n                    props.toggle(props.itemId);\n                }}>{!props.isDone ? \"In progress\" : \"Done\"}</span>\n        </li>\n    )\n}\n","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Components\nimport { IngridentsItem } from \"./IngridentItem\";\n//Types\nimport { productType } from \"../../../../Redux/Types\";\n\n\n\nexport const IngridientList = (props: { ingridients: productType[], setState: React.Dispatch<any> }) => {\n    function toogleItem (id : string ) {\n        // Define an action object\n        let action = {\n            type : 'toggle',\n            payload : id\n        }\n        // Pass action into the set state\n        props.setState(action);\n    }\n    return (\n        <section className=\"product_list_container \">\n            <ul className=\"products__list\">\n                {props.ingridients.map((el: any) => {\n                    return (\n                        <>\n                            <IngridentsItem key={el.itemId} itemId={el.id as string} name={el.name} toggle={toogleItem} isDone={el.isDone as boolean} />\n                        </>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import { NavLink } from \"react-router-dom\";\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n// ---------\n// If theres is no open shift at this time - return this component\n\nexport const EmptyShift = () => {\n    return (\n        <section className={`empty_shift_container container`}>\n        <span>There is no open shift</span>\n        {/* Link to shifth constructor */}\n        <NavLink className={`nav_link begin-shift`} to={\"create-new\"}>\n            Begin\n        </NavLink>\n    </section>\n    )\n}","import { productType } from \"../../../Redux/Types\";\n\n\ntype ActionType = {\n    type: string,\n    payload: string | productType[]\n}\n\nexport const Reducer  = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case \"toggle\" : {\n            return [\n                ...state.map((el: any) => {\n                    if(el.id === action.payload) {\n                        return {...el,isDone : !el.isDone};\n                    }\n                    return el\n                })\n            ]\n            }\n            case 'set-state' : {\n                return [...action.payload as productType[]]\n            }\n            default:\n                return state\n        }\n    }","// React, custom hooks imports\nimport React, { useEffect, useReducer } from \"react\";\nimport { useDispatch } from \"react-redux\";\n// Components \nimport { ProgressBar } from \"./ProgressBar\";\nimport { IngridientList } from \"./IngridientList\";\nimport { EmptyShift } from \"./EmtyShiftPage\";\n\n// Styles imports\nimport \"../../../../Assets/Styles/BlamkShift.css\";\nimport { blankShiftType, productType } from \"../../../../Redux/Types\";\n\n\n// Redux imports\nimport { closeCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\nimport { Reducer } from \"../../Reducers/Reducer\";\nimport { UIButton } from \"../../../../Components/Button\";\n\ntype currentShiftPropType = {\n    products: productType[],\n    shift: blankShiftType\n}\n\n\nexport const CurrentShift = React.memo((props: currentShiftPropType) => {\n    const dispatch: any = useDispatch();\n    // Get current shift ibject by TeamID\n    let [state, setState] = useReducer(Reducer, props.products as unknown as productType[])\n    // Use set state effect if we get a new data in props\n    // By default props.products is an empty array\n    useEffect(() => {\n        let action = {\n            type: \"set-state\",\n            payload: props.products\n        }\n        setState(action);\n    }, [props.products.length]);\n    // End shift handler\n    const endShift = function () {\n        dispatch(closeCurrentShiftByCompanyID(props.shift));\n    }\n\n\n    if (props.shift.shiftID?.length as number > 1) {\n        return (\n            <section className={`current_shift_container translate_animation`}>\n                <ProgressBar products={state} />\n                <IngridientList ingridients={state} setState={setState} />\n                <UIButton className=\"confirm_button\" text=\"End shift\" callback={endShift}/>\n            </section>\n        )\n    } else {\n        // Render empty shift Component\n        return (\n            <EmptyShift />\n        )\n    }\n\n})","\n// Define the props type for ShiftPreview component\ntype ShiftPreviewType = {\n    employee: string;\n    date: string;\n    count: number;\n    onClickHandler: (shiftID: string) => void;\n    shiftID: string | undefined;\n};\n\n/**\n * A component for displaying shift preview information.\n * @param props - The properties for the ShiftPreview component.\n * @returns The ShiftPreview component.\n */\nexport const ShiftPreview = (props: ShiftPreviewType) => {\n    return (\n        <li key={props.shiftID} className=\"passed_shift_preview_item\" onClick={() => props.onClickHandler(props.shiftID as string)}>\n            <span>Date: {props.date}</span>\n            <span>Employee: {props.employee}</span>\n            <span>Number of Positions: {props.count}</span>\n        </li>\n    );\n};","// Iport Rweact and Components\nimport { useNavigate } from \"react-router-dom\";\nimport { ShiftPreview } from \"./ShiftPreview\";\n// Redux imports and types\nimport { blankShiftType } from \"../../../../Redux/Types\";\n\n// Styles imports \nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n\nexport const ShiftsHistory = (props : { shifts : blankShiftType[]}) => {\n    const navigate = useNavigate()\n    // Navigate to specified shift in history by id\n    const onClickHandler = (id: string) => {\n        navigate(`id=${id}`)\n    }\n\n    if (props.shifts.length > 0) {\n        return (\n            <section className={`history_container translate_animation`}>\n\n                {props.shifts.map((el: blankShiftType) => {\n                    return (\n                        <ShiftPreview \n                        date={el.date} \n                        employee={el.employe} \n                        count={el.count} \n                        onClickHandler={onClickHandler} \n                        shiftID={el.shiftID} />\n                    )\n                })}\n            </section>\n        )\n    } else {\n        return (\n            <div id=\"empty_history\">There is no shift hgistory</div>\n        )\n    }\n\n}\n","// Components\nimport { CurrentShift } from \"../CurrentShiftPage/CurrentShift\";\nimport { ShiftsHistory } from \"../HistoryPage/ShiftsHistory\";\n\n// React hooks \nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Redux state and thunks\nimport { app_actions } from \"../../../../Redux/AppReducer\";\nimport {\n    getShiftsHistoryByCompanyID\n} from \"../../../../Redux/BlankShiftReducer\";\n\n// Custom Hooks\nimport { useProducts } from \"../CurrentShiftPage/useProducts\";\nimport { useNavbar } from \"./UseNabar\";\n\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { Preloader } from \"../Preloader\";\n\n\n\n// Main BlankShiftManager component\n// Container component that receives data for \n// the components current Shift (Object of the current shift) \n// and shiftHistory (Object displaying the history of closed shifts)\n\nexport const MainPage = () => {\n    const dispatch: any = useDispatch();\n    // Get TeamID from global state to fetch current blank shift data\n    let companyID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get an array of closed shits for <ShiftHistoy> component\n    let shifts = useSelector((state: Global_state_type) => state.blankShift.closedShifts);\n    // -------  \n    // Get shift object fro global state to pass him into <CurrentShift> Component\n    //  \n    // This function need to bi fixed (Deed to add fucntion thah will clodse current shift only by ID)\n    // -------\n    let shift = useSelector((state: Global_state_type) => state.blankShift.currentShift);\n    // GET IS FETCH FLAG\n    let isFetch = useSelector((state: Global_state_type) => state.App.isFetch);\n\n    useEffect(() => {\n        dispatch(getShiftsHistoryByCompanyID(companyID as string));\n    }, []);\n    // Get an aray of premixes objects from hook\n    let products = useProducts(companyID as string);\n\n\n    //Get a tuple from the navbar component and the current state of the currentShift variable\n    const [Navbar, shiftType] = useNavbar();\n\n    // Render <Preloader/> or content depending on isFetch boolean flag\n    if (!isFetch) {\n        return (\n            <section className={`blank_shift_container translate_animation`}>\n                {Navbar}\n                {/* Depending on the shift type, we display the corresponding component */}\n                {shiftType === 0 ? <CurrentShift products={products} shift={shift} /> : <ShiftsHistory shifts={shifts} />}\n            </section>\n        );\n    }\n    else {\n        return <Preloader />\n    }\n\n}\n\n","\nimport {  useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../../Redux/Store\"\nimport { useEffect } from \"react\"\nimport { getCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\"\nimport { productType } from \"../../../../Redux/Types\"\n\n\nexport const useProducts = (companyID : string) => {\n    const dispatch : any = useDispatch();\n\n    useEffect(() => {\n        dispatch(getCurrentShiftByCompanyID(companyID));\n    },[]);\n    \n    let products = useSelector((state: Global_state_type) => state.blankShift.currentShift.products);\n\n    products = products.map((el : productType) => {\n        return {\n            ...el,\n            isDone : false  \n        }\n    });\n    if(Array.isArray(products)) {\n        return products;\n    }\n    else\n    {\n        return [];\n    }\n};\n","import React, { useState } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\n\n// Custom hook for a navigation bar\nexport const useNavbar = () => {\n  // State for tracking the selected tab\n  const [shiftType, setShiftType] = useState(0);\n\n  // Event handler for tab changes\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setShiftType(newValue);\n    console.log(newValue);\n  };\n\n  // JSX for the navigation bar\n  const navbar = (\n    <Box sx={{ width: '100%', marginBottom: \"5px\" }}>\n      <Tabs value={shiftType} onChange={handleChange} sx={{}} >\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"Current Shift\" />\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"History\" />\n      </Tabs>\n    </Box>\n  );\n\n  // Returning the navigation bar JSX and the selected tab value\n  return [navbar, shiftType];\n};\n","\nimport {MainPage} from \"./Components/MainPage/MainPage\"\n\nconst PremixesApp = () => {\n    return (\n        <section>\n            <MainPage/>\n        </section>\n    )\n}\n\nexport default PremixesApp;"],"names":["ProgressBar","props","products","readyProducts","filter","item","isDone","percent","length","Number","_jsxs","className","children","_jsx","toFixed","IngridentsItem","console","log","itemId","href","name","onClick","toggle","IngridientList","toogleItem","id","action","type","payload","setState","ingridients","map","el","_Fragment","EmptyShift","NavLink","to","Reducer","state","CurrentShift","React","_props$shift$shiftID","dispatch","useDispatch","useReducer","useEffect","endShift","closeCurrentShiftByCompanyID","shift","shiftID","UIButton","text","callback","ShiftPreview","onClickHandler","date","employee","count","ShiftsHistory","navigate","useNavigate","concat","shifts","employe","MainPage","companyID","useSelector","App","user","teamID","blankShift","closedShifts","currentShift","isFetch","getShiftsHistoryByCompanyID","getCurrentShiftByCompanyID","Array","isArray","useProducts","Navbar","shiftType","useNavbar","setShiftType","useState","Box","sx","width","marginBottom","Tabs","value","onChange","handleChange","event","newValue","Tab","fontSize","color","label","Preloader","PremixesApp"],"sourceRoot":""}