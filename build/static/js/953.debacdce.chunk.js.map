{"version":3,"file":"static/js/953.debacdce.chunk.js","mappings":"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","sources":["Modules/ChecklistApp/CheckListPreview.tsx","Modules/ChecklistApp/Components/ChekListItem.tsx","Modules/ChecklistApp/Components/Hooks.tsx","Modules/ChecklistApp/Components/CheckLists.tsx","Modules/ChecklistApp/Components/DotsMenu.tsx","Modules/ChecklistApp/Components/CheclListPage.tsx","Components/Premixes/BlankList.tsx","Components/Ingridients/Premixes.tsx","Helpers/CustomHooks.tsx","Components/Ingridients/Composition.tsx","Components/Ingridients/ProductCalculator.tsx","Components/Ingridients/ProductDescription.tsx","Components/Ingridients/ProductCard.tsx","Modules/ChecklistApp/Components/Hooks..tsx","Components/Ingridients/Editor.tsx","Components/Ingridients/Menu.tsx","Components/Ingridients/Reducer.ts","Components/Ingridients/ProductCardContainer.tsx","Components/Ingridients/UseProductCard.tsx","Modules/KnowledjeBase/CoctrailCard.tsx","Modules/TeamApp/CreateTeam.tsx","webpack://bartend/./src/Assets/Styles/HomePage.module.css?cf67","Components/mainScreen.tsx","Components/NewProduct/NewIngridientSingleForm.tsx","Components/NewProduct/FirstStep.tsx","Components/NewProduct/NewProduct.tsx","Components/NewProduct/SecondStep.tsx","Modules/ChecklistApp/Components/NewCheckList.tsx","Modules/KnowledjeBase/ProductPreview.tsx","Modules/KnowledjeBase/CocktailList.tsx","Modules/KnowledjeBase/SpiritList.tsx","Modules/KnowledjeBase/PublicPremixes.tsx","Modules/KnowledjeBase/KnowledgeBaseContent.tsx","Modules/KnowledjeBase/KnowledgeBase.tsx","Modules/KnowledjeBase/Ingridient.tsx","Modules/Auth/LoginPage.tsx","Modules/Auth/RegistrationFormInput.tsx","Modules/Auth/Registration.tsx","Modules/PremixesApp/Components/CurrentShiftPage/ProgressBar.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridentItem.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridientList.tsx","Modules/PremixesApp/Components/CurrentShiftPage/EmtyShiftPage.tsx","Modules/PremixesApp/Reducers/Reducer.ts","Modules/PremixesApp/Components/CurrentShiftPage/CurrentShift.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftPreview.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftsHistory.tsx","Modules/PremixesApp/Components/MainPage/MainPage.tsx","Modules/PremixesApp/Components/CurrentShiftPage/useProducts.tsx","Modules/PremixesApp/Components/MainPage/UseNabar.tsx","Modules/PremixesApp/Premixes.tsx","Modules/PremixesApp/Components/HistoryPage/PassedShiftItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrroductItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrdocuctList.tsx","Modules/PremixesApp/Reducers/constructorReducer.tsx","Modules/PremixesApp/Components/ConstructorPage/CreateNewShiftControls.tsx","Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer.tsx","Helpers/InviteCodeGenerator.ts","Modules/TeamApp/Components/Description.tsx","Modules/TeamApp/ClanList.tsx","Modules/TeamApp/Components/JinTeamForm.tsx","Modules/TeamApp/Components/EmptyTeam.tsx","Modules/TeamApp/TeamPageContainer.tsx","Modules/TeamApp/Hooks/useTeam.tsx","Router/Routes.tsx","Router/Router.tsx"],"sourcesContent":["import { ReactJSXElement } from \"@emotion/react/types/jsx-namespace\";\nimport { NavLink } from \"react-router-dom\";\n\n\n\n\n\nexport const CheckListPreview = (props: { name: string, tasks: string[], id: string }) => {\n    let jsxTasks: ReactJSXElement[] = [];\n    function renderTasksPreview(tasks: string[]) {\n        if (tasks.length <= 4) {\n            for (let i = 0; i < tasks.length; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length > 4) {\n            for (let i = 0; i < 4; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length == 0) {\n            jsxTasks.push(<span className=\"preview__item--no-task\">No tasks added ...</span>)\n        }\n\n    }\n    renderTasksPreview(props.tasks);\n    return (\n        <li key={props.id} className=\"cheklist-preview__item\">\n            <NavLink key={props.id} to={`/check-lists/id=${props.id}`}>\n                <h3>{props.name}</h3>\n                {jsxTasks.map((el: ReactJSXElement) => {\n                    return (\n                        <>\n                            {el}\n                            <br />\n                        </>\n                    )\n                })}\n            </NavLink>\n\n        </li>\n    )\n}","// React,hooks\nimport { NavLink, useNavigate } from \"react-router-dom\"\n// Types\nimport { checkListType } from \"../../../Redux/CheckListReducer\"\nimport { CheckListPreview } from \"../CheckListPreview\";\n\n\nexport const ItemList = (props: { checkLists: checkListType[] }) => {\n    const navigate = useNavigate();\n\n    const onClickHandler = function () {\n        // navigate by click\n        navigate(\"/new-check-list\");\n    }\n    return (\n        <div className=\"single_check_list container\">\n            <ul className=\"checklis-list\">\n            {props.checkLists.map((el: checkListType) => {\n                return (\n                    <CheckListPreview name={el.name} tasks={el.tasks} id={el.id}/>\n                )\n            })}\n            </ul>\n            {/* If there is no existing cheklists propose to create */}\n            <button className=\"confirm_button\" \n            onClick={onClickHandler}>Добавить</button>\n        </div >\n    )\n}","\n// React,hooks\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useEffect } from \"react\";\n// Redux,thunks\nimport { checkListType, deleteChekListThunk, getCheckListsthunk } from \"../../../Redux/CheckListReducer\";\n// Types\n\n\n\n\nimport { Global_state_type } from \"../../../Redux/Store\";\n/**\n* @params none\n* \n* \n* Return a typple with specifik checklist object that contains \n* ist of tasks and handler to delete them\n* @returns [checklist,deleteHanler]\n*/\n\nexport const useTaskList = (): [checkListType | null, () => void] => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    let id = useLocation().pathname.split(\"=\")[1];\n    let checklist: checkListType | null = useSelector((state: Global_state_type) => {\n        let result = state.chcekLists.checkLists.find((el: checkListType) => el.id === id);\n        if (result) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    });\n    const deleteHandler = () => {\n        dispatch(deleteChekListThunk(id))\n        navigate(\"/check-lists\")\n    };\n    return [checklist, deleteHandler];\n}\n\n\n/**\n * \n * Return a list of checklists for current establishment\n * @returtn array checkListType[]\n */\nexport const useChecklistList = () => {\n    const dispatch: any = useDispatch();\n    // Get team id to fetch data by him\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Fetch data\n    useEffect(() => {\n        dispatch(getCheckListsthunk(teamID as string))\n    }, []);\n    let checkLists = useSelector((state: Global_state_type) => state.chcekLists.checkLists);\n    \n    return checkLists;\n}","// React,Components,ReactHooks\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { ItemList } from \"./ChekListItem\"\n// CustomHooks\nimport { useChecklistList } from \"./Hooks\";\n// Styles and Assets\nimport \"../../../Assets/Styles/CheckLists.css\"\nimport notFound from \"../../../Assets/Icons/nothing.png\";\n\nexport const CheckLists = () => {\n\n    let checklists = useChecklistList();\n\n    return (\n        <section className=\"check_lists_container container page_apperas_animation\">\n            <div className=\"ckeck-lists-content\">\n                {checklists.length > 0 ?\n                    <ItemList checkLists={checklists} />\n                    :\n                    <section className=\"check_lists_container__empty-check-list-container\">\n                         <img className=\"bigIcon\" src={notFound} alt=\"\" />\n                        <h3>\n                           \n                            There is no cheklists found\n                        </h3>\n                        <NavLink to={\"/new-check-list\"}className={\"check_lists__create-btn\"}>Create</NavLink>\n                    </section>\n                }\n            </div>\n\n        </section>\n    )\n}","import { Dispatch, useState } from \"react\"\nimport { checkListType, deleteChekListThunk } from \"../../../Redux/CheckListReducer\";\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\n\n\n// DEFINE A PROPS TYPE\ntype ChecklistDotsMenu = {\n    checklist: checkListType\n}\n\nexport const ChecklistDotsMenu: React.FC<ChecklistDotsMenu> = (props) => {\n    const navigate = useNavigate();\n    // Toggle isWindowOpen \n    let [isOpen, setIsOpen] = useState<boolean>(false);\n    const dispatch : any = useDispatch();\n    // Opening window togggler function \n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // Delete checklist \n    function deleteCheklist() {\n        // Delete\n        dispatch(deleteChekListThunk(props.checklist.id));\n        navigate(-1);\n    }\n\n    if (!isOpen) {\n        // Render menu icon \n        return (\n            <section className=\"dots-menu\" onClick={toggle}>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n\n            </section>\n        )\n\n    }\n    else {\n        // Opened menu\n        return (\n            <section className=\"menu-options\">\n              \n                <span onClick={deleteCheklist}>Delete</span>\n                <span onClick={toggle}>Close</span>\n\n            </section>\n        )\n    }\n}","// Assets\nimport React, { useState } from \"react\";\nimport menuIcon from \"../../../Assets/Icons/menu.png\"\n// Hooks\nimport { useTaskList } from \"./Hooks\";\n// Styles\nimport \"../../../Assets/Styles/CheckLists.css\"\nimport { ChecklistDotsMenu } from \"./DotsMenu\";\nimport { checkListType } from \"../../../Redux/CheckListReducer\";\n\nexport const Modal =  () => {\n    return (\n        <section className=\"modal\">\n            <span>Delete</span>\n            <button className=\"modal_btn\">Close</button>\n        </section>\n    )\n}\n// Define a props type\ntype ChecklistPropsType = {\n    checklist : checkListType\n}\n\nexport const CheckListPage = () => {\n    // Get checklist object amd delete hadler from hook\n    let [checklist, deleteHandler] = useTaskList();\n    let [isModal,setModal] = useState<boolean>(false);\n    function toggleModal () {\n        setModal(!isModal);\n    }\n    return (\n        <section className=\"single-check-list container {}\">\n           \n            <div className=\"check-list-controls\">\n              <ChecklistDotsMenu checklist={checklist as checkListType}/>\n            </div>\n\n            <ul className=\"tasks\">\n                {checklist?.tasks.map((el: string, index: number) => {\n                    return (\n                        <li className=\"tasks-item\">\n                            <div>\n                            <input className=\"tasks-item__checkbox\" type=\"checkbox\" />\n\n                            </div>\n                            <span>{index + 1 + \".\" + el}</span>\n                            <br />\n                        </li>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","\nimport { productType } from \"../../Redux/Types\";\nimport { NavLink } from \"react-router-dom\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\nimport empty from \"../../Assets/Icons/icons8-empty-90.png\"\nimport { parseElementNameToString } from \"../../Helpers/Helpers\";\n\n\n\nexport const PremixesList = (props: { blanks: productType[] ,dispatch : any,Navigate : (a : string) => any}) => {\n\n    if (props.blanks.length > 0) {\n        return (\n            <>\n                {props.blanks.map((el : productType) => {\n                    return (\n                        <div key={el.id} className=\"element\" onClick={() => {\n                            props.dispatch(productActions.setAcualProductCard(el))\n                            props.Navigate(\"/card/id=\" + el.id)\n                            }}>\n                        \n                            <NavLink to={\"/product/id=\" + el.id}>\n                            <span>{parseElementNameToString(el.name)}</span>\n                            </NavLink>\n                         \n                            <br />\n                          \n                        </div>\n                    )\n                })}\n            </>\n        )\n        \n              \n    }else{\n        return (\n            <div className=\"nothing_found\">\n            <img src={empty} className=\"emtyIcon\" alt=\"\" />\n            <h1>Список пуст</h1>\n        </div>\n        )\n    }\n}","// ----------------\n// REACT AND HOOKS\n// ----------------\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { useNavigate } from \"react-router-dom\";\n// ----------------\n// STYLES\n// ----------------\nimport \"../../Assets/Styles/Premixes.css\"\n// ----------------\n// IMPORT ICONS\n// ----------------\n// import searchIcon from \"../../Assets/icons8-search-100.png\";\nimport searchIcon from \"../../Assets/Icons/icons8-search-100.png\"\nimport backIcom from \"../../Assets/Icons/icons8-back-90.png\";\nimport addIcon from \"../../Assets/Icons/icons8-add-100.png\";\nimport backIconsLight from \"../../Assets/Icons/icons8-reply-arrow-100.png\";\nimport addIconLight from \"../../Assets/Icons/icons8-add-100 (1).png\";\nimport searchIconLight from \"../../Assets/Icons/icons8-search-100(1).png\";\n// ----------------\n// IMPORT COMPONENTS\n// ----------------\nimport { PremixesList } from \"../Premixes/BlankList\";\n// ----------------\n// IMPORT HELPERS\n// ----------------\nimport { useProductFilter, useProducts } from \"../../Helpers/CustomHooks\";\n\n\n\n\nexport const Premixes = () => {\n    \n    const dispatch: any = useDispatch();\n    const isDarkTheme = useSelector((state: Global_state_type) => state.App.isDarktheme);\n    const [products,filterProducts] = useProductFilter(\"\");\n    let [isSearch, setIsSearch] = useState(false);\n    const Navigate = useNavigate();\n\n    return (\n        <section className={isDarkTheme ? \"container translate_animation DarkTheme\" : \"container translate_animation LightTheme\"}>\n            {isSearch ? \n            <div className=\"search_controls\">\n                \n                <input className=\"search\" onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {filterProducts(e.currentTarget.value)}}></input>\n                <button id=\"search_controls__button\" onClick={() => {setIsSearch(false)}}>Отмена</button>\n            </div>\n         :\n                <ul className=\"controls\">\n                    <li className=\"menu-item\" onClick={() => {Navigate(-1)}}>\n                        <span>Назад</span>\n                        <img className=\"icon\" src={isDarkTheme ? backIcom : backIconsLight} id=\"back\"  alt=\"\" />\n                    </li>\n                    <li className=\"menu-item\" onClick={() => {Navigate(\"/add\")}}>\n                      <span >Добавить</span> \n                        <img className=\"icon\" src={isDarkTheme ? addIcon : addIconLight}  alt=\"\" />\n                    </li>\n                    <li  className=\"menu-item\"onClick={() => { setIsSearch(!isSearch) }} >\n                        <span >Поиск</span>\n                        <img className=\"icon\" src={isDarkTheme ? searchIcon : searchIconLight} alt=\"\" />\n\n                    </li>\n\n\n                </ul>\n            }\n\n            <section className=\"conteiner translate_animation\">\n                <PremixesList dispatch={dispatch} Navigate={Navigate} blanks={products || []} />\n\n            </section>\n        </section>\n    )\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { productType } from \"../Redux/Types\";\nimport { set } from \"firebase/database\";\nimport { getProductsByCompanyID } from \"../Redux/ProductReduxer\";\n\n\nexport const useProducts = () => {\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        return state.premixes.premixes\n    })\n    if(products.length > 0) {\n        return products\n    }\n    else{\n        return []\n    }\n}\n\nexport const useProductFilter = (initial : string) : [productType[],(e : string) => void] => {\n    const [filter,setFilter] = useState(initial)\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        if(filter.length === 0) {\n            return state.premixes.premixes\n        }\n        return state.premixes.premixes.filter((el : productType) => el.name.includes(filter))\n    })\n    const updateFilter = (value : string) => {\n        setFilter(value)\n    }\n    return [products,updateFilter]\n    \n}\n\nexport const useWindowInnerWidth = () => {\n    const [windowWidth,setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        const handleResizeWindow = () => setWindowWidth(window.innerWidth)\n        window.addEventListener(\"resize\",handleResizeWindow)\n        return () => {\n            window.removeEventListener(\"resize\",handleResizeWindow)\n        }\n    },[])\n    return windowWidth\n}\n\nexport const useTheme = () => {\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return theme\n}\n\nexport const useDebounce = (callback : (...args:any) => {},delay : number,value : any)=> {\n    const timer = useRef(null);\n    const dispatch : any = useDispatch();\n    const DebounceCallback = useCallback((...args : any) => {\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        else {\n            setTimeout(() => {\n                console.log(\"DISPATHED\")\n               dispatch(callback(value));\n            },delay)\n        }\n    },[callback,delay]);\n\n    console.log(DebounceCallback)\n    return DebounceCallback;\n}\n\n\n/**\n * \n * @param initialValue initial value for boolean flag\n * @returns [actualState,TogglerFunction]\n */\nexport const UseToggle = (initialValue : boolean) : [boolean,() => void] => {\n\n    let [state,setState] = useState<boolean>(initialValue);\n    \n    function toggle () {\n        setState(!state);\n    }\n\n    return [state,toggle];\n}","// React,ReactHooks\nimport {useState } from \"react\"\n// Redux,ThunkActions\nimport { productType } from \"../../Redux/Types\";\n// Helpers\nimport { parseComposition } from \"../../Helpers/Helpers\";\n\n\n// DECLARE PROPS TYPE\n\n// -----------------\ntype ProductCompositionType = {\n    isEditMode: boolean,\n    composition: {}[],\n    card: productType\n}\n// -----------------\n\n\n/**\n * A component displaying the composition of the current product. \n * And also the product card editor depending on the isEditMode prop\n *\n * @param props {isEditMode : boolean,composition {}[] ,card}\n * \n * @returns React.Element\n */\nexport const ProductComposition = (props: ProductCompositionType) => {\n    // Hide or show component state\n    let [isOpen, setIsOpen] = useState<boolean>(false);\n\n    // Show|Hide toggler function\n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // If isOpen === false render the Show button\n    if (!isOpen) {\n        return (\n            <button onClick={toggle}>Composition</button>\n        )\n    }\n\n    else {\n        return (\n            <section>\n                <button onClick={toggle}>Composition</button>\n                <p className=\"composition\">{parseComposition(props.composition)}</p>\n            </section>\n        )\n    }\n\n\n}","// React,ReactHooks\nimport React, { useState } from \"react\";\n// Helpeers\nimport { calculateAndParseIntoComponent } from \"../../Helpers/Helpers\";\n// Types\nimport { productType } from \"../../Redux/Types\";\n\n\n\nexport const ProdicuCalculater = (props : { product: productType | null}) => {\n    // Multiplier value\n    let [value, setValue] = useState(1);\n    console.log(props.product);\n    // Input Handler\n    // Function to calculate value of prdoduct composition\n    function calculate(event: React.SyntheticEvent<HTMLInputElement>) {\n        if (event.currentTarget.value.length < 1) {\n            setValue(1)\n        } else {\n            setValue(Number(event.currentTarget.value))\n        }\n    };\n\n    return (\n      \n            <section className=\"product-card__calculator\">\n                <input type=\"number\" placeholder=\" How much do we need?\" onChange={calculate} />\n                <br />\n                <div className=\"calculated_result\">\n                    {calculateAndParseIntoComponent(props.product?.composition as {}[], value)}\n                </div>\n            </section>\n\n\n    )\n}","// React,ReactHooks\nimport { Dispatch, useState } from \"react\"\n// Styles and Assets\nimport \"../../Assets/Styles/PeoduxtCard.css\";\n// Redux,Reducers\nimport { useDispatch } from \"react-redux\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\n\n\n// Define a `props` type to component\ntype propsType = {\n    setState: Dispatch<{ type: string, payload: any }>,\n    isEditMode: boolean,\n    description: string\n}\n\n/**\n * \n * @param props propsType\n * ProductCard Description component\n * Render actual card description and set them if 'EditMode' is enabled\n * \n * @returns React.Ellement\n */\n\nexport const ProductDescription = (props: propsType) : React.ReactElement => {\n    // Is Description Opened\n    // Shoow <p></p> ellement if true anoterwose just render the Button\n    let [isOpened, setIsOpened] = useState<boolean>(false);\n\n    const dispatch: any = useDispatch();\n    // Description open Toggler function\n    function toggle() {\n        setIsOpened(!isOpened);\n    }\n    // OnChange event handler that we use in textarea if props.isEditMode === true\n    function onChangeHandler(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    }\n \n    if (!isOpened) {\n        // Render Description or textarea to Edit descritpion\n        return (\n            <section >\n                <button onClick={toggle}>Dscription</button>\n                {!props.isEditMode ? <p className=\"composition\">{props.description}</p> :\n                    <textarea\n                        onChange={onChangeHandler}\n                        className=\"description-textarea\"\n                        value={props.description}></textarea>}\n            </section>\n        )\n    }\n    else {\n        return (\n            <button onClick={toggle}>Description</button>\n        )\n    }\n\n}","// TYPES\nimport { productType } from \"../../Redux/Types\"\n// Components\nimport { ProductComposition } from \"./Composition\"\nimport { ProdicuCalculater } from \"./ProductCalculator\"\nimport { ProductDescription } from \"./ProductDescription\"\n\n// DEFINE A PROP TYPE\n// ------------------\ntype CardPropsType = {\n    isEditMode : {isEditMode : boolean},\n    setEditMode : any,\n    card : productType,\n}\n// -----------------\n\n/**\n * Render product card page if isEditMode equals to false in parent component\n * @param props CardPropdType\n * @returns React.Element\n */\n\nexport const ProductCard : React.FC<CardPropsType> = (props : CardPropsType) => {\n    return (\n        <>\n            <ProductDescription isEditMode={props.isEditMode.isEditMode} setState={props.setEditMode} description={props.card?.description as string} />\n            <ProductComposition card={props.card as productType} isEditMode={props.isEditMode.isEditMode} composition={props.card?.composition as {}[]} />\n            <ProdicuCalculater product={props.card} />\n        </>\n    )\n\n}","// React,Hooks\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\"\n\n// Redux,Redux-thunks\n\ntype inputEventType = React.SyntheticEvent<HTMLInputElement>;\ntype setStateType = Dispatch<SetStateAction<string>>;\n\n/**\n//  * INPUTS HOOK\n * \n * @param value default value <string>\n * @param placeholder input placeholder text <string>\n * @returns InputElement : input element : <ReactNode>\n *          state : actual state value : <string>\n *          setState : Dispatch<SetStateAction<string>>\n */\n\nexport const useInput = (value: string = \"\", placeholder: string): [ReactNode, string,setStateType] => {\n    // Input state set default from params\n    const [state, setState] = useState(\"\");\n\n    // On changeHandler tah will be passed into input \n    function onChangeHandler(event: inputEventType) {\n        setState(event.currentTarget.value);\n    };\n\n    let InputElement = <input placeholder={placeholder} value={state} onChange={onChangeHandler} maxLength={100}/>;\n\n    // Return typple with 3 elements [input,state,setState]\n    return [InputElement, state, setState];\n\n\n}\n\n/**\n * VALIDATOR HOOK\n * \n * @param regExp pattern to validate\n * @returns tupple [isError,ErrorText,vslidate function]\n * \n */\nexport const useValidator = (regExp : RegExp) : [boolean,string,(val : string) => void] => {\n    // Boolean error flag\n    let [isError,setError] = useState<boolean>(false);\n    // error message text\n    let [errorText,setErrorText] = useState<string>(\"\");\n    \n    // Define a pattern to validate frpm params\n    let pattern = regExp;\n\n    function validate (value : string) {\n        if(!pattern.test(value))\n        {\n            setError(true);\n            setErrorText(\"Error : invalid input\");\n        }\n    }\n\n    return [isError,errorText,validate]\n}","// React,ReactHooks\nimport { useDispatch } from \"react-redux\"\n// Redux,Actions\nimport { AnyAction, Dispatch } from \"redux\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\n// Types\nimport { ReactNode, useState } from \"react\";\nimport { productType } from \"../../Redux/Types\"\n// Custom hooks\nimport { useInput } from \"../../Modules/ChecklistApp/Components/Hooks.\";\n\n\n// DECLARE PROP TYPE\n\n// -----------------\ntype EditorPropType = {\n    card: productType,\n}\n\n/** \n * Product card editor component\n * \n * Render only when the isEdit flag is true\n * \n * @param props card : prdocuctType\n * @returns ReactEllement\n */\n\nexport const Editor: React.FC<EditorPropType> = (props: EditorPropType) => {\n    const dispatch: Dispatch<AnyAction> = useDispatch();\n    // Textarea onChange handler\n    function onChange(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    };\n    // Delete handler function \n    function deleteHandler(event: React.SyntheticEvent<HTMLSpanElement>) {\n        dispatch(productActions.deleteComponent(event.currentTarget.id));\n    };\n    // Compoennts to be added state from useInput custom Hook\n    let [input, setInput] = useInput(\"Name\", \"Type name\");\n    // New ingridient state\n    let [key, setKey] = useState(\"\");\n    let [value, setValue] = useState(\"\");\n    // Add component Handler\n    function addComponent() {\n        dispatch(productActions.addComonent({ [key]: value }));\n        setValue(\"\");\n        setKey(\"\");\n    }\n    \n    return (\n        <section className=\"editor\">\n            <h3 className=\"editor__tittle\">Description : </h3>\n            <textarea\n                onChange={onChange}\n                className=\"editor__desctiption-textarea\"\n                // Get actual value from store -> prpops\n                value={props.card.description}>\n            </textarea>\n            <h3 className=\"editor__tittle\">Composition : </h3>\n\n            <ul className=\"editor__composition\">\n                {props.card.composition.map((el: {}, index: number, array: {}[]) => {\n                    return (\n                        <li className=\"editor__item\">\n                            <span>{Object.keys(el)[0] + \" : \"}</span>\n                            <span >{Object.values(el)[0] as ReactNode}</span>\n                            {/* DELETE BUTTON */}\n                            <span\n                                id={Object.keys(el)[0]}\n                                className=\"editot__component__delete\"\n                                onClick={deleteHandler}>Delete</span>\n                            <br />\n                        </li>)\n                })}\n            </ul>\n            {/* Render inputs */}\n            <div className=\"editor__newcomponent-input\">\n                {/* KEY INPUT */}\n                <input type=\"text\"\n                 value={key} placeholder=\"Name\" \n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setKey(e.currentTarget.value)}}/>\n                 {/* VAKUE INPUT */}\n                <input type=\"text\"\n                 value={value} \n                 placeholder=\"Value\"\n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setValue(e.currentTarget.value)}} />\n            </div>\n            <button onClick={addComponent}>Add</button>\n        </section>\n    )\n}","// React,ReactHooks\nimport { Dispatch } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\";\n// Redux,Reducers\nimport { deleteProductCrad } from \"../../Redux/ProductReduxer\";\nimport { UseToggle } from \"../../Helpers/CustomHooks\";\nimport { useDispatch } from \"react-redux\";\n// Types\nimport { productType } from \"../../Redux/Types\";\nimport { premixAPI } from \"../../services/Firebase/PremixAPI\";\n\n\n// PROPS TYPE\n// --------------\ntype DotsMenuPropsType = {\n    setEditMode: Dispatch<{ type: string, payload: any }>,              //EditMode toggler\n    isEditMode: boolean,\n    card: productType                                                  //Prdouct data\n}\n// --------------\n\n\n\n/**\n * DOTS   MENU COMPONENT : \n * \n * Contains isEditMode toggling function and delete product card\n * \n * @param props DotsMenuPropsType {Dispatch,isEditMode,card}\n * @returns React.Ellement\n */\nexport const DotsMenu = (props: DotsMenuPropsType) => {\n\n    // Get boolean state and toggler function from hook\n    // If isOpen === true render menu with containig items anotherwise\n    // Render three dots menu icon\n    let [isOpen, toggle] = UseToggle(false);\n\n    // Ge id of prdocut card\n    const productID = useLocation().pathname.split(\"=\")[1]\n\n    // Navigate function\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    // Delete button handller\n    function deleteProduct() {\n        dispatch(deleteProductCrad(productID));\n        navigate(\"/premixes\");\n    }\n\n    // Eidt mode toggler\n    function setEditMode() {\n        props.setEditMode({ type: \"toggleEditMode\", payload: undefined }); //FIX THIS `UNDEFINED` LATER\n        toggle();\n    }\n    // SaveChanges handler \n    function saveChanges () {\n        premixAPI.updatePrdocurCard(props.card);\n        props.setEditMode({type : 'toggleEditMode',payload : undefined});\n        toggle();\n    }\n    if (!isOpen) {\n        return (\n            <section className=\"dots-menu\" onClick={toggle}>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n\n            </section>\n        )\n\n    }\n    else {\n        return (\n            <section className=\"menu-options\">\n                {props.isEditMode && <span className=\"save-changes\" onClick={saveChanges}>{\"Save changes\"}</span>}\n                <span onClick={setEditMode}>{props.isEditMode ? \"Cancel Editing\" : \"Edit\"}</span>\n                <span onClick={deleteProduct}>Delete</span>\n                <span onClick={toggle}>Close</span>\n\n            </section>\n        )\n    }\n\n}\n","const TOGGLE_EDIT_MODE = \"toggleEditMode\";\n\n\ntype ActionType = {\n    type : string,\n    payload : any\n}\ntype initialStateType = {\n    isEditMode : boolean\n}\n\nexport const Reducer = (state : initialStateType,action : ActionType) => {\n    switch(action.type) {\n        case TOGGLE_EDIT_MODE : {\n            return {\n                ...state,\n                isEditMode : !state.isEditMode\n            }\n        }\n        default : \n            return state\n    }\n}","// React,React hooks\nimport { Suspense, useReducer } from \"react\";\n// Components\nimport { ProductCard } from \"./ProductCard\";\nimport { Editor } from \"./Editor\";\nimport { Preloader } from \"../../Modules/PremixesApp/Components/Preloader\";\nimport { DotsMenu } from \"./Menu\";\n// Styles and Assets\nimport \"../../Assets/Styles/PeoduxtCard.css\";\n// Redux \nimport { Reducer } from \"./Reducer\";\nimport { productType } from \"../../Redux/Types\";\n// Custom hooks\nimport { useProductCard } from \"./UseProductCard\";\n\n\n\n\n/**\n * productCard Container Compoennt\n * @returns React.Ellement\n */\n\nexport const ProductCardContainer = () => {\n    // Get data from hook\n    let card = useProductCard();\n    // General reducer for all chil compoennt\n    // Toogle card Editing mode\n    let [isEditMode, setEditMode] = useReducer(Reducer, { isEditMode: false });\n    // Check if card not equals to null\n    if (card) {\n        return (\n\n            <section className={`product_card container translate_animation`}>\n\n                <h1>{card?.name}</h1>\n                {/* Pass Edit mode toggler into Menu component props */}\n                <DotsMenu isEditMode={isEditMode.isEditMode} setEditMode={setEditMode} card={card as productType} />\n                {isEditMode.isEditMode ?\n                // Render Editor compomnent if Editing\n                    <Editor card={card as productType} />\n                    :\n                // Or render prdocut card information\n                    <ProductCard isEditMode={isEditMode} setEditMode={setEditMode} card={card} />\n                }\n\n            </section>\n\n        )\n    }\n    // Anotherwise reutn Preloader\n    else {\n        return <Preloader />\n    }\n\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\"\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { setProductCardThunk } from \"../../Redux/ProductReduxer\";\n\n\nexport const useProductCard = () => {\n    const dispatch : any = useDispatch();\n    // Get current location and select product id from him\n    let location = useLocation().pathname.split(\"=\")[1];\n    let products = useSelector((state : Global_state_type) => state.premixes.actualProductCard);\n\n    \n    useEffect(() => {\n        dispatch(setProductCardThunk(location));\n    },[]);\n    if(products)\n    {\n        return products;\n    }\n    else\n    {\n        return null;\n    }\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { cocltalCardType, getCocktailByID } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CoctailCard.css\"\n\nexport const CocktailCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCocktailByID(location))\n    },[])\n    let currentCocktail = useSelector((state : Global_state_type) => state.knowledgeBase.currentCocktail) as cocltalCardType\n\n \n    return (\n        <article className=\"cocktail_card_container translate_animation\">\n           \n            <img id=\"cocktail_photo\" src={currentCocktail?.strDrinkThumb} alt=\"\" />\n            <h2 className=\"coctail-card__tittle\">{currentCocktail?.strDrink}</h2>\n        \n            <article className=\"coctail-card__info\">\n            <span className=\"info__glass\">Glass : {currentCocktail?.strGlass }</span>\n            <span className=\"info__category\">Category IBA : {currentCocktail?.strIBA ? currentCocktail.strIBA : \"не входит в IBA\"}</span>\n            <span className=\"info__category\">Category : {currentCocktail?.strCategory}</span>\n            <h3 className=\"info__subtittle\">Techonlogy : </h3>\n            <p className=\"info__technology\">{currentCocktail?.strInstructions}</p>\n            <h3 className=\"info__composition\">Composition : </h3>\n            {currentCocktail ? Object.keys(currentCocktail.composition).map((el : string,index : number) => {\n                return (\n                    <span>{el + \" : \" + Object.values(currentCocktail.composition)[index]}</span>\n                )\n            }) : null}\n            </article>\n           \n        </article>\n    )\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clanActions, createClanThunk } from \"../../Redux/TeamReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CreateTeam.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport {initializeThunk} from \"../../Redux/AppReducer\"\n\nexport const CreateTeam = () => {\n    const dispatch : any = useDispatch()\n    const navigate = useNavigate()\n    const newTeam = useSelector((state : Global_state_type) => state.clans.newTeam)\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const onSubmit = () => {\n        dispatch(createClanThunk(newTeam as {newTeamName : string,newTeamDescription : string,newTeamAvatar : ArrayBuffer},\n            user.userID as string,user.userName as string))\n           \n        dispatch(initializeThunk())\n        navigate(\"/home\")\n    }\n    \n    const onNameChangeHandler = (e : React.SyntheticEvent<HTMLInputElement>) => {\n        dispatch(clanActions.setNewClanName(e.currentTarget.value))\n    }\n    const onDescriptionChangeHandler = (e : React.SyntheticEvent<HTMLTextAreaElement>) => {\n        dispatch(clanActions.setNewTeamDiescription(e.currentTarget.value))\n    }\n    return (\n        <section className={\"create_team_container translate_animation container\"}>\n            <input type=\"text\" placeholder=\"Type name\" onChange={onNameChangeHandler}/>\n            <h3>Description :</h3>\n            <textarea name=\"\" id=\"\" onChange={onDescriptionChangeHandler} ></textarea>\n         \n            <button onClick={onSubmit}>Create Team</button>\n        </section>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"main_page_navigation\":\"HomePage_main_page_navigation__aiF1m\",\"home_page_container\":\"HomePage_home_page_container__5i8ay\",\"home_page_info\":\"HomePage_home_page_info__GShzs\"};","import { useNavigate } from \"react-router-dom\";\nimport styles from \"../Assets/Styles/HomePage.module.css\"\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\n\nimport docIcon from \"../Assets/Icons/icons8-document-64.png\"\nimport teamicon from \"../Assets/Icons/icons8-team-96.png\"\nimport chemistryIcon from \"../Assets/Icons/icons8-chemistry-100(1).png\"\nimport sheldue from \"../Assets/Icons/icons8-edit-96.png\"\nimport { useWindowInnerWidth } from \"../Helpers/CustomHooks\";\n\nexport const Header = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n\n    return (\n        <section className=\"header\">\n          \n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Premixes</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>Sheldue</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n\n        </section>\n\n\n    )\n}\n\nconst MainPageNavigation = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return (\n        <section className=\"main_page_navigation\">\n            \n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Premixes</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>Sheldue</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n        </section>\n    )\n}\n\nexport const HomePage = () => {\n    const profile = useSelector((state: Global_state_type) => {\n        return state.App.user\n    })\n\n    const windowWidth = useWindowInnerWidth()\n    return (\n        <section className={`${styles.home_page_container} ${styles.translate_animation}`}>\n            <div className={styles.home_page_info}>\n                <h1 id={styles.userName}>Hi,{profile.userName}!\n\n                </h1>\n                <span>{profile.team ? profile.team : null}</span>\n                <br />\n\n\n\n            </div>\n            <MainPageNavigation /> \n\n\n        </section>\n    )\n}","\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\"\nimport { useDispatch } from \"react-redux\";\nimport {newCardActions } from \"../..//Redux/NewCardReducer\";\nimport \"../../Assets/Styles/NewProduct.css\"\n\n\nexport const NewIngridientSingleForm = () => {\n    const dispatch: any = useDispatch()\n    // VALIDATION SHEMA\n    const validationSchema = yup.object().shape({\n        key: yup.string().typeError(\"This field should be a string\").min(1).max(20).required(\"This field is Required\"),\n        value: yup.number().typeError(\"This field should be a digit\").min(1).max(20).required(\"This field is Required\")\n\n    })\n    // SUBMIT FORMS\n    const Submit = (values: { key: string, value: string }) => {\n        let newIngridient = { [values.key]: values.value }\n        console.log(newIngridient)\n        dispatch(newCardActions.addNewIngridient(newIngridient))\n    }\n    return (\n        <div className=\"single_input\">\n            <Formik initialValues={{ key: \"\", value: \"\" }}\n                enableReinitialize={true}\n                validateOnBlur={true}\n                onSubmit={Submit}\n            //   validationSchema={validationSchema}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                    return (\n                        <div className=\"input_container\">\n                            <input type=\"text\" id=\"key\" autoComplete=\"off\" onChange={handleChange} />\n                            <input type=\"number\" id=\"value\" autoComplete=\"off\" onChange={handleChange} />\n\n                            <button\n                                //@ts-ignore \n                                onClick={handleSubmit} id=\"add_component\" type=\"submit\">+</button>\n\n                        </div>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"../../Assets/Styles/NewProduct.css\"\nimport { newCardActions } from \"../../Redux/NewCardReducer\";\nimport { NewIngridientSingleForm } from \"./NewIngridientSingleForm\";\nimport styles from \"../../Assets/Styles/ProductConstructor.module.css\"\n\nexport const FirstStep = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n\n\n    // ADD NEW INPUTS FOR NEW COMPONENT\n    const addInput = (e: React.MouseEvent<HTMLElement>) => {\n        setForms([...forms, <NewIngridientSingleForm />])\n\n    }\n    // SET NAME\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        dispatch(newCardActions.setNewName(e.currentTarget.value))\n    }\n    // ARRAY OF FORMS FOR ADDING NEW COMMPOENT OBJET\n    let [forms, setForms] = useState([\n        <NewIngridientSingleForm />\n    ])\n    // Visibility toggler\n    function toggleVisibility () {\n        dispatch(newCardActions.toggleVisibility());\n    }\n    return (\n        <section className={props.isDarkTheme ? \"new_premix_first_step container DarkTheme\" : \"container LightTheme\"}>\n            <input type=\"text\" placeholder=\"Наименование\" id=\"name\" onChange={(e) => { onNameChange(e) }} />\n            <div className=\"visibility-input\">\n                    <span>Visible for all : </span>\n                    <input id=\"visibility-input\" onChange={toggleVisibility} type=\"checkbox\" />\n                </div>\n            <section className=\"compound\">\n                <h2>СComposition : </h2>\n                <div className=\"compound_inputs\">\n                    {forms}\n                </div>\n\n                <button onClick={addInput} >Add ingrideint</button>\n            </section>\n\n        </section>\n    )\n}","\nimport \"../../Assets/Styles/NewProduct.css\"\nimport { FirstStep } from \"./FirstStep\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport const NewProduct = (props : {isDarkTheme : boolean} ) => {\n\n    const location = useLocation().pathname.split(\"/\")[1]\n    const navigate = useNavigate()\n    console.log(location)\n    return (\n        <section className=\"container translate_animation\">\n            <FirstStep isDarkTheme={props.isDarkTheme}/>\n            <button className=\"confirm_button\" onClick={() => {navigate(\"/add-step-two\")}} id=\"next_button\">Next</button>\n        \n        </section>\n    )\n}","import React from \"react\";\nimport { createNewIngridientCard, newCardActions } from \"../../Redux/NewCardReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../Assets/Styles/SecondStep.css\"\nimport backArrow from \"../../Assets/Icons/icons8-back-90.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { productType } from \"../../Redux/Types\";\nimport { NewProduct } from \"./NewProduct\";\n\nexport const SecondStep = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n\n    // SET DESCRITION\n    const setDescription = (e: React.FormEvent<HTMLTextAreaElement>) => {\n        dispatch(newCardActions.setNewDescription(e.currentTarget.value))\n    }\n    const newProduct = useSelector((state: Global_state_type) => state.newCard)\n    const teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    const navigate = useNavigate()\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects(obj: object) {\n            let resultObject = Object.keys(obj).map((el: string, index: number, array: any[]) => {\n                return {\n                    [el]: Object.values(obj)[index]\n                }\n            });\n            return resultObject;\n        }\n        console.log(convertObjectToArrayOfObjects(newProduct));\n        if (teamID) {\n            let card: productType = {\n                name: newProduct.name,\n                description: newProduct.description,\n                composition: convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID: teamID,\n                isVisibleForAll : newProduct.isVisibleForAll\n\n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        } else {\n            navigate(\"/clan-list\")\n        }\n\n\n    }\n    return (\n        <div className={props.isDarkTheme ? \"second_step container translate_animation DarkTheme\" : \"second_step container translate_animation LightTeheme\"}>\n            <div className=\"controls_item\" onClick={() => { navigate(-1) }}>\n                <span>Back</span>\n                <img className=\"icon\" src={backArrow} />\n            </div>\n\n            <h2>Технология приготовления : </h2>\n            <textarea name=\"Description\" id=\"description\" onChange={setDescription}></textarea>\n            <button className=\"confirm_button\" onClick={createnewProduct}>Создать</button>\n\n        </div>\n    )\n}","// Custom Hooks\nimport { useInput, useValidator } from \"./Hooks.\";\n// React,ReactHooks\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// API functions\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\n// Styles and Assesets\nimport add from \"../../../Assets/Icons/icons8-done-150.png\"\nimport \"../../../Assets/Styles/CheckLists.css\"\n// Types\nimport { Global_state_type } from \"../../../Redux/Store\";\n// Route\nimport { CHECK_LIST } from \"../../../Router/Routes\";\n\n\nexport const NewCheckList = () => {\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    let navigate = useNavigate();\n\n    // Get inputs from Hook \n    let [nameInput, nameValue] = useInput(\"Untitled\", \"Type name\");\n    let [taskInput, taskValue, setInput] = useInput(\"\", \"Task\");\n    // Define tasks array\n    let [tasks, setTasks] = useState<string[]>([]);\n    // On Error State if input value is not valid\n\n    // Define a RegExp to validate inputs\n    let [onError, errorMessage, validate] = useValidator(/^[a-zA-Z0-9]+$/);\n\n    // Push new task into \"tasks\" array\n    const onAddClickHandler = () => {\n        // Validate input by rgExp\n        validate(taskValue);\n        if (!onError) {\n            setTasks([...tasks, taskValue]);\n            setInput(\"\");\n        }\n\n    }\n    const createCheckList = () => {\n        // Check if task name are valid\n        validate(nameValue);\n        if (!onError) {\n            //  If valid add new checklist\n            CheckListsAPI.addCheckList(teamID as string, tasks, nameValue);\n            // Movae bavk to check-lists route\n            navigate(CHECK_LIST);\n        }\n\n    }\n    return (\n        <section className=\"new_check_list_container container translate_animation\">\n            <h1>\n                {/* Finish editing */}\n                <button onClick={createCheckList} id=\"add_ckeck_list\">Done</button>\n            </h1>\n            {/* Cheklist Name Input */}\n            {nameInput}\n            <ul className=\"task_list\">\n                {/* Render the added tasks array */}\n                {tasks.map((task: string) => <li key={task}>{task}</li>)}\n            </ul>\n            {/* New task Input */}\n            <div className=\"new_check_list_controls\">\n                {taskInput}\n                <button className=\"confirm_button\" onClick={onAddClickHandler}>\n                    <img src={add} alt=\"\" />\n                </button>\n                <br />\n                {/* Error message (Renders if input conyain errors) */}\n                <span>{onError ? errorMessage : null}</span>\n            </div>\n        </section>\n    )\n}\n\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport icon from \"../../Assets/Icons/icons8-cocktail-96.png\";\n\ninterface IPreview {\n    name: string,\n    img: string | null,\n    id: string,\n    type : string\n}\n\n\nexport const ProductPreview: React.FC<IPreview> = (props) => {\n    const navigate = useNavigate();\n    // Set icon dependin on props.img\n    let src = props.img ? props.img : icon;\n    // onClick hadler navigate to full product information by product id\n    // from html id attr\n    function goToProductCard(event: React.SyntheticEvent<HTMLDivElement>) {\n        switch(props.type){\n            case \"premix\" : {\n                navigate(`/card/id=${event.currentTarget.id}`);\n                break;\n            }\n            case \"spirit\" : {\n                navigate(\"/ingridient/id=\" + event.currentTarget.id);\n                break;\n            }\n            case \"cocktail\" : {\n                navigate(\"/cocktail/id=\" + event.currentTarget.id);\n                break;\n            }\n        }\n       \n    }\n    return (\n        <div key={props.id} id={props.id} className=\"cocktail_card\" onClick={goToProductCard}>\n            <img className=\"cocktail_preview\" src={src} alt=\"\" />\n            <span>{props.name}</span>\n        </div>\n    )\n}\n","import React ,{useEffect}from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { cocltalCardType, getCocktailsByName, getCocktailsThunk } from \"../../Redux/KnowledgeBaseReducer\";\nimport { ProductPreview } from \"./ProductPreview\";\n\n\nexport const CoctailList = () => {\n    let dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getCocktailsThunk())\n    }, [])\n    let cocktailsFromState : cocltalCardType[] = useSelector((state: Global_state_type) => state.knowledgeBase.cocktails as cocltalCardType[]);\n\n    function searchByName(e: React.SyntheticEvent<HTMLInputElement>): void {\n\n        dispatch(getCocktailsByName(e.currentTarget.value));\n\n    }\n\n\n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <section className=\"filters\">\n                <input type=\"text\"  placeholder=\"Search by name\" onChange={searchByName}/>\n            </section>\n            <div className=\"list\">\n            {cocktailsFromState?.map((cocktail : cocltalCardType) => {\n                return (\n                    <div key={cocktail.idDrink}>\n                          <ProductPreview type=\"cocktail\"name={cocktail.strDrink} id={cocktail.idDrink} img={cocktail.strDrinkThumb}/>\n                    </div>\n                 \n                )\n            })}\n            </div>\n          \n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSpiritsThunk, spiritType } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\nimport \"../../Assets/Styles/CocktailList.css\"\nimport { ProductPreview } from \"./ProductPreview\";\n\nexport const SpiritList = () => {\n    const dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getSpiritsThunk())\n    }, [])\n    let spirits = useSelector((state: Global_state_type) => state.knowledgeBase.spirits)\n \n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <div className=\"list\">\n                {spirits?.map((el: spiritType) => {\n                    return (\n                      <ProductPreview name={el.displayName} id={el.ID} img={el.image} type=\"spirit\"/>\n                    )\n                })}\n            </div>\n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getPublicPremixes } from \"../../Redux/ProductReduxer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { productType } from \"../../Redux/Types\";\n\nimport { ProductPreview } from \"./ProductPreview\";\n\nexport const PremixesList : React.FC = () => {\n    // Get dispatch \n    const dispatch : any = useDispatch();\n    useEffect(() => {\n        dispatch(getPublicPremixes());\n    },[])\n    // Get premixes from state\n    const state = useSelector((state : Global_state_type) => state.premixes.premixes);\n\n    return (\n        <section className=\"list\">\n            {state.map((el : productType) => {\n                return (\n                    <ProductPreview type=\"premix\" name={el.name} id={el.id as string} img={null}/>\n                )\n            })}\n        </section>\n    )\n}","import React from \"react\";\nimport { CoctailList } from \"./CocktailList\";\nimport { SpiritList } from \"./SpiritList\";\nimport { premixAPI } from \"../../services/Firebase/PremixAPI\";\nimport { PremixesList } from \"./PublicPremixes\";\n\nexport const KnowledgeBaseContent = (props : {value : number}) => {\n    \n    switch(props.value){\n        case 0 : {\n            return (\n                <CoctailList/>\n            )\n        }\n        case 1 : {\n            return (\n                <SpiritList/>\n            )\n        }\n        default : \n            return (\n                <PremixesList/>\n            )\n    }\n}\n","import React, { useEffect } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\nimport \"../../Assets/Styles/CocktailList.css\"\nimport { KnowledgeBaseContent } from \"./KnowledgeBaseContent\";\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\n\n\n\n\nexport const KnowledgeBase = () => {\n\n  \n    const [value, setValue] = React.useState(0);\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n      \n    };\n\n    return (\n        <section className=\"knwoledge_base_container container\">\n            <h2>Knowledge base</h2>\n            <Box sx={{width: '100%',marginBottom : \"5px\" }}>\n                <Tabs value={value} onChange={handleChange} sx={{}} >\n                    <Tab sx={{width : \"33%\",fontSize : \"14px\",color : \"white\"}} label=\"Coktails\" />\n                    <Tab  sx={{width : \"33%\",fontSize : \"14px\",color :\"white\"}}  label=\"Spirits\" />\n                    <Tab  sx={{width : \"33%\",fontSize : \"14px\",color :\"white\"}}  label=\"Premixes\" />\n                </Tabs>\n            </Box>\n            <KnowledgeBaseContent value={value}/>\n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { getCurrentIngridient } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const IngridientCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCurrentIngridient(location))\n    },[])\n    let currentIngridient = useSelector((state : Global_state_type) => state.knowledgeBase.currentSpirit)\n    return (\n        <section className=\" container spirit_card translate_animation\">\n            <figure>\n            \n            <img id=\"cocktail_photo\" src={currentIngridient?.image} alt=\"\" />\n            <figcaption><h2>{currentIngridient?.displayName}</h2></figcaption>  \n            </figure>\n            <article>\n\n            <h4>Описание : </h4>\n            <p>\n                {currentIngridient?.definition}\n            </p>\n        \n            <span>Технология произодства : </span>\n            <p>{currentIngridient?.production}</p>\n            </article>\n         \n        </section>\n    )\n}","import { useState } from \"react\";\nimport logo from \"../../Assets/Icons/bartendLogo.png\"\nimport { Formik } from \"formik\";\nimport \"../../Assets/Styles/Login.css\"\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginByEmailAndPassword, signInWithGooglePopUp } from \"../../Redux/AppReducer\";\nimport showPass from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePass from \"../../Assets/Icons/icons8-hide-password-100.png\"\nimport { loginValidationShema } from \"../../Helpers/Helpers\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const LoginPage = () => {\n    const dispatch: any = useDispatch()\n    const [hidePassword, setHidePassword] = useState(true);\n    let error = useSelector((state: Global_state_type) => state.App.errorMessage);\n\n    const onShowPasswordHandler = () => {\n        if (hidePassword) {\n            setHidePassword(false)\n        } else {\n            setHidePassword(true)\n        }\n    }\n\n    //Login by email & password\n    const Submit = (values: { email: string, password: string }) => {\n\n        dispatch(loginByEmailAndPassword(values.email, values.password))\n    }\n    function GogleSignIn() {\n        dispatch(signInWithGooglePopUp());\n    }\n    return (\n        <section className=\"login_page_container translate_animation\">\n\n            <div className=\"login_form\">\n                <img src={logo} alt=\"\" className=\"logo\" />\n                <Formik initialValues={{\n                    email: \"\",\n                    password: \"\"\n                }}\n                    enableReinitialize={true}\n                    validateOnBlur={true}\n                    onSubmit={Submit}\n                    validationSchema={loginValidationShema}>\n                    {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                        return (\n                            <section className=\"LoginByEmailAndPassword\">\n                                <h1 className=\"login-form__tittle\">Login</h1>\n\n                                <input id=\"email\" autoComplete=\"off\" type=\"text\" name=\"email\" onChange={handleChange} placeholder={\"Email\"} onBlur={handleBlur} value={values.email} />\n\n                                <br />\n                                <span className=\"spanError\">{touched.email ? errors.email : null}</span>\n                                <br />\n                                <div className=\"input_container\">\n                                    <input autoComplete=\"off\" id=\"passwordInput\" type={hidePassword ? \"password\" : \"text\"} name=\"password\" onChange={handleChange} placeholder={\"Password\"} onBlur={handleBlur} value={values.password} />\n                                    <div className=\"show\" onClick={onShowPasswordHandler}><img id=\"passwordShow\" src={hidePassword ? showPass : hidePass} alt=\"\" /></div>\n                                </div>\n                                <br />\n                                <span className=\"spanError\">{touched.password ? errors.password : null}</span>\n                                <button id=\"loginButton\" type=\"submit\"\n                                    //@ts-ignore\n                                    onClick={handleSubmit} disabled={false}>Login</button>\n                                <br />\n                                {/* GOGGLE AUTH  */}\n                                <button onClick={GogleSignIn} className=\"google-auth\">Sign in with Google</button>\n                                <h3>или</h3>\n                                <NavLink to=\"/registration\" style={{ \"fontSize\": \"x-large\", \"color\": \"rgb(242, 122, 67)\" }}>Create account</NavLink>\n                                <br />\n\n                            </section>\n                        )\n                    }}\n                </Formik>\n                {error && <span className=\"errorMessage\">{error}</span>}\n            </div>\n        </section>\n    )\n}   ","\n// Define Props Type\ntype registrationFormType = {\n    touched: boolean | undefined,\n    handleChange : (e : React.ChangeEvent<any>) => void,\n    errors : string | undefined,\n    type : string,\n    id : string,\n    callback? : () => {},\n\n}\n/**\n * This component return input and span component containig error message\n * If error was thrown\n * \n * @param props registrationFormType\n * @returns React.Ellemet\n */\nexport const RegistrationFormInput: React.FC<registrationFormType> = (props : registrationFormType) => {\n    return (\n        <>\n            <input type={props.type} id={props.id} autoComplete=\"off\" onChange={props.handleChange} placeholder={props.id} />\n            <span className=\"onInputError\">{props.touched ? props.errors : null}</span>\n        </>\n    )\n}\n","// React,ReactHooks\nimport { useState } from \"react\";\n\n// Components\nimport { RegistrationFormInput } from \"./RegistrationFormInput\";\n\n// API funcions,Helpers\nimport { validationShema } from \"../../Helpers/Helpers\";\nimport { authApi } from \"../../services/Firebase/AuthAPI\";\nimport { FirebaseError } from \"firebase/app\";\n\n// Styles and Assets\nimport \"../../Assets/Styles/Registration.css\"\nimport showPasswordIcon from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePasswordIcon from \"../../Assets/Icons/icons8-hide-password-100.png\"\n\n// Formik\nimport { Formik } from \"formik\"\n\n\n\n/**\n * New user registration component.\n * Uses the Formik library for form control and validation\n * \n * @returns React.Ellement\n */\nexport const Registration = () => {\n\n    // Show hide password boolean flag\n    let [isPasswordHided, setPasswordHided] = useState(false);\n    // Error message state\n    let [error, setError] = useState<string>(\"\")\n\n    // Create user function \n    const Submit = async (values: { nickName: string, email: string, password: string, repeatPassword: string }) => {\n        // Try to create user \n        await authApi.createUserWithEmailAndPassword(values.email, values.password, values.nickName)\n            .catch((ex: FirebaseError) => {\n                // If error was throwed set error message\n                setError(ex.message.split(\"(\")[1].split(\")\")[0]);\n            });\n    }\n    // Show hode password toggler function\n    function togglePassword() {\n        setPasswordHided(!isPasswordHided);\n    }\n    return (\n        <section className=\"create_the_team_container\">\n            <h1>Create account</h1>\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ nickName: \"\", companyName: \"\", email: \"\", password: \"\", repeatPassword: \"\" }}\n                onSubmit={Submit}\n                // Formik Validation Shema imported from Helpers\n                validationSchema={validationShema}\n                validateOnBlur={true}\n\n            >\n                {({ errors, touched, handleChange, handleBlur, handleSubmit }) => {\n                    return (\n                        <div className=\"create_team_inputs translate_animation\">\n                            <span className=\"onInputError\">{error}</span>\n                            <RegistrationFormInput type=\"text\" touched={touched.nickName} id={\"nickName\"} handleChange={handleChange} errors={errors.nickName} />\n                            <RegistrationFormInput type=\"text\" id=\"email\" touched={touched.email} handleChange={handleChange} errors={errors.email} />\n\n                            {/* Password input with show password button */}\n                            <div className=\"passwordFirstInput\">\n                                <RegistrationFormInput \n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                                id=\"password\" \n                                touched={touched.password} \n                                errors={errors.password} \n                                />\n                                \n                                {/* Show - hide password toggler */}\n                                <img id=\"passwordToggle\" src={isPasswordHided ? showPasswordIcon : hidePasswordIcon} onClick={togglePassword} alt=\"\" />\n                            </div>\n                            <span className=\"onInputError\"> {touched.password ? errors.password : null}</span>\n                            <RegistrationFormInput\n                                touched={touched.repeatPassword}\n                                errors={errors.repeatPassword} id=\"repeatPassword\"\n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                            />\n\n                            <button\n                                // @ts-ignore \n                                onClick={handleSubmit} id=\"submit_reg\" type=\"submit\">Create account</button>\n                        </div>\n                    )\n                }}\n            </Formik>\n\n\n        </section>\n    )\n}\n\n","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Types\nimport { productType } from \"../../../../Redux/Types\";\n\ntype PropsType = {\n    products: productType[]\n}\n\n\nexport const ProgressBar = (props: PropsType) => {\n\n    let { products } = props;\n    // Here we get the percentage and number of finished ingredients for the progress bar\n    let readyProducts = products.filter((item: any) => item.isDone === true);\n    let percent = 100 / products.length * Number(readyProducts.length);\n    return (\n\n        <div className=\"progress_bar\">\n            <span>{readyProducts.length + \"/\" + products.length}</span>\n            <span>{percent.toFixed(1) + \"%\"}</span>\n        </div>\n    )\n}","\n\ntype IngridientsListItem = {\n    name: string,\n    isDone: boolean,\n    itemId: string,\n    toggle: any\n}\n\nexport let IngridentsItem = (props: IngridientsListItem,) => {\n    console.log(props.itemId);\n    return (\n        <li key={props.itemId}>\n            <a href={\"#/card/id=\" + props.itemId}>\n                <span>{props.name}</span>\n            </a>\n            <span onClick={() => {\n                    console.log(\"Click\");\n                    props.toggle(props.itemId);\n                }}>{!props.isDone ? \"In progress\" : \"Done\"}</span>\n        </li>\n    )\n}\n","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Components\nimport { IngridentsItem } from \"./IngridentItem\";\n//Types\nimport { productType } from \"../../../../Redux/Types\";\n\n\n\nexport const IngridientList = (props: { ingridients: productType[], setState: React.Dispatch<any> }) => {\n    function toogleItem (id : string ) {\n        // Define an action object\n        let action = {\n            type : 'toggle',\n            payload : id\n        }\n        // Pass action into the set state\n        props.setState(action);\n    }\n    return (\n        <section className=\"product_list_container \">\n            <ul className=\"products__list\">\n                {props.ingridients.map((el: any) => {\n                    return (\n                        <>\n                            <IngridentsItem key={el.itemId} itemId={el.id as string} name={el.name} toggle={toogleItem} isDone={el.isDone as boolean} />\n                        </>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import { NavLink } from \"react-router-dom\";\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n// ---------\n// If theres is no open shift at this time - return this component\n\nexport const EmptyShift = () => {\n    return (\n        <section className={`empty_shift_container container`}>\n        <span>There is no open shift</span>\n        {/* Link to shifth constructor */}\n        <NavLink className={`nav_link begin-shift`} to={\"create-new\"}>\n            Begin\n        </NavLink>\n    </section>\n    )\n}","import { productType } from \"../../../Redux/Types\";\n\n\ntype ActionType = {\n    type: string,\n    payload: string | productType[]\n}\n\nexport const Reducer  = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case \"toggle\" : {\n            return [\n                ...state.map((el: any) => {\n                    if(el.id === action.payload) {\n                        return {...el,isDone : !el.isDone};\n                    }\n                    return el\n                })\n            ]\n            }\n            case 'set-state' : {\n                return [...action.payload as productType[]]\n            }\n            default:\n                return state\n        }\n    }","// React, custom hooks imports\nimport React, { useEffect, useReducer } from \"react\";\nimport { useDispatch } from \"react-redux\";\n// Components \nimport { ProgressBar } from \"./ProgressBar\";\nimport { IngridientList } from \"./IngridientList\";\nimport { EmptyShift } from \"./EmtyShiftPage\";\n\n// Styles imports\nimport \"../../../../Assets/Styles/BlamkShift.css\";\nimport { blankShiftType, productType } from \"../../../../Redux/Types\";\n\n\n// Redux imports\nimport { closeCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\nimport { Reducer } from \"../../Reducers/Reducer\";\n\ntype currentShiftPropType = {\n    products: productType[],\n    shift: blankShiftType\n}\n\n\nexport const CurrentShift = React.memo((props: currentShiftPropType) => {\n    const dispatch: any = useDispatch();\n    // Get current shift ibject by TeamID\n    let [state, setState] = useReducer(Reducer, props.products as unknown as productType[])\n    // Use set state effect if we get a new data in props\n    // By default props.products is an empty array\n    useEffect(() => {\n        let action = {\n            type: \"set-state\",\n            payload: props.products\n        }\n        setState(action);\n    }, [props.products.length]);\n    // End shift handler\n    const endShift = function () {\n        dispatch(closeCurrentShiftByCompanyID(props.shift));\n    }\n\n\n    if (props.shift.shiftID?.length as number > 1) {\n        return (\n            <section className={`current_shift_container translate_animation`}>\n                <ProgressBar products={state} />\n                <IngridientList ingridients={state} setState={setState} />\n                <button\n                    className={'confirm_button'}\n                    onClick={endShift}>End shift\n                </button>\n            </section>\n        )\n    } else {\n        // Render empty shift Component\n        return (\n            <EmptyShift />\n        )\n    }\n\n})","\n// Define the props type for ShiftPreview component\ntype ShiftPreviewType = {\n    employee: string;\n    date: string;\n    count: number;\n    onClickHandler: (shiftID: string) => void;\n    shiftID: string | undefined;\n};\n\n/**\n * A component for displaying shift preview information.\n * @param props - The properties for the ShiftPreview component.\n * @returns The ShiftPreview component.\n */\nexport const ShiftPreview = (props: ShiftPreviewType) => {\n    return (\n        <li key={props.shiftID} className=\"passed_shift_preview_item\" onClick={() => props.onClickHandler(props.shiftID as string)}>\n            <span>Date: {props.date}</span>\n            <span>Employee: {props.employee}</span>\n            <span>Number of Positions: {props.count}</span>\n            <span id={`showMore`} onClick={() => props.onClickHandler(props.shiftID as string)} >Show More</span>\n        </li>\n    );\n};","// Iport Rweact and Components\nimport { useNavigate } from \"react-router-dom\";\nimport { ShiftPreview } from \"./ShiftPreview\";\n// Redux imports and types\nimport { blankShiftType } from \"../../../../Redux/Types\";\n\n// Styles imports \nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n\nexport const ShiftsHistory = (props : { shifts : blankShiftType[]}) => {\n    const navigate = useNavigate()\n    // Navigate to specified shift in history by id\n    const onClickHandler = (id: string) => {\n        navigate(`id=${id}`)\n    }\n\n    if (props.shifts.length > 0) {\n        return (\n            <section className={`history_container translate_animation`}>\n\n                {props.shifts.map((el: blankShiftType) => {\n                    return (\n                        <ShiftPreview \n                        date={el.date} \n                        employee={el.employe} \n                        count={el.count} \n                        onClickHandler={onClickHandler} \n                        shiftID={el.shiftID} />\n                    )\n                })}\n            </section>\n        )\n    } else {\n        return (\n            <div id=\"empty_history\">There is no shift hgistory</div>\n        )\n    }\n\n}\n","// Components\nimport { CurrentShift } from \"../CurrentShiftPage/CurrentShift\";\nimport { ShiftsHistory } from \"../HistoryPage/ShiftsHistory\";\n\n// React hooks \nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Redux state and thunks\nimport { app_actions } from \"../../../../Redux/AppReducer\";\nimport {\n    getShiftsHistoryByCompanyID\n} from \"../../../../Redux/BlankShiftReducer\";\n\n// Custom Hooks\nimport { useProducts } from \"../CurrentShiftPage/useProducts\";\nimport { useNavbar } from \"./UseNabar\";\n\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { Preloader } from \"../Preloader\";\n\n\n\n// Main BlankShiftManager component\n// Container component that receives data for \n// the components current Shift (Object of the current shift) \n// and shiftHistory (Object displaying the history of closed shifts)\n\nexport const MainPage = () => {\n    const dispatch: any = useDispatch();\n    // Get TeamID from global state to fetch current blank shift data\n    let companyID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get an array of closed shits for <ShiftHistoy> component\n    let shifts = useSelector((state: Global_state_type) => state.blankShift.closedShifts);\n    // -------  \n    // Get shift object fro global state to pass him into <CurrentShift> Component\n    //  \n    // This function need to bi fixed (Deed to add fucntion thah will clodse current shift only by ID)\n    // -------\n    let shift = useSelector((state: Global_state_type) => state.blankShift.currentShift);\n    // GET IS FETCH FLAG\n    let isFetch = useSelector((state: Global_state_type) => state.App.isFetch);\n\n    useEffect(() => {\n        dispatch(getShiftsHistoryByCompanyID(companyID as string));\n    }, []);\n    // Get an aray of premixes objects from hook\n    let products = useProducts(companyID as string);\n\n\n    //Get a tuple from the navbar component and the current state of the currentShift variable\n    const [Navbar, shiftType] = useNavbar();\n\n    // Render <Preloader/> or content depending on isFetch boolean flag\n    if (!isFetch) {\n        return (\n            <section className={`blank_shift_container translate_animation`}>\n                {Navbar}\n                {/* Depending on the shift type, we display the corresponding component */}\n                {shiftType === 0 ? <CurrentShift products={products} shift={shift} /> : <ShiftsHistory shifts={shifts} />}\n            </section>\n        );\n    }\n    else {\n        return <Preloader />\n    }\n\n}\n\n","\nimport {  useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../../Redux/Store\"\nimport { useEffect } from \"react\"\nimport { getCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\"\nimport { productType } from \"../../../../Redux/Types\"\n\n\nexport const useProducts = (companyID : string) => {\n    const dispatch : any = useDispatch();\n\n    useEffect(() => {\n        dispatch(getCurrentShiftByCompanyID(companyID));\n    },[]);\n    \n    let products = useSelector((state: Global_state_type) => state.blankShift.currentShift.products);\n\n    products = products.map((el : productType) => {\n        return {\n            ...el,\n            isDone : false  \n        }\n    });\n    if(Array.isArray(products)) {\n        return products;\n    }\n    else\n    {\n        return [];\n    }\n};\n","import React, { useState } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\n\n// Custom hook for a navigation bar\nexport const useNavbar = () => {\n  // State for tracking the selected tab\n  const [shiftType, setShiftType] = useState(0);\n\n  // Event handler for tab changes\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setShiftType(newValue);\n    console.log(newValue);\n  };\n\n  // JSX for the navigation bar\n  const navbar = (\n    <Box sx={{ width: '100%', marginBottom: \"5px\" }}>\n      <Tabs value={shiftType} onChange={handleChange} sx={{}} >\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"Current Shift\" />\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"History\" />\n      </Tabs>\n    </Box>\n  );\n\n  // Returning the navigation bar JSX and the selected tab value\n  return [navbar, shiftType];\n};\n","\nimport {MainPage} from \"./Components/MainPage/MainPage\"\n\nexport const PremixesApp = () => {\n    return (\n        <section>\n            <MainPage/>\n        </section>\n    )\n}","// Comoponents,Hooks\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Redux\nimport { getPassedShiftByID } from \"../../../../Redux/BlankShiftReducer\";\n// Styles\nimport \"../../../../Assets/Styles/PassedShift.css\";\n// Types\nimport { productType } from \"../../../../Redux/Types\";\nimport { Global_state_type } from \"../../../../Redux/Store\";\n\n\nexport const PassedShift = () => {\n    const dispatch: any = useDispatch();\n    const navigate = useNavigate();\n\n    // Get shiftID from URL\n    const shiftID = useLocation().pathname.split(\"=\")[1];\n    \n    // Fetch passed shift data by ID\n    useEffect(() => {\n        dispatch(getPassedShiftByID(shiftID));\n    }, []); // Empty array of dependencies to run the effect only once\n\n    // Get passedShift data from Redux store\n    const PassedShift = useSelector(\n        (state: Global_state_type) => state.blankShift.passedShift\n    );\n\n\n    return (\n        <section className=\"container passed_shift_container translate_animation\">\n            <table>\n                {/* Display shift details */}\n                <tr>Смена от : <td>{PassedShift?.date}</td></tr>\n                <tr>Заготовщик :<td>{PassedShift?.employe}</td></tr>\n                <tr>Сделано позиций : <td>{PassedShift?.products.length}</td></tr>\n                {/* Display list of products */}\n                {PassedShift?.products.map((el: productType) => {\n                    return (\n                        <tr>\n                            <td>{el.name}</td>\n                        </tr>\n                    );\n                })}\n            </table>\n            {/* Go back link */}\n            <button onClick={() => { navigate(-1) }}>Back</button>\n        </section>\n    );\n};\n\n","\ntype ProdcustItemItemType = {\n    name: string,\n    isChecked: boolean,\n    id: string,\n    toggleFunction: (action: { type: string, payload: string }) => void\n}\n\n\nexport const ProdcustItem = (props: ProdcustItemItemType) => {\n\n    function toggle(id: string) {\n        props.toggleFunction({\n            type: 'toggle-item',\n            payload: id\n        })\n    }\n    return (\n        <li key={props.id}\n            // Is element checked flag\n            className={props.isChecked ? `checked_element` : `unchecked_element`}\n            onClick={() => { toggle(props.id) }} id={props.id}>\n\n            <span>{props.name}</span>\n        </li>\n    )\n};","// Coponents\nimport { ProdcustItem } from \"./PrroductItem\"\n// Types\nimport { productType } from \"../../../../Redux/Types\"\n\n\ntype prdocuctListType = {\n    products: productType[],\n    dispatch : (action : {type : string,payload : string}) => void\n}\n\n\nexport const ProductList = (props: prdocuctListType) => {\n    return (\n        <ul>\n            {props.products.map((el: productType) => {\n                 return (\n                    <ProdcustItem name={el.name} isChecked={el.checked as boolean} toggleFunction={props.dispatch} id={el.id as string} />\n                )\n            })}\n        </ul>\n    )\n}","import { productType } from \"../../../Redux/Types\"\n\n\ntype ActionType = {\n    type: string,\n    payload: any\n}\n\nexport const Reducer = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case 'toggle-item': {\n            console.log(action.payload)\n            return [\n                ...state.map((el: productType) => {\n                    if (el.id === action.payload) {\n\n                        return {...el,checked : !el.checked};\n                    }\n                    return el;\n                })\n            ]\n        }\n        case 'toggle-all': {\n            return [\n                ...state.map((el: productType) => {\n                    return { ...el, checked: !el.checked }\n                })\n            ]\n        }\n        case 'set-products' : {\n            console.log(action.payload)\n            return [\n                ...action.payload\n            ]\n        }\n        default:\n            return state;\n    }\n}","// REDUX\nimport { setCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\n// TYPES\nimport { productType, userPageType } from \"../../../../Redux/Types\";\n// React imports\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\n// IMPORT ICONS AND STYLES\nimport \"../../../../Assets/Styles/BlamkShift.css\"\nimport startIcon from \"../../../../Assets/Icons/icons8-start-64.png\"\n\n\n\n\ntype shiftConstructorTopPControls = {\n    products: productType[],\n    user: userPageType,\n    dispatchProducts : any\n}\n\n/**\n *  Check is all items was selected \n * @param products ArrayProductType\n * @returns boolean\n */\n\nfunction checkSelection (products : productType[]) {\n    let result = products.filter((el : productType) => el.checked == true);\n    if (result.length > 0) {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n};\n\n\nexport const CreateNewShiftControls = (props: shiftConstructorTopPControls) => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n    // Check if all items was selectrd or not\n    let isAllSelected = checkSelection(props.products);\n    // Create shift hanler ,get all data and creates new shift object and pass them into \n    // setCurrentShift thunk\n    const createShift = () => {\n        dispatch(setCurrentShiftByCompanyID(\n            props.user.team as string,\n            props.user.teamID as string,\n            props.products,\n            props.user.userName as string));\n\n        navigate(\"/begin-blank-shift\");\n\n    }\n    // Toggler fuction (comes from props)\n    function toggleAll () {\n        props.dispatchProducts({type : 'toggle-all'});\n    }\n    return (\n        <ul className={`controls`}>\n            <li \n                onClick={toggleAll}>\n                {isAllSelected ? \"Clear\" : \"Select all\"}\n            </li>\n            <li onClick={createShift}>Start\n                <img className=\"icon\" src={startIcon} alt=\"\" />\n            </li>\n\n        </ul>\n    )\n}","// React,React hooks\nimport { useEffect, useReducer } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n// Components\nimport { ProductList } from \"./PrdocuctList\";\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\n// Custom Hooks\nimport { Reducer } from \"../../Reducers/constructorReducer\";\n// Redux.Redux thunks\nimport { CreateNewShiftControls } from \"./CreateNewShiftControls\";\nimport { getProductsByCompanyID } from \"../../../../Redux/ProductReduxer\";\n\n\n\n\nexport const ShiftConstructorContainer = () => {\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    let products = useSelector((state: Global_state_type) => state.blankShift.productList);\n    const dispatch: any = useDispatch();\n    // Define a localal reducer with custom toggling state\n    let [state, dispatchProducts] = useReducer(Reducer, products);\n    // Get products and pass them into the local state\n    useEffect(() => {\n        dispatchProducts({\n            type: 'set-products',\n            payload: products\n        });\n    }, [products.length]);\n\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(user.teamID as string))\n    }, []);\n\n\n    return (\n        <section className=\"shift-constructor container\">\n            <CreateNewShiftControls products={state} user={user} dispatchProducts={dispatchProducts}/>\n            <ProductList products={state} dispatch={dispatchProducts}  />\n        </section>\n    )\n};","\n\nfunction generateInviteCode  ()  {\n    // Create empty symbols array \n    let symbols : string[] = [];\n    // InvideCode length\n    let codeLength = 20;\n\n    // Fill array with Uppercase letters,lowercase letters and numbers\n    for (let i = 65;i <= 90;i++)\n    {\n        symbols.push(String.fromCharCode(i));\n    }\n    for (let i = 97; i <= 122;i ++) {\n        symbols.push(String.fromCharCode(i));\n    }\n    for(let i = 48;i <= 57;i++)\n    {\n        symbols.push(String.fromCharCode(i));\n    }\n    \n    let resultCode : string = \"\"\n    for (let i = 0;i <= codeLength;i ++) {\n        resultCode += symbols[Math.ceil(Math.random() * symbols.length -1)];\n    }\n\n    return resultCode;\n\n}\n\nexport default generateInviteCode;","import React from \"react\";\n\n\n\n\nexport const Desctiption: React.FC<{ description: string, name: string }> = (props) => {\n    return (\n        <section className=\"team_page_info\">\n            <h2>{props.name}</h2>\n            <section className=\"team_page_info__team-description\">\n\n                <h3>Описание </h3>\n                <p>{props.description ? props.description : \"No description\"}</p>\n            </section>\n        </section>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { ClanType, getClanListByUserID, leaveTheTeam } from \"../../Redux/TeamReducer\";\nimport \"../../Assets/Styles/TeamPage.css\"\nimport \"../../App.css\"\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { app_actions } from \"../../Redux/AppReducer\";\nimport { string } from \"yup\";\nimport generateInviteCode from \"../../Helpers/InviteCodeGenerator\";\nimport { TeamModuleAPI } from \"../../services/Firebase/TeamAPI\";\nimport { Desctiption } from \"./Components/Description\";\nimport { userPageType, userType } from \"../../Redux/Types\";\n\ninterface ITeam {\n    user : userPageType\n    team : ClanType\n}\n\nexport const TeamPage : React.FC<ITeam> = (props) => {\n    const dispatch: any = useDispatch()\n\n    const LeaveTheTeamHandler = (team: string, userID: string, userName: string) => {\n        dispatch(leaveTheTeam(team, userID, userName))\n        dispatch(app_actions.setUserPage({ ...props.user, team: null, teamID: null }))\n    }\n    // Invitecode state\n    let [inviteCode, setInviteCode] = useState(\"\");\n    // Invite generator handler \n    function generateInviteCodeHandler() {\n        let code = generateInviteCode();\n        setInviteCode(code);\n        TeamModuleAPI.setInviteCode(props.team.teamID as string, code)\n    }\n    const users = props.team?.users.map((el, index) => <li key={index}>{el}</li>);\n\n    return (\n        <section className={`team_page container  translate_animation `}>\n\n\n\n\n            <Desctiption description={props.team?.description as string} name={props.team?.teamName as string} />\n            <section className=\"team_users\">\n                {/* <h3>Участники : </h3> */}\n                <ul>\n                    {users}\n                </ul>\n            </section>\n            <button id=\"leave_the_team\" onClick={() => {\n                LeaveTheTeamHandler(props.team.teamID as string, props.user.userID as string, props.user.userName as string)\n            }}>Покинуть Команду</button>\n\n            <button onClick={generateInviteCodeHandler}>Generate Invite Code</button>\n            {inviteCode.length > 0 && <span className=\"inviteCode\">{inviteCode}</span>}\n\n        </section>\n    )\n}\n\n// export const TeamPageContainer = (props: { isDarkTheme: boolean }) => {\n//     const dispatch: any = useDispatch()\n//     const user = useSelector((state: Global_state_type) => state.App.user)\n//     const pic = useSelector((state: Global_state_type) => state.clans.team?.teamAvatar)\n//     useEffect(() => {\n//         dispatch(getClanListByUserID(user.userID as string))\n//     }, [])\n\n//     return (\n//         <section className={\"team_page_container container\"}>\n//             {user.teamID ? <TeamPage  /> :\n//                 <div className={\"empty_team container \"}>\n//                     <h2>Вы не состоите в команде</h2>\n//                     <NavLink to={\"/join-team\"}>Присоединиться</NavLink>\n//                     <NavLink to={\"/create-team\"}>Создать команду</NavLink>\n//                 </div>\n\n//             }\n//             <img src={pic as string} alt=\"\" />\n//         </section>\n//     )\n// }","import { useNavigate } from \"react-router-dom\"\nimport \"../../../Assets/Styles/TeamPage.css\"\nimport { TeamModuleAPI } from \"../../../services/Firebase/TeamAPI\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../Redux/Store\"\nimport { useState } from \"react\"\nimport { Dispatch } from \"redux\"\nimport { app_actions } from \"../../../Redux/AppReducer\"\nimport { clanActions } from \"../../../Redux/TeamReducer\"\n\n\n\nexport const JoinTeamForm = () => {\n    // Get navigate\n    let navigate = useNavigate();\n    // Get dispatch\n    const dispatch: Dispatch = useDispatch();\n    // Get App state\n    const { errorMessage, isError, user } = useSelector((state: Global_state_type) => state.App);\n    // Define local state\n    let [code, setCode] = useState(\"\");\n    // Submit Handler\n    async function onSubmit(event: React.SyntheticEvent<HTMLFormElement>) {\n        event.preventDefault();\n        let result = await TeamModuleAPI.joinTeamByInviteCode(code, user.userID as string, user.userName as string);\n        if (typeof result === \"string\") {\n            console.log(result);\n            dispatch(app_actions.setErrorMessage(result));\n            dispatch(app_actions.setErrorState(true));\n        }\n        else {\n            dispatch(clanActions.setTeam(result));\n            navigate(\"home\");\n        }\n    }\n    // On Chanhe handler\n    async function onChange(event: React.SyntheticEvent<HTMLInputElement>) {\n        setCode(event.currentTarget.value);\n    }\n\n    return (\n        <>\n            {/* If has error render the erro message */}\n            {isError && <span className=\"errorMessage\">{errorMessage}</span>}\n            <form className=\"invite-team-form\" onSubmit={onSubmit} action=\"\">\n                <input className=\"invite-form__input\" value={code} onChange={onChange} type=\"text\" name=\"invite-code\" placeholder=\"Invite code\" />\n                <button >Join</button>\n            </form>\n        </>\n    )\n}","import { NavLink, useNavigate } from \"react-router-dom\"\nimport \"../../../Assets/Styles/TeamPage.css\"\n\nimport { JoinTeamForm } from \"./JinTeamForm\"\n\n\nexport const EmptyTeam = () => {\n\n\n    return (\n\n        <div className={\"empty_team container \"}>\n            <h2 className=\"emty-team__tittle\">You dosen`t have any team</h2>\n            <h2 className=\"invite-code__tittle\">Type invite code to join any team</h2>\n            <JoinTeamForm />\n            {/* <NavLink to={\"/join-team\"}>Присоединиться</NavLink> */}\n            <h2>Or you can create your own team</h2>\n            <NavLink className=\"create-team\" to={\"/create-team\"}>Create Team</NavLink>\n        </div>\n\n\n\n    )\n\n\n}","// React,React-redux\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n// Custom hooks\nimport { useTeamPage } from \"./Hooks/useTeam\";\n// Styles\n// ....\n// Types and interfaces\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { ClanType } from \"../../Redux/TeamReducer\";\n// Components\nimport { TeamPage } from \"./ClanList\";\nimport { EmptyTeam } from \"./Components/EmptyTeam\";\n\n\n\n/**\n * Team Module container\n * Contains all users width teams interaction functionality\n * \n * @returns React.Ellement\n */\nexport const TeamPageContainer: React.FC = () => {\n    // Get team page fron hook\n    let team = useTeamPage();\n    // Get user data\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    // If user Belongs to some kind of team Render Team information page\n    if (user.teamID) {\n        return <TeamPage user={user} team={team as ClanType} />\n    }\n    // If user does not beloong to any team Render EmptyTeam Page\n\n    else {\n        return <EmptyTeam />\n    }\n\n} ","import { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { getClanListByUserID } from \"../../../Redux/TeamReducer\";\n\nexport const useTeamPage = () => {\n    // Get dispatch\n    const dispatch : any = useDispatch();\n    // Get user from state\n    const userID  = useSelector((state : Global_state_type) => state.App.user.userID);\n    // Fetch team list\n    useEffect(() => {\n        dispatch(getClanListByUserID(userID as string));\n    },[]);\n    // get Team from state \n    let team = useSelector((state : Global_state_type) => state.clans.team);\n    \n    \n    return team;\n\n}","// -------------------------------------------\n// \n//.............................................THIS FILE CONTAINS AN ARRAY MATCHING ADDRESS \n//                                              STRINGS WITH THEIR CORRESPONDING COMPONENTS\n//                                              THESE ROUTES ARE USED BY THE FILE Router.tsx\n// -------------------------------------------\n\n// ---------- IMPORT REACT COMPOENTS\n\nimport { Navigate } from \"react-router-dom\";\nimport { CheckLists } from \"../Modules/ChecklistApp/Components/CheckLists\";\nimport { CheckListPage } from \"../Modules/ChecklistApp/Components/CheclListPage\";\nimport { Premixes } from \"../Components/Ingridients/Premixes\";\nimport { ProductCardContainer } from \"../Components/Ingridients/ProductCardContainer\";\nimport { CocktailCard } from \"../Modules/KnowledjeBase/CoctrailCard\";\nimport { CreateTeam } from \"../Modules/TeamApp/CreateTeam\";\nimport { HomePage } from \"../Components/mainScreen\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { NewProduct } from \"../Components/NewProduct/NewProduct\";\nimport { SecondStep } from \"../Components/NewProduct/SecondStep\";\nimport { NewCheckList } from \"../Modules/ChecklistApp/Components/NewCheckList\";\nimport { KnowledgeBase } from \"../Modules/KnowledjeBase/KnowledgeBase\";\nimport { IngridientCard } from \"../Modules/KnowledjeBase/Ingridient\";\nimport { LoginPage } from \"../Modules/Auth/LoginPage\";\nimport { Registration } from \"../Modules/Auth/Registration\";\nimport { PremixesApp } from \"../Modules/PremixesApp/Premixes\";\nimport { PassedShift } from \"../Modules/PremixesApp/Components/HistoryPage/PassedShiftItem\";\nimport { ShiftConstructorContainer } from \"../Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer\";\nimport { TeamPageContainer } from \"../Modules/TeamApp/TeamPageContainer\";\n\n\n// ---------- ROUTES STRINGS\nexport const SHIFT_MANAGER = '/shiftManager/*'\nexport const HOME = \"/home\"\nexport const COCKTAIL_CARD = \"/cocktail/:id\"\nexport const PREMIX_LIST = \"/premixes\"\nexport const ADD_PRODUCT = \"/add\"\nexport const PRODUCT_CARD = \"/card/:id\"\nexport const LOG_OUT = \"/logOut\"\nexport const REGISTRATION = \"/registration\"\n// export const NO_MATCH_ROUTE = \"*\"\nexport const BLANK_SHIFT = \"/blank-shift/*\"\nexport const STEP_2 = \"add-step-two\"\nexport const NEW_BLANK_SHIFT = \"/shiftManager/create-new\"  \nexport const CHECK_LISTS = \"/check-lists\"\nexport const PASSED_SHIFT = \"shiftManager/:id\"\nexport const CLAN_LISTS = \"/clan-list\"\nexport const CREATE_TEAM = \"/create-team\"\nexport const JOIN_TEAM = \"/join-team\"\nexport const NEW_CHECK_LIST = \"/new-check-list\"\nexport const CHECK_LIST = \"/check-lists/:id\"\nexport const KNIWLEDGE_BASE = \"knowledge-base\"\nexport const INGRIDIENT = \"/ingridient/:id\"\nexport const HISTORY = '/blank-shift/history'\n\n\n// PRIVATE ROUTES ARRAY\n// These routes are available only to authorized users\n// If an unauthorized user attempts to access, they are redirected to the login page\n\nexport const PRIVATE_ROUTES : ROUTE[] = [\n    {\n        path : HISTORY,\n        element : <h1>History</h1>\n    },\n    {\n        path : HOME,\n        element : <HomePage/>\n    },\n    {\n        path : COCKTAIL_CARD,\n        element : <CocktailCard/>\n    },\n    {\n        path : CREATE_TEAM,\n        element : <CreateTeam/>\n    },\n    {\n        path : SHIFT_MANAGER,\n        element : <PremixesApp/>\n    },\n    {\n        path : CHECK_LIST,\n        element : <CheckListPage/>\n    },\n    {\n        path : PASSED_SHIFT,\n        element : <PassedShift/>\n    },\n    {\n        path : BLANK_SHIFT,\n        element : <PremixesApp/>\n    },\n    {\n        path : PREMIX_LIST,\n        element : <Premixes/>\n    },\n    {\n        path : PRODUCT_CARD,\n        element : <ProductCardContainer/>\n    },\n    {\n        path : NEW_BLANK_SHIFT,\n        element : <ShiftConstructorContainer/>\n    },\n    {\n        path : CHECK_LISTS,\n        element : <CheckLists/>\n    },\n    // {\n    //     path : NO_MATCH_ROUTE,\n    //     element : <Navigate to=\"/home\" />\n    // },\n    {\n        path : ADD_PRODUCT,\n        element : <NewProduct isDarkTheme={true}/>\n    },\n    {\n        path : STEP_2,\n        element : <SecondStep isDarkTheme={true}/>\n    },\n    {\n        path : CLAN_LISTS,\n        element : <TeamPageContainer/>\n    },\n    {\n        path : NEW_CHECK_LIST,\n        element : <NewCheckList/>\n    },\n    {\n        path : KNIWLEDGE_BASE,\n        element : <KnowledgeBase/>\n    },\n    {\n        path : INGRIDIENT,\n        element : <IngridientCard/>\n    }\n]\n// PUBLICK ROUTES ARRAY\n// This routes are accessible for all users includeing not authiorized users\n// \nexport const PUBLICK_ROUTES : ROUTE [] = [\n    {\n        path : LOG_OUT,\n        element : <LoginPage/>\n    },\n    // {\n    //     path : NO_MATCH_ROUTE,\n    //     element : <Navigate to={\"/logOut\"}/>\n    // },\n    {\n        path : REGISTRATION,\n        element : <Registration/>\n    }\n\n]","\n// ---------- REACT & REACT HOOKS\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ---------- REDUX\nimport { Global_state_type } from \"../Redux/Store\";\n\n// ---------- IMPORT PROVATE & PUBLICK ROUND & ROUTE INTERFACE\nimport { PRIVATE_ROUTES, PUBLICK_ROUTES } from \"./Routes\";\nimport { ROUTE } from \"../Redux/Types\";\n\n// The router component iterates over the routes array and returns a route component\n//  with the corresponding react component. if user is not authorized iterates over PUBLKICK_ROUTES array\n// anotherwise over PRIVATE_ROUTES\n\n\nconst Router = React.memo(() => {\n    // Get Auth state from redux\n    const isAuth = useSelector((state: Global_state_type) => { return state.App.isAuth })\n\n    if (isAuth) {\n        // If authorized map only in PRIVATE_ROUTES\n        return (\n            <div className=\"content\">\n                <Routes>\n                    {PRIVATE_ROUTES.map((route : ROUTE) => {\n                        return (\n                            <Route key={route.path} element={route.element} path={route.path}/>\n                        )\n                    })}\n                </Routes>\n           \n            </div>\n        )\n    }\n\n    else {\n        return (\n            <>\n                <Routes>\n                    {PUBLICK_ROUTES.map((route : ROUTE) => <Route key={route.path} path={route.path} element={route.element}/>)}\n                </Routes>\n            </>\n        )\n    }\n\n})\n\nexport default Router;"],"names":["CheckListPreview","props","jsxTasks","tasks","length","i","push","_jsx","className","children","renderTasksPreview","_jsxs","NavLink","to","concat","id","name","map","el","_Fragment","ItemList","navigate","useNavigate","checkLists","onClick","CheckLists","checklists","useChecklistList","dispatch","useDispatch","teamID","useSelector","state","App","user","useEffect","getCheckListsthunk","chcekLists","src","alt","ChecklistDotsMenu","isOpen","setIsOpen","useState","toggle","deleteChekListThunk","checklist","CheckListPage","deleteHandler","useTaskList","useLocation","pathname","split","find","isModal","setModal","index","type","PremixesList","blanks","productActions","Navigate","parseElementNameToString","Premixes","isDarkTheme","isDarktheme","products","filterProducts","initial","filter","setFilter","getProductsByCompanyID","premixes","includes","value","useProductFilter","isSearch","setIsSearch","onChange","e","currentTarget","backIcom","ProductComposition","parseComposition","composition","ProdicuCalculater","_props$product","setValue","console","log","product","placeholder","event","Number","calculateAndParseIntoComponent","ProductDescription","isOpened","setIsOpened","isEditMode","description","ProductCard","_props$card","_props$card2","setState","setEditMode","card","useInput","arguments","undefined","maxLength","Editor","input","setInput","key","setKey","array","Object","keys","values","DotsMenu","initialValue","UseToggle","productID","premixAPI","payload","deleteProductCrad","Reducer","action","ProductCardContainer","useProductCard","location","actualProductCard","setProductCardThunk","useReducer","Preloader","CocktailCard","getCocktailByID","currentCocktail","knowledgeBase","strDrinkThumb","strDrink","strGlass","strIBA","strCategory","strInstructions","CreateTeam","newTeam","clans","clanActions","onSubmit","createClanThunk","userID","userName","initializeThunk","MainPageNavigation","styles","HomePage","profile","useWindowInnerWidth","windowWidth","setWindowWidth","window","innerWidth","handleResizeWindow","addEventListener","removeEventListener","team","NewIngridientSingleForm","yup","shape","typeError","min","max","required","Formik","initialValues","enableReinitialize","validateOnBlur","newIngridient","newCardActions","_ref","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","autoComplete","FirstStep","forms","setForms","onNameChange","NewProduct","SecondStep","newProduct","newCard","backArrow","createnewProduct","convertObjectToArrayOfObjects","obj","isVisibleForAll","createNewIngridientCard","NewCheckList","nameInput","nameValue","taskInput","taskValue","setTasks","onError","errorMessage","validate","regExp","isError","setError","errorText","setErrorText","pattern","test","useValidator","createCheckList","CheckListsAPI","CHECK_LIST","task","onAddClickHandler","ProductPreview","img","CoctailList","getCocktailsThunk","cocktailsFromState","cocktails","getCocktailsByName","cocktail","idDrink","SpiritList","getSpiritsThunk","spirits","displayName","ID","image","getPublicPremixes","KnowledgeBaseContent","KnowledgeBase","React","Box","sx","width","marginBottom","Tabs","newValue","Tab","fontSize","color","label","IngridientCard","getCurrentIngridient","currentIngridient","currentSpirit","definition","production","LoginPage","hidePassword","setHidePassword","error","onShowPasswordHandler","GogleSignIn","signInWithGooglePopUp","logo","email","password","loginByEmailAndPassword","validationSchema","loginValidationShema","onBlur","showPass","hidePass","disabled","style","RegistrationFormInput","Registration","isPasswordHided","setPasswordHided","togglePassword","nickName","companyName","repeatPassword","async","authApi","catch","ex","message","validationShema","showPasswordIcon","hidePasswordIcon","ProgressBar","readyProducts","item","isDone","percent","toFixed","IngridentsItem","itemId","href","IngridientList","toogleItem","ingridients","EmptyShift","CurrentShift","_props$shift$shiftID","endShift","closeCurrentShiftByCompanyID","shift","shiftID","ShiftPreview","onClickHandler","date","employee","count","ShiftsHistory","shifts","employe","MainPage","companyID","blankShift","closedShifts","currentShift","isFetch","getShiftsHistoryByCompanyID","getCurrentShiftByCompanyID","Array","isArray","useProducts","Navbar","shiftType","useNavbar","setShiftType","PremixesApp","PassedShift","getPassedShiftByID","passedShift","ProdcustItem","isChecked","toggleFunction","ProductList","checked","CreateNewShiftControls","isAllSelected","dispatchProducts","createShift","setCurrentShiftByCompanyID","ShiftConstructorContainer","productList","symbols","String","fromCharCode","resultCode","Math","ceil","random","Desctiption","TeamPage","_props$team","_props$team2","_props$team3","inviteCode","setInviteCode","users","teamName","LeaveTheTeamHandler","leaveTheTeam","app_actions","code","generateInviteCode","TeamModuleAPI","JoinTeamForm","setCode","preventDefault","result","EmptyTeam","TeamPageContainer","useTeamPage","getClanListByUserID","PRIVATE_ROUTES","path","element","PUBLICK_ROUTES","isAuth","Routes","route","Route"],"sourceRoot":""}