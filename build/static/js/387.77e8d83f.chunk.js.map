{"version":3,"file":"static/js/387.77e8d83f.chunk.js","mappings":"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","sources":["Components/Button.tsx","Helpers/CustomHooks.tsx","Modules/ChecklistApp/Components/Hooks.tsx","webpack://bartend/./src/Assets/Styles/DotsMenu.module.css?954c","Modules/ChecklistApp/Components/DotsMenu.tsx","Modules/ChecklistApp/Components/CheclListPage.tsx","Modules/RecepiesApp/Components/Composition.tsx","Modules/RecepiesApp/Components/ProductCalculator.tsx","Modules/RecepiesApp/Components/ProductDescription.tsx","Modules/RecepiesApp/Components/ProductCard.tsx","Modules/ChecklistApp/Components/Hooks..tsx","Modules/RecepiesApp/Components/Editor.tsx","Modules/RecepiesApp/Components/Menu.tsx","Modules/RecepiesApp/Components/Reducer.ts","Modules/RecepiesApp/Components/ProductCardContainer.tsx","Modules/RecepiesApp/Components/UseProductCard.tsx","Modules/KnowledjeBase/CoctrailCard.tsx","Modules/TeamApp/CreateTeam.tsx","webpack://bartend/./src/Assets/Styles/HomePage.module.css?cf67","Components/mainScreen.tsx","Modules/RecepiesApp/NewProduct/NewIngridientSingleForm.tsx","Modules/RecepiesApp/NewProduct/FirstStep.tsx","Modules/RecepiesApp/NewProduct/NewProduct.tsx","Modules/RecepiesApp/NewProduct/SecondStep.tsx","Modules/ChecklistApp/Components/NewCheckList.tsx","Modules/KnowledjeBase/ProductPreview.tsx","Modules/KnowledjeBase/CocktailList.tsx","Modules/KnowledjeBase/PublicPremixes.tsx","Modules/KnowledjeBase/KnowledgeBaseContent.tsx","Components/SelectionTabs.tsx","Modules/KnowledjeBase/KnowledgeBase.tsx","Modules/KnowledjeBase/Ingridient.tsx","Modules/Auth/RegistrationFormInput.tsx","Modules/Auth/Registration.tsx","Modules/PremixesApp/Components/HistoryPage/PassedShiftItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrroductItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrdocuctList.tsx","Modules/PremixesApp/Reducers/constructorReducer.tsx","Modules/PremixesApp/Components/ConstructorPage/CreateNewShiftControls.tsx","Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer.tsx","webpack://bartend/./src/Modules/Textbook/Styles/TextbookContainer.module.css?7d57","Modules/Textbook/TextbookContainer.tsx","Modules/Textbook/Pages/Distilation.tsx","Router/Routes.tsx","Router/Router.tsx"],"sourcesContent":["import React from \"react\";\n\n// Define a props type\ntype ButtonPropsType = {\n    text : string,\n    id? : string,\n    className? : string,\n    callback? : (event : React.SyntheticEvent) => void,\n    type? : \"button\" | \"submit\"\n    \n}\n\n/**\n * Unique Button component as\n * @param text text to render as child\n * @param id id for DOM node\n * @param clasName dom node classname\n * @param callback onclick callback function\n * \n * @returns React.Ellement \n */\nexport const UIButton : React.FC<ButtonPropsType> = (props : ButtonPropsType,params?) => {\n    return (\n        <button\n            id={props.id}\n            type={props.type}\n            className={props.className}\n            onClick={props.callback}\n        >\n            {props.text}\n        </button>\n    )\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { productType } from \"../Redux/Types\";\nimport { set } from \"firebase/database\";\nimport { getProductsByCompanyID } from \"../Redux/ProductReduxer\";\n\n\nexport const useProducts = () => {\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        return state.premixes.premixes\n    })\n    if(products.length > 0) {\n        return products\n    }\n    else{\n        return []\n    }\n}\n\nexport const useProductFilter = (initial : string) : [productType[],(e : string) => void] => {\n    const [filter,setFilter] = useState(initial)\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        if(filter.length === 0) {\n            return state.premixes.premixes\n        }\n        return state.premixes.premixes.filter((el : productType) => el.name.includes(filter))\n    })\n    const updateFilter = (value : string) => {\n        setFilter(value)\n    }\n    \n    return [products,updateFilter]\n    \n}\n\nexport const useWindowInnerWidth = () => {\n    const [windowWidth,setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        const handleResizeWindow = () => setWindowWidth(window.innerWidth)\n        window.addEventListener(\"resize\",handleResizeWindow)\n        return () => {\n            window.removeEventListener(\"resize\",handleResizeWindow)\n        }\n    },[])\n    return windowWidth\n}\n\nexport const useTheme = () => {\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return theme\n}\n\nexport const useDebounce = (callback : (...args:any) => {},delay : number,value : any)=> {\n    const timer = useRef(null);\n    const dispatch : any = useDispatch();\n    const DebounceCallback = useCallback((...args : any) => {\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        else {\n            setTimeout(() => {\n                console.log(\"DISPATHED\")\n               dispatch(callback(value));\n            },delay)\n        }\n    },[callback,delay]);\n\n    console.log(DebounceCallback)\n    return DebounceCallback;\n}\n\n\n/**\n * \n * @param initialValue initial value for boolean flag\n * @returns [actualState,TogglerFunction]\n */\nexport const UseToggle = (initialValue : boolean) : [boolean,() => void] => {\n\n    let [state,setState] = useState<boolean>(initialValue);\n    \n    function toggle () {\n        setState(!state);\n    }\n\n    return [state,toggle];\n}","\n// React,hooks\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useEffect } from \"react\";\n// Redux,thunks\nimport { checkListType, deleteChekListThunk, getCheckListsthunk } from \"../../../Redux/CheckListReducer\";\n// Types\n\n\n\n\nimport { Global_state_type } from \"../../../Redux/Store\";\n/**\n* @params none\n* \n* \n* Return a typple with specifik checklist object that contains \n* ist of tasks and handler to delete them\n* @returns [checklist,deleteHanler]\n*/\n\nexport const useTaskList = (): [checkListType | null, () => void] => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    let id = useLocation().pathname.split(\"=\")[1];\n    let checklist: checkListType | null = useSelector((state: Global_state_type) => {\n        let result = state.chcekLists.checkLists.find((el: checkListType) => el.id === id);\n        if (result) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    });\n    const deleteHandler = () => {\n        dispatch(deleteChekListThunk(id))\n        navigate(\"/check-lists\")\n    };\n    return [checklist, deleteHandler];\n}\n\n\n/**\n * \n * Return a list of checklists for current establishment\n * @returtn array checkListType[]\n */\nexport const useChecklistList = () => {\n    const dispatch: any = useDispatch();\n    // Get team id to fetch data by him\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Fetch data\n    useEffect(() => {\n        dispatch(getCheckListsthunk(teamID as string))\n    }, []);\n    let checkLists = useSelector((state: Global_state_type) => state.chcekLists.checkLists);\n    \n    return checkLists;\n}","// extracted by mini-css-extract-plugin\nexport default {\"recepiesContainerHeader\":\"DotsMenu_recepiesContainerHeader__xsXMT\",\"dotsMenu\":\"DotsMenu_dotsMenu__hP93e\",\"dotsMenu__dot\":\"DotsMenu_dotsMenu__dot__tEkFP\",\"menuOptions\":\"DotsMenu_menuOptions__Xcih5\",\"appear\":\"DotsMenu_appear__25f3n\"};","import { useState } from \"react\"\nimport { checkListType, deleteChekListThunk } from \"../../../Redux/CheckListReducer\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport styles from '../../../Assets/Styles/DotsMenu.module.css'\n\n\n// DEFINE A PROPS TYPE\ntype ChecklistDotsMenu = {\n    checklist: checkListType\n}\n\nexport const ChecklistDotsMenu: React.FC<ChecklistDotsMenu> = (props) => {\n    const navigate = useNavigate();\n    // Toggle isWindowOpen \n    let [isOpen, setIsOpen] = useState<boolean>(false);\n    const dispatch : any = useDispatch();\n    // Opening window togggler function \n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // Delete checklist \n    function deleteCheklist() {\n        // Delete\n        dispatch(deleteChekListThunk(props.checklist.id));\n        navigate(-1);\n    }\n\n    if (!isOpen) {\n        // Render menu icon \n        return (\n            <section className={styles.dotsMenu} onClick={toggle}>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n\n            </section>\n        )\n\n    }\n    else {\n        // Opened menu\n        return (\n            <section className={styles.menuOptions}>\n              \n                <span onClick={deleteCheklist}>Delete</span>\n                <span onClick={toggle}>Close</span>\n\n            </section>\n        )\n    }\n}","// Assets\nimport React, { useState } from \"react\";\nimport menuIcon from \"../../../Assets/Icons/menu.png\"\n// Hooks\nimport { useTaskList } from \"./Hooks\";\n// Styles\nimport \"../../../Assets/Styles/CheckLists.css\"\nimport { ChecklistDotsMenu } from \"./DotsMenu\";\nimport { checkListType } from \"../../../Redux/CheckListReducer\";\n\nexport const Modal =  () => {\n    return (\n        <section className=\"modal\">\n            <span>Delete</span>\n            <button className=\"modal_btn\">Close</button>\n        </section>\n    )\n}\n// Define a props type\ntype ChecklistPropsType = {\n    checklist : checkListType\n}\n\nexport const CheckListPage = () => {\n    // Get checklist object amd delete hadler from hook\n    let [checklist, deleteHandler] = useTaskList();\n    let [isModal,setModal] = useState<boolean>(false);\n    function toggleModal () {\n        setModal(!isModal);\n    }\n    return (\n        <section className=\"single-check-list container {}\">\n           \n            <div className=\"check-list-controls\">\n              <ChecklistDotsMenu checklist={checklist as checkListType}/>\n            </div>\n\n            <ul className=\"tasks\">\n                {checklist?.tasks.map((el: string, index: number) => {\n                    return (\n                        <li className=\"tasks-item\">\n                            <div>\n                            <input className=\"tasks-item__checkbox\" type=\"checkbox\" />\n\n                            </div>\n                            <span>{index + 1 + \".\" + el}</span>\n                            <br />\n                        </li>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","// React,ReactHooks\nimport {useState } from \"react\"\n// Redux,ThunkActions\nimport { productType } from \"../../../Redux/Types\";\n// Helpers\nimport { parseComposition } from \"../../../Helpers/Helpers\";\n\n\n// DECLARE PROPS TYPE\n\n// -----------------\ntype ProductCompositionType = {\n    isEditMode: boolean,\n    composition: {}[],\n    card: productType\n}\n// -----------------\n\n\n/**\n * A component displaying the composition of the current product. \n * And also the product card editor depending on the isEditMode prop\n *\n * @param props {isEditMode : boolean,composition {}[] ,card}\n * \n * @returns React.Element\n */\nexport const ProductComposition = (props: ProductCompositionType) => {\n    // Hide or show component state\n    let [isOpen, setIsOpen] = useState<boolean>(false);\n\n    // Show|Hide toggler function\n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // If isOpen === false render the Show button\n    if (!isOpen) {\n        return (\n            <button onClick={toggle}>Composition</button>\n        )\n    }\n\n    else {\n        return (\n            <section>\n                <button onClick={toggle}>Composition</button>\n                <p className=\"composition\">{parseComposition(props.composition)}</p>\n            </section>\n        )\n    }\n\n\n}","// React,ReactHooks\nimport React, { useState } from \"react\";\n// Helpeers\nimport { calculateAndParseIntoComponent } from \"../../../Helpers/Helpers\";\n\n// Types\nimport { productType } from \"../../../Redux/Types\";\n\n\n\nexport const ProdicuCalculater = (props : { product: productType | null}) => {\n    // Multiplier value\n    let [value, setValue] = useState(1);\n    console.log(props.product);\n    // Input Handler\n    // Function to calculate value of prdoduct composition\n    function calculate(event: React.SyntheticEvent<HTMLInputElement>) {\n        if (event.currentTarget.value.length < 1) {\n            setValue(1)\n        } else {\n            setValue(Number(event.currentTarget.value))\n        }\n    };\n\n    return (\n      \n            <section className=\"product-card__calculator\">\n                <input type=\"number\" placeholder=\" How much do we need?\" onChange={calculate} />\n                <br />\n                <div className=\"calculated_result\">\n                    {calculateAndParseIntoComponent(props.product?.composition as {}[], value)}\n                </div>\n            </section>\n\n\n    )\n}","// React,ReactHooks\nimport { Dispatch, useState } from \"react\"\n// Styles and Assets\nimport \"../../../Assets/Styles/PeoduxtCard.css\";\n// Redux,Reducers\nimport { useDispatch } from \"react-redux\";\nimport { productActions } from \"../../../Redux/ProductReduxer\";\n\n\n// Define a `props` type to component\ntype propsType = {\n    setState: Dispatch<{ type: string, payload: any }>,\n    isEditMode: boolean,\n    description: string\n}\n\n/**\n * \n * @param props propsType\n * ProductCard Description component\n * Render actual card description and set them if 'EditMode' is enabled\n * \n * @returns React.Ellement\n */\n\nexport const ProductDescription = (props: propsType) : React.ReactElement => {\n    // Is Description Opened\n    // Shoow <p></p> ellement if true anoterwose just render the Button\n    let [isOpened, setIsOpened] = useState<boolean>(false);\n\n    const dispatch: any = useDispatch();\n    // Description open Toggler function\n    function toggle() {\n        setIsOpened(!isOpened);\n    }\n    // OnChange event handler that we use in textarea if props.isEditMode === true\n    function onChangeHandler(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    }\n \n    if (!isOpened) {\n        // Render Description or textarea to Edit descritpion\n        return (\n            <section >\n                <button onClick={toggle}>Dscription</button>\n                {!props.isEditMode ? <p className=\"composition\">{props.description}</p> :\n                    <textarea\n                        onChange={onChangeHandler}\n                        className=\"description-textarea\"\n                        value={props.description}></textarea>}\n            </section>\n        )\n    }\n    else {\n        return (\n            <button onClick={toggle}>Description</button>\n        )\n    }\n\n}","// TYPES\nimport { productType } from \"../../../Redux/Types\"\n// Components\nimport { ProductComposition } from \"./Composition\"\nimport { DotsMenu } from \"./Menu\"\nimport { ProdicuCalculater } from \"./ProductCalculator\"\nimport { ProductDescription } from \"./ProductDescription\"\n\n// DEFINE A PROP TYPE\n// ------------------\ntype CardPropsType = {\n    isEditMode : {isEditMode : boolean},\n    setEditMode : any,\n    card : productType,\n}\n// -----------------\n\n/**\n * Render product card page if isEditMode equals to false in parent component\n * @param props CardPropdType\n * @returns React.Element\n */\n\nexport const ProductCard : React.FC<CardPropsType> = (props : CardPropsType) => {\n    return (\n        <>\n\n            <ProductDescription isEditMode={props.isEditMode.isEditMode} setState={props.setEditMode} description={props.card?.description as string} />\n            <ProductComposition card={props.card as productType} isEditMode={props.isEditMode.isEditMode} composition={props.card?.composition as {}[]} />\n            <ProdicuCalculater product={props.card} />\n        </>\n    )\n\n}","// React,Hooks\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\"\n\n// Redux,Redux-thunks\n\ntype inputEventType = React.SyntheticEvent<HTMLInputElement>;\ntype setStateType = Dispatch<SetStateAction<string>>;\n\n/**\n//  * INPUTS HOOK\n * \n * @param value default value <string>\n * @param placeholder input placeholder text <string>\n * @returns InputElement : input element : <ReactNode>\n *          state : actual state value : <string>\n *          setState : Dispatch<SetStateAction<string>>\n */\n\nexport const useInput = (value: string = \"\", placeholder: string): [ReactNode, string,setStateType] => {\n    // Input state set default from params\n    const [state, setState] = useState(\"\");\n\n    // On changeHandler tah will be passed into input \n    function onChangeHandler(event: inputEventType) {\n        setState(event.currentTarget.value);\n    };\n\n    let InputElement = <input placeholder={placeholder} value={state} onChange={onChangeHandler} maxLength={100}/>;\n\n    // Return typple with 3 elements [input,state,setState]\n    return [InputElement, state, setState];\n\n\n}\n\n/**\n * VALIDATOR HOOK\n * \n * @param regExp pattern to validate\n * @returns tupple [isError,ErrorText,vslidate function]\n * \n */\nexport const useValidator = (regExp : RegExp) : [boolean,string,(val : string) => void] => {\n    // Boolean error flag\n    let [isError,setError] = useState<boolean>(false);\n    // error message text\n    let [errorText,setErrorText] = useState<string>(\"\");\n    \n    // Define a pattern to validate frpm params\n    let pattern = regExp;\n\n    function validate (value : string) {\n        if(!pattern.test(value))\n        {\n            setError(true);\n            setErrorText(\"Error : invalid input\");\n        }\n    }\n\n    return [isError,errorText,validate]\n}","// React,ReactHooks\nimport { useDispatch } from \"react-redux\"\n// Redux,Actions\nimport { AnyAction, Dispatch } from \"redux\";\nimport { productActions } from \"../../../Redux/ProductReduxer\";\n// Types\nimport { ReactNode, useState } from \"react\";\nimport { productType } from \"../../../Redux/Types\"\n// Custom hooks\nimport { useInput } from \"../../ChecklistApp/Components/Hooks.\";\n\n\n// DECLARE PROP TYPE\n\n// -----------------\ntype EditorPropType = {\n    card: productType,\n}\n\n/** \n * Product card editor component\n * \n * Render only when the isEdit flag is true\n * \n * @param props card : prdocuctType\n * @returns ReactEllement\n */\n\nexport const Editor: React.FC<EditorPropType> = (props: EditorPropType) => {\n    const dispatch: Dispatch<AnyAction> = useDispatch();\n    // Textarea onChange handler\n    function onChange(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    };\n    // Delete handler function \n    function deleteHandler(event: React.SyntheticEvent<HTMLSpanElement>) {\n        dispatch(productActions.deleteComponent(event.currentTarget.id));\n    };\n    // Compoennts to be added state from useInput custom Hook\n    let [input, setInput] = useInput(\"Name\", \"Type name\");\n    // New ingridient state\n    let [key, setKey] = useState(\"\");\n    let [value, setValue] = useState(\"\");\n    // Add component Handler\n    function addComponent() {\n        dispatch(productActions.addComonent({ [key]: value }));\n        setValue(\"\");\n        setKey(\"\");\n    }\n    \n    return (\n        <section className=\"editor\">\n            <h3 className=\"editor__tittle\">Description : </h3>\n            <textarea\n                onChange={onChange}\n                className=\"editor__desctiption-textarea\"\n                // Get actual value from store -> prpops\n                value={props.card.description}>\n            </textarea>\n            <h3 className=\"editor__tittle\">Composition : </h3>\n\n            <ul className=\"editor__composition\">\n                {props.card.composition.map((el: {}, index: number, array: {}[]) => {\n                    return (\n                        <li className=\"editor__item\">\n                            <span>{Object.keys(el)[0] + \" : \"}</span>\n                            <span >{Object.values(el)[0] as ReactNode}</span>\n                            {/* DELETE BUTTON */}\n                            <span\n                                id={Object.keys(el)[0]}\n                                className=\"editot__component__delete\"\n                                onClick={deleteHandler}>Delete</span>\n                            <br />\n                        </li>)\n                })}\n            </ul>\n            {/* Render inputs */}\n            <div className=\"editor__newcomponent-input\">\n                {/* KEY INPUT */}\n                <input type=\"text\"\n                 value={key} placeholder=\"Name\" \n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setKey(e.currentTarget.value)}}/>\n                 {/* VAKUE INPUT */}\n                <input type=\"text\"\n                 value={value} \n                 placeholder=\"Value\"\n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setValue(e.currentTarget.value)}} />\n            </div>\n            <button onClick={addComponent}>Add</button>\n        </section>\n    )\n}","// React,ReactHooks\nimport { Dispatch } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\";\n// Redux,Reducers\nimport { deleteProductCrad } from \"../../../Redux/ProductReduxer\";\nimport { UseToggle } from \"../../../Helpers/CustomHooks\";\nimport { useDispatch } from \"react-redux\";\n// Types\nimport { productType } from \"../../../Redux/Types\";\nimport { premixAPI } from \"../../../services/Firebase/PremixAPI\";\n\n// Styles\nimport styles from \"../../../Assets/Styles/DotsMenu.module.css\"\n// PROPS TYPE\n// --------------\ntype DotsMenuPropsType = {\n    setEditMode: Dispatch<{ type: string, payload: any }>,              //EditMode toggler\n    isEditMode: boolean,\n    card: productType                                                  //Prdouct data\n}\n// --------------\n\n\n\n/**\n * DOTS   MENU COMPONENT : \n * \n * Contains isEditMode toggling function and delete product card\n * \n * @param props DotsMenuPropsType {Dispatch,isEditMode,card}\n * @returns React.Ellement\n */\nexport const DotsMenu = (props: DotsMenuPropsType) => {\n\n    // Get boolean state and toggler function from hook\n    // If isOpen === true render menu with containig items anotherwise\n    // Render three dots menu icon\n    let [isOpen, toggle] = UseToggle(false);\n\n    // Get id of prdocut card\n    const productID = useLocation().pathname.split(\"=\")[1]\n\n    // Navigate function\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    // Delete button handller\n    function deleteProduct() {\n        dispatch(deleteProductCrad(productID));\n        navigate(\"/premixes\");\n    }\n\n    // Eidt mode toggler\n    function setEditMode() {\n        props.setEditMode({ type: \"toggleEditMode\", payload: undefined }); //FIX THIS `UNDEFINED` LATER\n        toggle();\n    }\n    // SaveChanges handler \n    function saveChanges () {\n        premixAPI.updatePrdocurCard(props.card);\n        props.setEditMode({type : 'toggleEditMode',payload : undefined});\n        toggle();\n    }\n    if (!isOpen) {\n        return (\n            <section className={styles.dotsMenu} onClick={toggle}>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n                <li className={styles.dotsMenu__dot}></li>\n\n            </section>\n        )\n\n    }\n    else {\n        return (\n            <section className={styles.menuOptions}>\n                {props.isEditMode && <span className=\"save-changes\" onClick={saveChanges}>{\"Save changes\"}</span>}\n                <span onClick={setEditMode}>{props.isEditMode ? \"Cancel Editing\" : \"Edit\"}</span>\n                <span onClick={deleteProduct}>Delete</span>\n                <span onClick={toggle}>Close</span>\n            </section>\n        )\n    }\n\n}\n","const TOGGLE_EDIT_MODE = \"toggleEditMode\";\n\n\ntype ActionType = {\n    type : string,\n    payload : any\n}\ntype initialStateType = {\n    isEditMode : boolean\n}\n\nexport const Reducer = (state : initialStateType,action : ActionType) => {\n    switch(action.type) {\n        case TOGGLE_EDIT_MODE : {\n            return {\n                ...state,\n                isEditMode : !state.isEditMode\n            }\n        }\n        default : \n            return state\n    }\n}","// React,React hooks\nimport { Suspense, useReducer } from \"react\";\n// Components\nimport { ProductCard } from \"./ProductCard\";\nimport { Editor } from \"./Editor\";\nimport { Preloader } from \"../../PremixesApp/Components/Preloader\";\nimport { DotsMenu } from \"./Menu\";\n// Styles and Assets\nimport \"../../../Assets/Styles/PeoduxtCard.css\";\n// Redux \nimport { Reducer } from \"./Reducer\";\nimport { productType } from \"../../../Redux/Types\";\n// Custom hooks\nimport { useProductCard } from \"./UseProductCard\";\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../../Redux/Store\";\n\n\n\n\n/**\n * productCard Container Compoennt\n * @returns React.Ellement\n */\n\nexport const ProductCardContainer = () => {\n    // Get data from hook\n    let card = useProductCard();\n    // General reducer for all chil compoennt\n    // Toogle card Editing mode\n    let [isEditMode, setEditMode] = useReducer(Reducer, { isEditMode: false });\n    // get uer team ID to compare with prdocut teamID\n    let userTeamID: string | null = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get product team ID\n    let productTeamID: string | undefined = useSelector((state: Global_state_type) => state.premixes.actualProductCard?.teamID);\n    // Check if card not equals to null\n    if (card) {\n        return (\n\n            <section className={`product_card container translate_animation`}>\n\n                <h1>{card?.name}</h1>\n                {/* Render dots menu depending on result of comparison teamID and userTeamID */}\n                {/* If user currrent user not belong to team that create this product he cannot edit or delete prdocut card */}\n                {/* Pass Edit mode toggler into Menu component props */}\n                {userTeamID === productTeamID ? <DotsMenu isEditMode={isEditMode.isEditMode} setEditMode={setEditMode} card={card as productType} />\n                    : null}\n\n                {isEditMode.isEditMode ?\n                    // Render Editor compomnent if Editing\n                    <Editor card={card as productType} />\n                    :\n                    // Or render prdocut card information\n                    <ProductCard isEditMode={isEditMode} setEditMode={setEditMode} card={card} />\n                }\n\n            </section>\n\n        )\n    }\n    // Anotherwise reutn Preloader\n    else {\n        return <Preloader />\n    }\n\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\"\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { setProductCardThunk } from \"../../../Redux/ProductReduxer\";\n\n\nexport const useProductCard = () => {\n    const dispatch : any = useDispatch();\n    // Get current location and select product id from him\n    let location = useLocation().pathname.split(\"=\")[1];\n    let products = useSelector((state : Global_state_type) => state.premixes.actualProductCard);\n\n    \n    useEffect(() => {\n        dispatch(setProductCardThunk(location));\n    },[]);\n    if(products)\n    {\n        return products;\n    }\n    else\n    {\n        return null;\n    }\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { cocltalCardType, getCocktailByID } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CoctailCard.css\"\n\nexport const CocktailCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCocktailByID(location))\n    },[])\n    let currentCocktail = useSelector((state : Global_state_type) => state.knowledgeBase.currentCocktail) as cocltalCardType\n\n \n    return (\n        <article className=\"cocktail_card_container translate_animation\">\n           \n            <img id=\"cocktail_photo\" src={currentCocktail?.strDrinkThumb} alt=\"\" />\n            <h2 className=\"coctail-card__tittle\">{currentCocktail?.strDrink}</h2>\n        \n            <article className=\"coctail-card__info\">\n            <span className=\"info__glass\">Glass : {currentCocktail?.strGlass }</span>\n            <span className=\"info__category\">Category IBA : {currentCocktail?.strIBA ? currentCocktail.strIBA : \"не входит в IBA\"}</span>\n            <span className=\"info__category\">Category : {currentCocktail?.strCategory}</span>\n            <h3 className=\"info__subtittle\">Techonlogy : </h3>\n            <p className=\"info__technology\">{currentCocktail?.strInstructions}</p>\n            <h3 className=\"info__composition\">Composition : </h3>\n            {currentCocktail ? Object.keys(currentCocktail.composition).map((el : string,index : number) => {\n                return (\n                    <span>{el + \" : \" + Object.values(currentCocktail.composition)[index]}</span>\n                )\n            }) : null}\n            </article>\n           \n        </article>\n    )\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clanActions, createClanThunk } from \"../../Redux/TeamReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CreateTeam.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport {initializeThunk} from \"../../Redux/AppReducer\"\n\nexport const CreateTeam = () => {\n    const dispatch : any = useDispatch()\n    const navigate = useNavigate()\n    const newTeam = useSelector((state : Global_state_type) => state.clans.newTeam)\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const onSubmit = () => {\n        dispatch(createClanThunk(newTeam as {newTeamName : string,newTeamDescription : string,newTeamAvatar : ArrayBuffer},\n            user.userID as string,user.userName as string))\n           \n        dispatch(initializeThunk())\n        navigate(\"/home\")\n    }\n    \n    const onNameChangeHandler = (e : React.SyntheticEvent<HTMLInputElement>) => {\n        dispatch(clanActions.setNewClanName(e.currentTarget.value))\n    }\n    const onDescriptionChangeHandler = (e : React.SyntheticEvent<HTMLTextAreaElement>) => {\n        dispatch(clanActions.setNewTeamDiescription(e.currentTarget.value))\n    }\n    return (\n        <section className={\"create_team_container translate_animation container\"}>\n            <input type=\"text\" placeholder=\"Type name\" onChange={onNameChangeHandler}/>\n            <h3>Description :</h3>\n            <textarea name=\"\" id=\"\" onChange={onDescriptionChangeHandler} ></textarea>\n         \n            <button onClick={onSubmit}>Create Team</button>\n        </section>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"main_page_navigation\":\"HomePage_main_page_navigation__aiF1m\",\"home_page_container\":\"HomePage_home_page_container__5i8ay\",\"home_page_info\":\"HomePage_home_page_info__GShzs\"};","import { useNavigate } from \"react-router-dom\";\nimport styles from \"../Assets/Styles/HomePage.module.css\"\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\n\nimport docIcon from \"../Assets/Icons/icons8-document-64.png\"\nimport teamicon from \"../Assets/Icons/icons8-team-96.png\"\nimport chemistryIcon from \"../Assets/Icons/icons8-chemistry-100(1).png\"\n\nimport documentIcon from \"../Assets/Icons/icons8-document-90.png\";\n\n\n\n\n\nconst MainPageNavigation = () => {\n    const navigate = useNavigate()\n\n    return (\n        <section className=\"main_page_navigation\">\n            \n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Prep Shift</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/premixes\") }}>\n\n\n                    <a>Recepie Cards</a>\n                    <img className=\"icon\" src={documentIcon} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n        </section>\n    )\n}\n\nexport const HomePage = () => {\n    const profile = useSelector((state: Global_state_type) => {\n        return state.App.user\n    })\n\n    return (\n        <section className={`${styles.home_page_container} ${styles.translate_animation}`}>\n            <div className={styles.home_page_info}>\n                <h1 id={styles.userName}>Hi,{profile.userName}!\n\n                </h1>\n                <span>{profile.team ? profile.team : null}</span>\n                <br />\n            </div>\n            <MainPageNavigation /> \n\n\n        </section>\n    )\n}","\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\"\nimport { useDispatch } from \"react-redux\";\nimport {newCardActions } from \"../../../Redux/NewCardReducer\";\nimport \"../../../Assets/Styles/NewProduct.css\"\n\n\nexport const NewIngridientSingleForm = () => {\n    const dispatch: any = useDispatch()\n    // VALIDATION SHEMA\n    const validationSchema = yup.object().shape({\n        key: yup.string().typeError(\"This field should be a string\").min(1).max(20).required(\"This field is Required\"),\n        value: yup.number().typeError(\"This field should be a digit\").min(1).max(20).required(\"This field is Required\")\n\n    })\n    // SUBMIT FORMS\n    const Submit = (values: { key: string, value: string }) => {\n        let newIngridient = { [values.key]: values.value }\n        console.log(newIngridient)\n        dispatch(newCardActions.addNewIngridient(newIngridient))\n    }\n    return (\n        <div className=\"single_input\">\n            <Formik initialValues={{ key: \"\", value: \"\" }}\n                enableReinitialize={true}\n                validateOnBlur={true}\n                onSubmit={Submit}\n            //   validationSchema={validationSchema}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                    return (\n                        <div className=\"input_container\">\n                            <input type=\"text\" id=\"key\" autoComplete=\"off\" onChange={handleChange} />\n                            <input type=\"number\" id=\"value\" autoComplete=\"off\" onChange={handleChange} />\n\n                            <button\n                                //@ts-ignore \n                                onClick={handleSubmit} id=\"add_component\" type=\"submit\">+</button>\n\n                        </div>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"../../../Assets/Styles/NewProduct.css\"\nimport { newCardActions } from \"../../../Redux/NewCardReducer\";\nimport { NewIngridientSingleForm } from \"./NewIngridientSingleForm\";\nimport styles from \"../../Assets/Styles/ProductConstructor.module.css\"\n\nexport const FirstStep = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n\n\n    // ADD NEW INPUTS FOR NEW COMPONENT\n    const addInput = (e: React.MouseEvent<HTMLElement>) => {\n        setForms([...forms, <NewIngridientSingleForm />])\n\n    }\n    // SET NAME\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        dispatch(newCardActions.setNewName(e.currentTarget.value))\n    }\n    // ARRAY OF FORMS FOR ADDING NEW COMMPOENT OBJET\n    let [forms, setForms] = useState([\n        <NewIngridientSingleForm />\n    ])\n    // Visibility toggler\n    function toggleVisibility () {\n        dispatch(newCardActions.toggleVisibility());\n    }\n    return (\n        <section className={props.isDarkTheme ? \"new_premix_first_step container DarkTheme\" : \"container LightTheme\"}>\n            <input type=\"text\" placeholder=\"Наименование\" id=\"name\" onChange={(e) => { onNameChange(e) }} />\n            <div className=\"visibility-input\">\n                    <span>Visible for all : </span>\n                    <input id=\"visibility-input\" onChange={toggleVisibility} type=\"checkbox\" />\n                </div>\n            <section className=\"compound\">\n                <h2>СComposition : </h2>\n                <div className=\"compound_inputs\">\n                    {forms}\n                </div>\n\n                <button onClick={addInput} >Add ingrideint</button>\n            </section>\n\n        </section>\n    )\n}","\nimport \"../../../Assets/Styles/NewProduct.css\"\nimport { FirstStep } from \"./FirstStep\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport const NewProduct = (props : {isDarkTheme : boolean} ) => {\n\n    const location = useLocation().pathname.split(\"/\")[1]\n    const navigate = useNavigate()\n    console.log(location)\n    return (\n        <section className=\"container translate_animation\">\n            <FirstStep isDarkTheme={props.isDarkTheme}/>\n            <button className=\"confirm_button\" onClick={() => {navigate(\"/add-step-two\")}} id=\"next_button\">Next</button>\n        \n        </section>\n    )\n}","import React from \"react\";\nimport { createNewIngridientCard, newCardActions } from \"../../../Redux/NewCardReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../../Assets/Styles/SecondStep.css\"\nimport backArrow from \"../../../Assets/Icons/icons8-back-90.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../../Redux/Store\";\nimport { productType } from \"../../../Redux/Types\";\nimport { NewProduct } from \"./NewProduct\";\n\nexport const SecondStep = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n\n    // SET DESCRITION\n    const setDescription = (e: React.FormEvent<HTMLTextAreaElement>) => {\n        dispatch(newCardActions.setNewDescription(e.currentTarget.value))\n    }\n    const newProduct = useSelector((state: Global_state_type) => state.newCard)\n    const teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    const navigate = useNavigate()\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects(obj: object) {\n            let resultObject = Object.keys(obj).map((el: string, index: number, array: any[]) => {\n                return {\n                    [el]: Object.values(obj)[index]\n                }\n            });\n            return resultObject;\n        }\n        console.log(convertObjectToArrayOfObjects(newProduct));\n        if (teamID) {\n            let card: productType = {\n                name: newProduct.name,\n                description: newProduct.description,\n                composition: convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID: teamID,\n                isVisibleForAll : newProduct.isVisibleForAll\n\n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        } else {\n            navigate(\"/clan-list\")\n        }\n\n\n    }\n    return (\n        <div className={props.isDarkTheme ? \"second_step container translate_animation DarkTheme\" : \"second_step container translate_animation LightTeheme\"}>\n            <div className=\"controls_item\" onClick={() => { navigate(-1) }}>\n                <span>Back</span>\n                <img className=\"icon\" src={backArrow} />\n            </div>\n\n            <h2>Технология приготовления : </h2>\n            <textarea name=\"Description\" id=\"description\" onChange={setDescription}></textarea>\n            <button className=\"confirm_button\" onClick={createnewProduct}>Создать</button>\n\n        </div>\n    )\n}","// Custom Hooks\nimport { useInput, useValidator } from \"./Hooks.\";\n// React,ReactHooks\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// API functions\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\n// Styles and Assesets\nimport add from \"../../../Assets/Icons/icons8-done-150.png\"\nimport \"../../../Assets/Styles/CheckLists.css\"\n// Types\nimport { Global_state_type } from \"../../../Redux/Store\";\n// Route\nimport { CHECK_LIST } from \"../../../Router/Routes\";\n\n\nexport const NewCheckList = () => {\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    let navigate = useNavigate();\n\n    // Get inputs from Hook \n    let [nameInput, nameValue] = useInput(\"Untitled\", \"Type name\");\n    let [taskInput, taskValue, setInput] = useInput(\"\", \"Task\");\n    // Define tasks array\n    let [tasks, setTasks] = useState<string[]>([]);\n    // On Error State if input value is not valid\n\n    // Define a RegExp to validate inputs\n    let [onError, errorMessage, validate] = useValidator(/^[a-zA-Z0-9]+$/);\n\n    // Push new task into \"tasks\" array\n    const onAddClickHandler = () => {\n        // Validate input by rgExp\n        validate(taskValue);\n        if (!onError) {\n            setTasks([...tasks, taskValue]);\n            setInput(\"\");\n        }\n\n    }\n    const createCheckList = () => {\n        // Check if task name are valid\n        validate(nameValue);\n        if (!onError) {\n            //  If valid add new checklist\n            CheckListsAPI.addCheckList(teamID as string, tasks, nameValue);\n            // Movae bavk to check-lists route\n            navigate(CHECK_LIST);\n        }\n\n    }\n    return (\n        <section className=\"new_check_list_container container translate_animation\">\n            <h1>\n                {/* Finish editing */}\n                <button onClick={createCheckList} id=\"add_ckeck_list\">Done</button>\n            </h1>\n            {/* Cheklist Name Input */}\n            {nameInput}\n            <ul className=\"task_list\">\n                {/* Render the added tasks array */}\n                {tasks.map((task: string) => <li key={task}>{task}</li>)}\n            </ul>\n            {/* New task Input */}\n            <div className=\"new_check_list_controls\">\n                {taskInput}\n                <button className=\"confirm_button\" onClick={onAddClickHandler}>\n                    <img src={add} alt=\"\" />\n                </button>\n                <br />\n                {/* Error message (Renders if input conyain errors) */}\n                <span>{onError ? errorMessage : null}</span>\n            </div>\n        </section>\n    )\n}\n\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport icon from \"../../Assets/Icons/icons8-cocktail-96.png\";\n\ninterface IPreview {\n    name: string,\n    img: string | null,\n    id: string,\n    type : string\n}\n\n\nexport const ProductPreview: React.FC<IPreview> = (props) => {\n    const navigate = useNavigate();\n    // Set icon dependin on props.img\n    let src = props.img ? props.img : icon;\n    // onClick hadler navigate to full product information by product id\n    // from html id attr\n    function goToProductCard(event: React.SyntheticEvent<HTMLDivElement>) {\n        switch(props.type){\n            case \"premix\" : {\n                navigate(`/card/id=${event.currentTarget.id}`);\n                break;\n            }\n            case \"spirit\" : {\n                navigate(\"/ingridient/id=\" + event.currentTarget.id);\n                break;\n            }\n            case \"cocktail\" : {\n                navigate(\"/cocktail/id=\" + event.currentTarget.id);\n                break;\n            }\n        }\n       \n    }\n    return (\n        <div key={props.id} id={props.id} className=\"cocktail_card\" onClick={goToProductCard}>\n            <img className=\"cocktail_preview\" src={src} alt=\"\" />\n            <span>{props.name}</span>\n        </div>\n    )\n}\n","import React ,{useEffect}from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { cocltalCardType, getCocktailsByName, getCocktailsThunk } from \"../../Redux/KnowledgeBaseReducer\";\nimport { ProductPreview } from \"./ProductPreview\";\n\n\nexport const CoctailList = () => {\n    let dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getCocktailsThunk())\n    }, [])\n    let cocktailsFromState : cocltalCardType[] = useSelector((state: Global_state_type) => state.knowledgeBase.cocktails as cocltalCardType[]);\n\n    function searchByName(e: React.SyntheticEvent<HTMLInputElement>): void {\n\n        dispatch(getCocktailsByName(e.currentTarget.value));\n\n    }\n\n\n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <section className=\"filters\">\n                <input type=\"text\"  placeholder=\"Search by name\" onChange={searchByName}/>\n            </section>\n            <div className=\"list\">\n            {cocktailsFromState?.map((cocktail : cocltalCardType) => {\n                return (\n                    <div key={cocktail.idDrink}>\n                          <ProductPreview type=\"cocktail\"name={cocktail.strDrink} id={cocktail.idDrink} img={cocktail.strDrinkThumb}/>\n                    </div>\n                 \n                )\n            })}\n            </div>\n          \n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getPublicPremixes } from \"../../Redux/ProductReduxer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { productType } from \"../../Redux/Types\";\n\nimport { ProductPreview } from \"./ProductPreview\";\n\nexport const PremixesList : React.FC = () => {\n    // Get dispatch \n    const dispatch : any = useDispatch();\n    useEffect(() => {\n        dispatch(getPublicPremixes());\n    },[])\n    // Get premixes from state\n    const state = useSelector((state : Global_state_type) => state.premixes.premixes);\n\n    return (\n        <section className=\"list\">\n            {state.map((el : productType) => {\n                return (\n                    <ProductPreview type=\"premix\" name={el.name} id={el.id as string} img={null}/>\n                )\n            })}\n        </section>\n    )\n}","import React from \"react\";\nimport { CoctailList } from \"./CocktailList\";\n\nimport { PremixesList } from \"./PublicPremixes\";\n\nexport const KnowledgeBaseContent = (props : {value : number}) => {\n    \n    if(props.value == 0) {\n        return (\n            <CoctailList/>\n        )\n    }\n    else\n    {\n        return (\n            <PremixesList/>\n        )\n    }\n\n}\n","import { Box, Tab, Tabs } from \"@mui/material\"\nimport React, { Dispatch } from \"react\";\n\n// Define type to a component\n\ntype SelectionTabsPropsType = {\n    value : number,\n    labels : Array<string>,\n    handleChange : (event : React.SyntheticEvent,newValue : number) => void,\n    setValue : Dispatch<React.SetStateAction<number>>\n}\n\n/**\n * Universal selection tabs component \n * \n * @param props SelectionTabsPropsType\n * @returns React.Ellement\n */\nexport const SelectionTabs: React.FC<SelectionTabsPropsType> = (props) => {\n    // Get a one tab with \n    const tabWidth = Math.floor(100 / props.labels.length);\n    return (\n        <Box sx={{ width: '100%', marginBottom: \"5px\" }}>\n            <Tabs value={props.value} onChange={props.handleChange} sx={{}} >\n                {props.labels.map((label : string,index : number) => {\n                    return (\n                        <Tab sx={{ width: tabWidth + \"%\", fontSize: \"14px\", color: \"white\" }} label={label} />\n                    )\n                })}\n            </Tabs>\n        </Box>\n    )\n}","import React from \"react\";\nimport \"../../Assets/Styles/CocktailList.css\"\nimport { KnowledgeBaseContent } from \"./KnowledgeBaseContent\";\nimport { SelectionTabs } from \"../../Components/SelectionTabs\";\n\n\n\n\n\n\n\nexport const KnowledgeBase = () => {\n\n  \n    const [value, setValue] = React.useState(0);\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n      \n    };\n\n    return (\n        <section className=\"knwoledge_base_container container\">\n            <h2>Knowledge base</h2>\n            <SelectionTabs labels={['Coctails','Premixes']} handleChange={handleChange} value={value} setValue={setValue}/>\n            <KnowledgeBaseContent value={value}/>\n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { getCurrentIngridient } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const IngridientCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCurrentIngridient(location))\n    },[])\n    let currentIngridient = useSelector((state : Global_state_type) => state.knowledgeBase.currentSpirit)\n    return (\n        <section className=\" container spirit_card translate_animation\">\n            <figure>\n            \n            <img id=\"cocktail_photo\" src={currentIngridient?.image} alt=\"\" />\n            <figcaption><h2>{currentIngridient?.displayName}</h2></figcaption>  \n            </figure>\n            <article>\n\n            <h4>Описание : </h4>\n            <p>\n                {currentIngridient?.definition}\n            </p>\n        \n            <span>Технология произодства : </span>\n            <p>{currentIngridient?.production}</p>\n            </article>\n         \n        </section>\n    )\n}","\n// Define Props Type\ntype registrationFormType = {\n    touched: boolean | undefined,\n    handleChange : (e : React.ChangeEvent<any>) => void,\n    errors : string | undefined,\n    type : string,\n    id : string,\n    callback? : () => {},\n\n}\n/**\n * This component return input and span component containig error message\n * If error was thrown\n * \n * @param props registrationFormType\n * @returns React.Ellemet\n */\nexport const RegistrationFormInput: React.FC<registrationFormType> = (props : registrationFormType) => {\n    return (\n        <>\n            <input type={props.type} id={props.id} autoComplete=\"off\" onChange={props.handleChange} placeholder={props.id} />\n            <span className=\"onInputError\">{props.touched ? props.errors : null}</span>\n        </>\n    )\n}\n","// React,ReactHooks\nimport { useState } from \"react\";\n\n// Components\nimport { RegistrationFormInput } from \"./RegistrationFormInput\";\n\n// API funcions,Helpers\nimport { validationShema } from \"../../Helpers/Helpers\";\nimport { authApi } from \"../../services/Firebase/AuthAPI\";\nimport { FirebaseError } from \"firebase/app\";\n\n// Styles and Assets\nimport \"../../Assets/Styles/Registration.css\"\nimport showPasswordIcon from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePasswordIcon from \"../../Assets/Icons/icons8-hide-password-100.png\"\n\n// Formik\nimport { Formik } from \"formik\"\n\n\n\n/**\n * New user registration component.\n * Uses the Formik library for form control and validation\n * \n * @returns React.Ellement\n */\nexport const Registration = () => {\n\n    // Show hide password boolean flag\n    let [isPasswordHided, setPasswordHided] = useState(false);\n    // Error message state\n    let [error, setError] = useState<string>(\"\")\n\n    // Create user function \n    const Submit = async (values: { nickName: string, email: string, password: string, repeatPassword: string }) => {\n        // Try to create user \n        await authApi.createUserWithEmailAndPassword(values.email, values.password, values.nickName)\n            .catch((ex: FirebaseError) => {\n                // If error was throwed set error message\n                setError(ex.message.split(\"(\")[1].split(\")\")[0]);\n            });\n    }\n    // Show hode password toggler function\n    function togglePassword() {\n        setPasswordHided(!isPasswordHided);\n    }\n    return (\n        <section className=\"create_the_team_container\">\n            <h1>Create account</h1>\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ nickName: \"\", companyName: \"\", email: \"\", password: \"\", repeatPassword: \"\" }}\n                onSubmit={Submit}\n                // Formik Validation Shema imported from Helpers\n                validationSchema={validationShema}\n                validateOnBlur={true}\n\n            >\n                {({ errors, touched, handleChange, handleBlur, handleSubmit }) => {\n                    return (\n                        <div className=\"create_team_inputs translate_animation\">\n                            <span className=\"onInputError\">{error}</span>\n                            <RegistrationFormInput type=\"text\" touched={touched.nickName} id={\"nickName\"} handleChange={handleChange} errors={errors.nickName} />\n                            <RegistrationFormInput type=\"text\" id=\"email\" touched={touched.email} handleChange={handleChange} errors={errors.email} />\n\n                            {/* Password input with show password button */}\n                            <div className=\"passwordFirstInput\">\n                                <RegistrationFormInput \n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                                id=\"password\" \n                                touched={touched.password} \n                                errors={errors.password} \n                                />\n                                \n                                {/* Show - hide password toggler */}\n                                <img id=\"passwordToggle\" src={isPasswordHided ? showPasswordIcon : hidePasswordIcon} onClick={togglePassword} alt=\"\" />\n                            </div>\n                            <span className=\"onInputError\"> {touched.password ? errors.password : null}</span>\n                            <RegistrationFormInput\n                                touched={touched.repeatPassword}\n                                errors={errors.repeatPassword} id=\"repeatPassword\"\n                                type={isPasswordHided ? \"password\" : \"text\"}\n                                handleChange={handleChange} \n                            />\n\n                            <button\n                                // @ts-ignore \n                                onClick={handleSubmit} id=\"submit_reg\" type=\"submit\">Create account</button>\n                        </div>\n                    )\n                }}\n            </Formik>\n\n\n        </section>\n    )\n}\n\n","// Comoponents,Hooks\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Redux\nimport { getPassedShiftByID } from \"../../../../Redux/BlankShiftReducer\";\n// Styles\nimport \"../../../../Assets/Styles/PassedShift.css\";\n// Types\nimport { productType } from \"../../../../Redux/Types\";\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { UIButton } from \"../../../../Components/Button\";\n\n\nexport const PassedShift = () => {\n    const dispatch: any = useDispatch();\n    const navigate = useNavigate();\n\n    // Get shiftID from URL\n    const shiftID = useLocation().pathname.split(\"=\")[1];\n    \n    // Fetch passed shift data by ID\n    useEffect(() => {\n        dispatch(getPassedShiftByID(shiftID));\n    }, []); // Empty array of dependencies to run the effect only once\n\n    // Get passedShift data from Redux store\n    const PassedShift = useSelector(\n        (state: Global_state_type) => state.blankShift.passedShift\n    );\n\n\n    return (\n        <section className=\"container passed_shift_container translate_animation\">\n            <table>\n                {/* Display shift details */}\n                <tr>Смена от : <td>{PassedShift?.date}</td></tr>\n                <tr>Заготовщик :<td>{PassedShift?.employe}</td></tr>\n                <tr>Сделано позиций : <td>{PassedShift?.products.length}</td></tr>\n                {/* Display list of products */}\n                {PassedShift?.products.map((el: productType) => {\n                    return (\n                        <tr>\n                            <td>{el.name}</td>\n                        </tr>\n                    );\n                })}\n            </table>\n            {/* Go back link */}\n            <UIButton callback={() => navigate(-1)} text=\"Back\"/>\n        </section>\n    );\n};\n\n","\ntype ProdcustItemItemType = {\n    name: string,\n    isChecked: boolean,\n    id: string,\n    toggleFunction: (action: { type: string, payload: string }) => void\n}\n\n\nexport const ProdcustItem = (props: ProdcustItemItemType) => {\n\n    function toggle(id: string) {\n        props.toggleFunction({\n            type: 'toggle-item',\n            payload: id\n        })\n    }\n    return (\n        <li key={props.id}\n            // Is element checked flag\n            className={props.isChecked ? `checked_element` : `unchecked_element`}\n            onClick={() => { toggle(props.id) }} id={props.id}>\n\n            <span>{props.name}</span>\n        </li>\n    )\n};","// Coponents\nimport { ProdcustItem } from \"./PrroductItem\"\n// Types\nimport { productType } from \"../../../../Redux/Types\"\n\n\ntype prdocuctListType = {\n    products: productType[],\n    dispatch : (action : {type : string,payload : string}) => void\n}\n\n\nexport const ProductList = (props: prdocuctListType) => {\n    return (\n        <ul>\n            {props.products.map((el: productType) => {\n                 return (\n                    <ProdcustItem name={el.name} isChecked={el.checked as boolean} toggleFunction={props.dispatch} id={el.id as string} />\n                )\n            })}\n        </ul>\n    )\n}","import { productType } from \"../../../Redux/Types\"\n\n\ntype ActionType = {\n    type: string,\n    payload: any\n}\n\nexport const Reducer = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case 'toggle-item': {\n            console.log(action.payload)\n            return [\n                ...state.map((el: productType) => {\n                    if (el.id === action.payload) {\n\n                        return {...el,checked : !el.checked};\n                    }\n                    return el;\n                })\n            ]\n        }\n        case 'toggle-all': {\n            return [\n                ...state.map((el: productType) => {\n                    return { ...el, checked: !el.checked }\n                })\n            ]\n        }\n        case 'set-products' : {\n            console.log(action.payload)\n            return [\n                ...action.payload\n            ]\n        }\n        default:\n            return state;\n    }\n}","// REDUX\nimport { setCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\n// TYPES\nimport { productType, userPageType } from \"../../../../Redux/Types\";\n// React imports\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\n// IMPORT ICONS AND STYLES\nimport \"../../../../Assets/Styles/BlamkShift.css\"\nimport startIcon from \"../../../../Assets/Icons/icons8-start-64.png\"\n\n\n\n\ntype shiftConstructorTopPControls = {\n    products: productType[],\n    user: userPageType,\n    dispatchProducts : any\n}\n\n/**\n *  Check is all items was selected \n * @param products ArrayProductType\n * @returns boolean\n */\n\nfunction checkSelection (products : productType[]) {\n    let result = products.filter((el : productType) => el.checked == true);\n    if (result.length > 0) {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n};\n\n\nexport const CreateNewShiftControls = (props: shiftConstructorTopPControls) => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n    // Check if all items was selectrd or not\n    let isAllSelected = checkSelection(props.products);\n    // Create shift hanler ,get all data and creates new shift object and pass them into \n    // setCurrentShift thunk\n    const createShift = () => {\n        dispatch(setCurrentShiftByCompanyID(\n            props.user.team as string,\n            props.user.teamID as string,\n            props.products,\n            props.user.userName as string));\n\n        navigate(\"/begin-blank-shift\");\n\n    }\n    // Toggler fuction (comes from props)\n    function toggleAll () {\n        props.dispatchProducts({type : 'toggle-all'});\n    }\n    return (\n        <ul className={`controls`}>\n            <li \n                onClick={toggleAll}>\n                {isAllSelected ? \"Clear\" : \"Select all\"}\n            </li>\n            <li onClick={createShift}>Start\n                <img className=\"icon\" src={startIcon} alt=\"\" />\n            </li>\n\n        </ul>\n    )\n}","// React,React hooks\nimport { useEffect, useReducer } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n// Components\nimport { ProductList } from \"./PrdocuctList\";\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\n// Custom Hooks\nimport { Reducer } from \"../../Reducers/constructorReducer\";\n// Redux.Redux thunks\nimport { CreateNewShiftControls } from \"./CreateNewShiftControls\";\nimport { getProductsByCompanyID } from \"../../../../Redux/ProductReduxer\";\n\n\n\n\nexport const ShiftConstructorContainer = () => {\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    let products = useSelector((state: Global_state_type) => state.blankShift.productList);\n    const dispatch: any = useDispatch();\n    // Define a localal reducer with custom toggling state\n    let [state, dispatchProducts] = useReducer(Reducer, products);\n    // Get products and pass them into the local state\n    useEffect(() => {\n        dispatchProducts({\n            type: 'set-products',\n            payload: products\n        });\n    }, [products.length]);\n\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(user.teamID as string))\n    }, []);\n\n\n    return (\n        <section className=\"shift-constructor container\">\n            <CreateNewShiftControls products={state} user={user} dispatchProducts={dispatchProducts}/>\n            <ProductList products={state} dispatch={dispatchProducts}  />\n        </section>\n    )\n};","// extracted by mini-css-extract-plugin\nexport default {\"textbookContainer\":\"TextbookContainer_textbookContainer__-Nclp\",\"textbookContainer__tittle\":\"TextbookContainer_textbookContainer__tittle__lOmhR\",\"tittles\":\"TextbookContainer_tittles__veo34\",\"tittleItem\":\"TextbookContainer_tittleItem__anwlz\",\"article\":\"TextbookContainer_article__jOL3V\",\"articleImg\":\"TextbookContainer_articleImg__W00gf\"};","import { NavLink } from 'react-router-dom';\nimport styles from './Styles/TextbookContainer.module.css';\n\n\nexport const TextbookContainer: React.FC = () => {\n\n    return (\n        <section className={styles.textbookContainer}>\n            <h1 className={styles.textbookContainer__tittle}>Textbook</h1>\n            <ul className={styles.tittles}>\n                <li>\n                    <NavLink to={\"/article/name=tools\"}>\n                        Tools\n                    </NavLink>\n                </li>\n                <li className={styles.tittleItem}>\n                    <NavLink to={\"/article/name=distilation\"}>\n                        Distilation\n                    </NavLink>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=mixibg-techniques\">Mixing techniques</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=spirits\">Spirits</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=modern-techniques\">Modern techniques</a>\n                </li>\n                <li className={styles.tittleItem}>\n                    <a href=\"/article/name=coctails-categories\">Coctail categories</a>\n                </li>\n            </ul>\n        </section>\n    )\n}","import styles from \"../Styles/TextbookContainer.module.css\";\n\nexport const Distilation = () => {\n    return (\n        <article className={styles.article}>\n            <p>\n                Дистилля́ция (от лат. distillatio — стекание каплями; перегонка) — процесс испарения жидкости с последующим охлаждением и\n                конденсацией паров, который используется, прежде всего, для разделения жидких смесей и очистки выделяемых веществ.\n                Основан на различии в температурах кипения компонентов смеси. В зависимости от состава разделяемой смеси и целей процесса,\n                продуктами дистилляции могут быть как дистиллят (отогнанные фракции), обогащённый более летучими (низкокипящими) компонентами,\n                так и неотогнанный (кубовый) остаток, содержащий менее летучие (высококипящие) компоненты[1][2].\n            </p>\n            <img className={styles.articleImg} src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Simple_distillation_apparatus.svg/800px-Simple_distillation_apparatus.svg.png\" alt=\"Изображение апарата для дистиляции\" />\n            Различают дистилляцию с конденсацией пара в жидкость (при которой получаемый дистиллят имеет усреднённый состав вследствие перемешивания)\n            и дистилляцию с конденсацией пара в твёрдую фазу (при которой в конденсате возникает распределение концентрации компонентов).\n            Основными деталями дистилляционного устройства являются испаритель, предстявляющий собой обогреваемый контейнер (куб) для перегоняемой жидкости\n            , дефлегматор, для частичной конденсации пара, выходящего из испарителя, охлаждаемый конденсатор (холодильник), сборник дистиллята\n            и соединяющий их паропровод[1][2].\n            <h2>История : </h2>\n            <p>\n                Первые сведения о дистилляции относятся к I веку и упоминаются в работах греческих алхимиков в Александрии (Египет)[3].\n                В XI веке, у Авиценны, дистилляция упоминается как метод получения эфирных масел. C середины XIX века разрабатывается ректификация.\n                <br />\n                Применение :\n                Дистилляция применяется в промышленности и в лабораторной практике для разделения и рафинирования сложных веществ: для разделения смесей органических веществ (например, разделение нефти на бензин, керосин, дизельное топливо и др.; получение душистых веществ в парфюмерии; очистка этилового спирта) и для получения высокочистых неорганических веществ (например, металлов: бериллия, свинца, цинка, магния, кадмия, ртути; и неметаллов: серы, селена и др.).\n                <br />\n                Дистилляция с конденсацией пара в жидкость :\n                <br />\n                Простая перегонка — частичное испарение жидкой смеси путём непрерывного отвода и конденсации образовавшихся паров в холодильнике. Полученный конденсат называется дистиллятом, а неиспарившаяся жидкость — кубовым остатком.\n                Фракционная дистилляция (или дробная перегонка) — разделение многокомпонентных жидких смесей на отличающиеся по составу части, фракции, путём сбора конденсата частями с различной летучестью, начиная с первой, обогащенной низкокипящим компонентом. Остаток жидкости обогащён высококипящим компонентом. Для улучшения разделения фракций применяют дефлегматор.\n\n                Ректификация — способ дистилляции, при котором часть жидкого конденсата (флегма) постоянно возвращается в куб, двигаясь навстречу пару в колонне. В результате этого примеси, содержащиеся в паре, частично переходят во флегму и возвращаются в куб, при этом чистота пара (и конденсата) повышается.\n            </p>\n\n        </article>\n    )\n}","// -------------------------------------------\n// \n//.............................................THIS FILE CONTAINS AN ARRAY MATCHING ADDRESS \n//                                              STRINGS WITH THEIR CORRESPONDING COMPONENTS\n//                                              THESE ROUTES ARE USED BY THE FILE Router.tsx\n// -------------------------------------------\n// React imports\nimport React from \"react\";\n// ---------- IMPORT REACT COMPOENTS\n\nimport { Navigate } from \"react-router-dom\";\nimport { CheckListPage } from \"../Modules/ChecklistApp/Components/CheclListPage\";\nimport { ProductCardContainer } from \"../Modules/RecepiesApp/Components/ProductCardContainer\";\nimport { CocktailCard } from \"../Modules/KnowledjeBase/CoctrailCard\";\nimport { CreateTeam } from \"../Modules/TeamApp/CreateTeam\";\nimport { HomePage } from \"../Components/mainScreen\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { NewProduct } from \"../Modules/RecepiesApp/NewProduct/NewProduct\";\nimport { SecondStep } from \"../Modules/RecepiesApp/NewProduct/SecondStep\";\nimport { NewCheckList } from \"../Modules/ChecklistApp/Components/NewCheckList\";\nimport { KnowledgeBase } from \"../Modules/KnowledjeBase/KnowledgeBase\";\nimport { IngridientCard } from \"../Modules/KnowledjeBase/Ingridient\";\nimport { Registration } from \"../Modules/Auth/Registration\";\nimport { PassedShift } from \"../Modules/PremixesApp/Components/HistoryPage/PassedShiftItem\";\nimport { ShiftConstructorContainer } from \"../Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer\";\nimport { TextbookContainer } from \"../Modules/Textbook/TextbookContainer\";\nimport { Distilation } from \"../Modules/Textbook/Pages/Distilation\";\n\nconst LoginPage = React.lazy(() => import(\"../Modules/Auth/LoginPage\"));\nconst PremixesApp = React.lazy(() => import(\"../Modules/PremixesApp/Premixes\"));\nconst RecepiesApp = React.lazy(() => import(\"../Modules/RecepiesApp/RecepiesAppContainer\"));\nconst ChecklistApp = React.lazy(() => import(\"../Modules/ChecklistApp/Components/CheckLists\"));\nconst TeamApp = React.lazy(() => import('../Modules/TeamApp/TeamPageContainer'));\n// ---------- ROUTES STRINGS\nexport const SHIFT_MANAGER = '/shiftManager/*'\nexport const HOME = \"/home\"\nexport const COCKTAIL_CARD = \"/cocktail/:id\"\nexport const PREMIX_LIST = \"/premixes\"\nexport const ADD_PRODUCT = \"/add\"\nexport const PRODUCT_CARD = \"/card/:id\"\nexport const LOG_OUT = \"/logOut\"\nexport const REGISTRATION = \"/registration\"\nexport const NO_MATCH_ROUTE = \"*\"\nexport const BLANK_SHIFT = \"/blank-shift/*\"\nexport const STEP_2 = \"add-step-two\"\nexport const NEW_BLANK_SHIFT = \"/shiftManager/create-new\"  \nexport const CHECK_LISTS = \"/check-lists\"\nexport const PASSED_SHIFT = \"shiftManager/:id\"\nexport const CLAN_LISTS = \"/clan-list\"\nexport const CREATE_TEAM = \"/create-team\"\nexport const JOIN_TEAM = \"/join-team\"\nexport const NEW_CHECK_LIST = \"/new-check-list\"\nexport const CHECK_LIST = \"/check-lists/:id\"\nexport const KNIWLEDGE_BASE = \"knowledge-base\"\nexport const INGRIDIENT = \"/ingridient/:id\"\nexport const HISTORY = '/blank-shift/history'\nexport const TEXTBOOK = '/textbook'\nexport const ARTICLE = 'article/:name=distilation'\n\n// PRIVATE ROUTES ARRAY\n// These routes are available only to authorized users\n// If an unauthorized user attempts to access, they are redirected to the login page\n\nexport const PRIVATE_ROUTES : ROUTE[] = [\n    {\n        path : HISTORY,\n        element : <h1>History</h1>\n    },\n    {\n        path : HOME,\n        element : <HomePage/>\n    },\n    {\n        path : COCKTAIL_CARD,\n        element : <CocktailCard/>\n    },\n    {\n        path : CREATE_TEAM,\n        element : <CreateTeam/>\n    },\n    {\n        path : SHIFT_MANAGER,\n        element : <PremixesApp/>\n    },\n    {\n        path : CHECK_LIST,\n        element : <CheckListPage/>\n    },\n    {\n        path : PASSED_SHIFT,\n        element : <PassedShift/>\n    },\n    {\n        path : BLANK_SHIFT,\n        element : <PremixesApp/>\n    },\n    {\n        path : PREMIX_LIST,\n        element : <RecepiesApp/>\n    },\n    {\n        path : PRODUCT_CARD,\n        element : <ProductCardContainer/>\n    },\n    {\n        path : NEW_BLANK_SHIFT,\n        element : <ShiftConstructorContainer/>\n    },\n    {\n        path : CHECK_LISTS,\n        element : <ChecklistApp/>\n    },\n    {\n        path : NO_MATCH_ROUTE,\n        element : <Navigate to=\"/home\" />\n    },\n    {\n        path : TEXTBOOK,\n        element : <TextbookContainer/>\n    },\n    {\n        path : ADD_PRODUCT,\n        element : <NewProduct isDarkTheme={true}/>\n    },\n    {\n        path : STEP_2,\n        element : <SecondStep isDarkTheme={true}/>\n    },\n    {\n        path : CLAN_LISTS,\n        element : <TeamApp/>\n    },\n    {\n        path : NEW_CHECK_LIST,\n        element : <NewCheckList/>\n    },\n    {\n        path : KNIWLEDGE_BASE,\n        element : <KnowledgeBase/>\n    },\n    {\n        path : INGRIDIENT,\n        element : <IngridientCard/>\n    },\n    {\n        path : ARTICLE,\n        element : <Distilation/>\n    }\n]\n// PUBLICK ROUTES ARRAY\n// This routes are accessible for all users includeing not authiorized users\n// \nexport const PUBLICK_ROUTES : ROUTE [] = [\n    {\n        path : LOG_OUT,\n        element : <LoginPage/>\n    },\n    // {\n    //     path : NO_MATCH_ROUTE,\n    //     element : <Navigate to={\"/logOut\"}/>\n    // },\n    {\n        path : REGISTRATION,\n        element : <Registration/>\n    }\n\n]","\n// ---------- REACT & REACT HOOKS\nimport React, { Suspense } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ---------- REDUX\nimport { Global_state_type } from \"../Redux/Store\";\n\n// ---------- IMPORT PROVATE & PUBLICK ROUND & ROUTE INTERFACE\nimport { PRIVATE_ROUTES, PUBLICK_ROUTES } from \"./Routes\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { Preloader } from \"../Modules/PremixesApp/Components/Preloader\";\n\n// The router component iterates over the routes array and returns a route component\n//  with the corresponding react component. if user is not authorized iterates over PUBLKICK_ROUTES array\n// anotherwise over PRIVATE_ROUTES\n\n\nconst Router = React.memo(() => {\n    // Get Auth state from redux\n    const isAuth = useSelector((state: Global_state_type) => { return state.App.isAuth })\n\n    if (isAuth) {\n        // If authorized map only in PRIVATE_ROUTES\n        return (\n            <div className=\"content\">\n                <Suspense fallback={<Preloader />}>\n                    <Routes>\n                        {PRIVATE_ROUTES.map((route: ROUTE) => {\n                            return (\n\n                                <Route key={route.path} element={route.element} path={route.path} />\n\n                            )\n                        })}\n                    </Routes>\n                </Suspense>\n            </div>\n        )\n    }\n\n    else {\n        return (\n            <>\n                <Routes>\n                    {PUBLICK_ROUTES.map((route: ROUTE) => <Route key={route.path} path={route.path} element={route.element} />)}\n                </Routes>\n            </>\n        )\n    }\n\n})\n\nexport default Router;"],"names":["UIButton","props","params","_jsx","id","type","className","onClick","callback","children","text","useProductFilter","initial","filter","setFilter","useState","dispatch","useDispatch","teamID","useSelector","state","App","user","useEffect","getProductsByCompanyID","length","premixes","el","name","includes","value","UseToggle","initialValue","setState","useTaskList","navigate","useNavigate","useLocation","pathname","split","result","chcekLists","checkLists","find","deleteHandler","deleteChekListThunk","useChecklistList","getCheckListsthunk","ChecklistDotsMenu","isOpen","setIsOpen","toggle","_jsxs","styles","checklist","CheckListPage","isModal","setModal","tasks","map","index","ProductComposition","parseComposition","composition","ProdicuCalculater","_props$product","setValue","console","log","product","placeholder","onChange","event","currentTarget","Number","calculateAndParseIntoComponent","ProductDescription","isOpened","setIsOpened","isEditMode","productActions","description","ProductCard","_props$card","_props$card2","_Fragment","setEditMode","card","useInput","arguments","undefined","maxLength","Editor","input","setInput","key","setKey","array","Object","keys","values","e","DotsMenu","productID","premixAPI","payload","deleteProductCrad","Reducer","action","ProductCardContainer","useProductCard","location","products","actualProductCard","setProductCardThunk","useReducer","userTeamID","productTeamID","_state$premixes$actua","Preloader","CocktailCard","getCocktailByID","currentCocktail","knowledgeBase","src","strDrinkThumb","alt","strDrink","strGlass","strIBA","strCategory","strInstructions","CreateTeam","newTeam","clans","clanActions","onSubmit","createClanThunk","userID","userName","initializeThunk","MainPageNavigation","HomePage","profile","concat","team","NewIngridientSingleForm","yup","shape","typeError","min","max","required","Formik","initialValues","enableReinitialize","validateOnBlur","newIngridient","newCardActions","_ref","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","autoComplete","FirstStep","forms","setForms","isDarkTheme","onNameChange","NewProduct","SecondStep","newProduct","newCard","createnewProduct","convertObjectToArrayOfObjects","obj","isVisibleForAll","createNewIngridientCard","NewCheckList","nameInput","nameValue","taskInput","taskValue","setTasks","onError","errorMessage","validate","regExp","isError","setError","errorText","setErrorText","pattern","test","useValidator","createCheckList","CheckListsAPI","CHECK_LIST","task","onAddClickHandler","ProductPreview","img","CoctailList","getCocktailsThunk","cocktailsFromState","cocktails","getCocktailsByName","cocktail","idDrink","PremixesList","getPublicPremixes","KnowledgeBaseContent","SelectionTabs","tabWidth","Math","floor","labels","Box","sx","width","marginBottom","Tabs","label","Tab","fontSize","color","KnowledgeBase","React","newValue","IngridientCard","getCurrentIngridient","currentIngridient","currentSpirit","image","displayName","definition","production","RegistrationFormInput","Registration","isPasswordHided","setPasswordHided","error","togglePassword","nickName","companyName","email","password","repeatPassword","async","authApi","catch","ex","message","validationSchema","validationShema","showPasswordIcon","hidePasswordIcon","PassedShift","shiftID","getPassedShiftByID","blankShift","passedShift","date","employe","ProdcustItem","isChecked","toggleFunction","ProductList","checked","CreateNewShiftControls","isAllSelected","dispatchProducts","createShift","setCurrentShiftByCompanyID","ShiftConstructorContainer","productList","TextbookContainer","NavLink","to","href","Distilation","LoginPage","PremixesApp","RecepiesApp","ChecklistApp","TeamApp","PRIVATE_ROUTES","path","element","Navigate","PUBLICK_ROUTES","isAuth","Suspense","fallback","Routes","route","Route"],"sourceRoot":""}