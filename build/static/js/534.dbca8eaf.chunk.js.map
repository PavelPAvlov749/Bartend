{"version":3,"file":"static/js/534.dbca8eaf.chunk.js","mappings":"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","sources":["Modules/ChecklistApp/CheckListPreview.tsx","Modules/ChecklistApp/Components/ChekListItem.tsx","Modules/ChecklistApp/Components/Hooks.tsx","Modules/ChecklistApp/Components/CheckLists.tsx","Modules/ChecklistApp/Components/CheclListPage.tsx","Components/Premixes/BlankList.tsx","Components/Ingridients/Premixes.tsx","Helpers/CustomHooks.tsx","Components/Ingridients/Composition.tsx","Components/Ingridients/ProductCalculator.tsx","Components/Ingridients/ProductDescription.tsx","Components/Ingridients/ProductCard.tsx","Modules/ChecklistApp/Components/Hooks..tsx","Components/Ingridients/Editor.tsx","Components/Ingridients/Menu.tsx","Components/Ingridients/Reducer.ts","Components/Ingridients/ProductCardContainer.tsx","Components/Ingridients/UseProductCard.tsx","Components/KnowledjeBase/CoctrailCard.tsx","Components/Teams/CreateTeam.tsx","Components/Teams/JoinTeam.tsx","webpack://bartend/./src/Assets/Styles/HomePage.module.css?cf67","Components/ThemeSwitcher.tsx","Components/mainScreen.tsx","Components/NewProduct/NewIngridientSingleForm.tsx","Components/NewProduct/FirstStep.tsx","Components/NewProduct/NewProduct.tsx","Components/NewProduct/SecondStep.tsx","Components/Teams/ClanList.tsx","Modules/ChecklistApp/Components/NewCheckList.tsx","Components/KnowledjeBase/CocktailPrewiew.tsx","Components/KnowledjeBase/CocktailList.tsx","Components/KnowledjeBase/SpiritList.tsx","Components/KnowledjeBase/KnowledgeBaseContent.tsx","Components/KnowledjeBase/KnowledgeBase.tsx","Components/KnowledjeBase/Ingridient.tsx","Components/Registration/LoginPage.tsx","Components/Registration/RegistrationForm.tsx","Components/Registration/Registration.tsx","Modules/PremixesApp/Components/CurrentShiftPage/ProgressBar.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridentItem.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridientList.tsx","Modules/PremixesApp/Components/CurrentShiftPage/EmtyShiftPage.tsx","Modules/PremixesApp/Reducers/Reducer.ts","Modules/PremixesApp/Components/CurrentShiftPage/CurrentShift.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftPreview.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftsHistory.tsx","Modules/PremixesApp/Components/MainPage/MainPage.tsx","Modules/PremixesApp/Components/CurrentShiftPage/useProducts.tsx","Modules/PremixesApp/Components/MainPage/UseNabar.tsx","Modules/PremixesApp/Premixes.tsx","Modules/PremixesApp/Components/HistoryPage/PassedShiftItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrroductItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrdocuctList.tsx","Modules/PremixesApp/Reducers/constructorReducer.tsx","Modules/PremixesApp/Components/ConstructorPage/CreateNewShiftControls.tsx","Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer.tsx","Router/Routes.tsx","Router/Router.tsx"],"sourcesContent":["import { ReactJSXElement } from \"@emotion/react/types/jsx-namespace\";\nimport { NavLink } from \"react-router-dom\";\n\n\n\n\n\nexport const CheckListPreview = (props: { name: string, tasks: string[], id: string }) => {\n    let jsxTasks: ReactJSXElement[] = [];\n    function renderTasksPreview(tasks: string[]) {\n        if (tasks.length <= 4) {\n            for (let i = 0; i < tasks.length; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length > 4) {\n            for (let i = 0; i < 4; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length == 0) {\n            jsxTasks.push(<span className=\"preview__item--no-task\">No tasks added ...</span>)\n        }\n\n    }\n    renderTasksPreview(props.tasks);\n    return (\n        <li key={props.id} className=\"cheklist-preview__item\">\n            <NavLink key={props.id} to={`/check-lists/id=${props.id}`}>\n                <h3>{props.name}</h3>\n                {jsxTasks.map((el: ReactJSXElement) => {\n                    return (\n                        <>\n                            {el}\n                            <br />\n                        </>\n                    )\n                })}\n            </NavLink>\n\n        </li>\n    )\n}","// React,hooks\nimport { NavLink, useNavigate } from \"react-router-dom\"\n// Types\nimport { checkListType } from \"../../../Redux/CheckListReducer\"\nimport { CheckListPreview } from \"../CheckListPreview\";\n\n\nexport const ItemList = (props: { checkLists: checkListType[] }) => {\n    const navigate = useNavigate();\n\n    const onClickHandler = function () {\n        // navigate by click\n        navigate(\"/new-check-list\");\n    }\n    return (\n        <div className=\"single_check_list container\">\n            <ul className=\"checklis-list\">\n            {props.checkLists.map((el: checkListType) => {\n                return (\n                    <CheckListPreview name={el.name} tasks={el.tasks} id={el.id}/>\n                )\n            })}\n            </ul>\n            {/* If there is no existing cheklists propose to create */}\n            <button className=\"confirm_button\" \n            onClick={onClickHandler}>Добавить</button>\n        </div >\n    )\n}","\n// React,hooks\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useEffect } from \"react\";\n// Redux,thunks\nimport { checkListType, deleteChekListThunk, getCheckListsthunk } from \"../../../Redux/CheckListReducer\";\n// Types\n\n\n\n\nimport { Global_state_type } from \"../../../Redux/Store\";\n/**\n* @params none\n* \n* \n* Return a typple with specifik checklist object that contains \n* ist of tasks and handler to delete them\n* @returns [checklist,deleteHanler]\n*/\n\nexport const useTaskList = (): [checkListType | null, () => void] => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    let id = useLocation().pathname.split(\"=\")[1];\n    let checklist: checkListType | null = useSelector((state: Global_state_type) => {\n        let result = state.chcekLists.checkLists.find((el: checkListType) => el.id === id);\n        if (result) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    });\n    const deleteHandler = () => {\n        dispatch(deleteChekListThunk(id))\n        navigate(\"/check-lists\")\n    };\n    return [checklist, deleteHandler];\n}\n\n\n/**\n * \n * Return a list of checklists for current establishment\n * @returtn array checkListType[]\n */\nexport const useChecklistList = () => {\n    const dispatch: any = useDispatch();\n    // Get team id to fetch data by him\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Fetch data\n    useEffect(() => {\n        dispatch(getCheckListsthunk(teamID as string))\n    }, []);\n    let checkLists = useSelector((state: Global_state_type) => state.chcekLists.checkLists);\n    \n    return checkLists;\n}","// React,Components,ReactHooks\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { ItemList } from \"./ChekListItem\"\n// CustomHooks\nimport { useChecklistList } from \"./Hooks\";\n// Styles\nimport \"../../../Assets/Styles/CheckLists.css\"\n\n\nexport const CheckLists = () => {\n\n    let checklists = useChecklistList();\n\n    return (\n        <section className=\"check_lists_container container page_apperas_animation\">\n            <div className=\"ckeck-lists-content\">\n                {checklists.length > 0 ?\n                    <ItemList checkLists={checklists} />\n                    :\n                    <section className=\"check_lists_container__empty-check-list-container\">\n                        <h3>\n                            Чек листов нет\n                        </h3>\n                        <NavLink to={\"/new-check-list\"}>Добавить</NavLink>\n                    </section>\n                }\n            </div>\n\n        </section>\n    )\n}","// Assets\nimport { useState } from \"react\";\nimport menuIcon from \"../../../Assets/Icons/menu.png\"\n// Hooks\nimport { useTaskList } from \"./Hooks\";\n// Styles\nimport \"../../../Assets/Styles/CheckLists.css\"\n\nexport const Modal =  () => {\n    return (\n        <section className=\"modal\">\n            <span>Modal</span>\n            <span>Edit</span>\n            <span>Delete</span>\n            <button className=\"modal_btn\">Close</button>\n        </section>\n    )\n}\n\nexport const CheckListPage = () => {\n    // Get checklist object amd delete hadler from hook\n    let [checklist, deleteHandler] = useTaskList();\n    let [isModal,setModal] = useState<boolean>(false);\n    function toggleModal () {\n        setModal(!isModal);\n    }\n    return (\n        <section className=\"single-check-list container {}\">\n            {isModal ? <Modal/> : null}\n            <div className=\"check-list-controls\">\n                <span className=\"check-list__menu-back\">Back ...</span>\n                <img className=\"check-list__menu-icon\" src={menuIcon} onClick={toggleModal}></img>\n            </div>\n\n            <ul className=\"tasks\">\n                {checklist?.tasks.map((el: string, index: number) => {\n                    return (\n                        <li className=\"tasks-item\">\n                            <div>\n                            <input className=\"tasks-item__checkbox\" type=\"checkbox\" />\n\n                            </div>\n                            <span>{index + 1 + \".\" + el}</span>\n                            <br />\n                        </li>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","\nimport { productType } from \"../../Redux/Types\";\nimport { NavLink } from \"react-router-dom\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\nimport empty from \"../../Assets/Icons/icons8-empty-90.png\"\nimport { parseElementNameToString } from \"../../Helpers/Helpers\";\n\n\n\nexport const PremixesList = (props: { blanks: productType[] ,dispatch : any,Navigate : (a : string) => any}) => {\n\n    if (props.blanks.length > 0) {\n        return (\n            <>\n                {props.blanks.map((el : productType) => {\n                    return (\n                        <div key={el.id} className=\"element\" onClick={() => {\n                            props.dispatch(productActions.setAcualProductCard(el))\n                            props.Navigate(\"/card/id=\" + el.id)\n                            }}>\n                        \n                            <NavLink to={\"/product/id=\" + el.id}>\n                            <span>{parseElementNameToString(el.name)}</span>\n                            </NavLink>\n                         \n                            <br />\n                          \n                        </div>\n                    )\n                })}\n            </>\n        )\n        \n              \n    }else{\n        return (\n            <div className=\"nothing_found\">\n            <img src={empty} className=\"emtyIcon\" alt=\"\" />\n            <h1>Список пуст</h1>\n        </div>\n        )\n    }\n}","// ----------------\n// REACT AND HOOKS\n// ----------------\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { useNavigate } from \"react-router-dom\";\n// ----------------\n// STYLES\n// ----------------\nimport \"../../Assets/Styles/Premixes.css\"\n// ----------------\n// IMPORT ICONS\n// ----------------\n// import searchIcon from \"../../Assets/icons8-search-100.png\";\nimport searchIcon from \"../../Assets/Icons/icons8-search-100.png\"\nimport backIcom from \"../../Assets/Icons/icons8-back-90.png\";\nimport addIcon from \"../../Assets/Icons/icons8-add-100.png\";\nimport backIconsLight from \"../../Assets/Icons/icons8-reply-arrow-100.png\";\nimport addIconLight from \"../../Assets/Icons/icons8-add-100 (1).png\";\nimport searchIconLight from \"../../Assets/Icons/icons8-search-100(1).png\";\n// ----------------\n// IMPORT COMPONENTS\n// ----------------\nimport { PremixesList } from \"../Premixes/BlankList\";\n// ----------------\n// IMPORT HELPERS\n// ----------------\nimport { useProductFilter, useProducts } from \"../../Helpers/CustomHooks\";\n\n\n\n\nexport const Premixes = () => {\n    \n    const dispatch: any = useDispatch();\n    const isDarkTheme = useSelector((state: Global_state_type) => state.App.isDarktheme);\n    const [products,filterProducts] = useProductFilter(\"\");\n    let [isSearch, setIsSearch] = useState(false);\n    const Navigate = useNavigate();\n\n    return (\n        <section className={isDarkTheme ? \"container translate_animation DarkTheme\" : \"container translate_animation LightTheme\"}>\n            {isSearch ? \n            <div className=\"search_controls\">\n                \n                <input className=\"search\" onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {filterProducts(e.currentTarget.value)}}></input>\n                <button id=\"search_controls__button\" onClick={() => {setIsSearch(false)}}>Отмена</button>\n            </div>\n         :\n                <ul className=\"controls\">\n                    <li className=\"menu-item\" onClick={() => {Navigate(-1)}}>\n                        <span>Назад</span>\n                        <img className=\"icon\" src={isDarkTheme ? backIcom : backIconsLight} id=\"back\"  alt=\"\" />\n                    </li>\n                    <li className=\"menu-item\" onClick={() => {Navigate(\"/add\")}}>\n                      <span >Добавить</span> \n                        <img className=\"icon\" src={isDarkTheme ? addIcon : addIconLight}  alt=\"\" />\n                    </li>\n                    <li  className=\"menu-item\"onClick={() => { setIsSearch(!isSearch) }} >\n                        <span >Поиск</span>\n                        <img className=\"icon\" src={isDarkTheme ? searchIcon : searchIconLight} alt=\"\" />\n\n                    </li>\n\n\n                </ul>\n            }\n\n            <section className=\"conteiner translate_animation\">\n                <PremixesList dispatch={dispatch} Navigate={Navigate} blanks={products || []} />\n\n            </section>\n        </section>\n    )\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { productType } from \"../Redux/Types\";\nimport { set } from \"firebase/database\";\nimport { getProductsByCompanyID } from \"../Redux/ProductReduxer\";\n\n\nexport const useProducts = () => {\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        return state.premixes.premixes\n    })\n    if(products.length > 0) {\n        return products\n    }\n    else{\n        return []\n    }\n}\n\nexport const useProductFilter = (initial : string) : [productType[],(e : string) => void] => {\n    const [filter,setFilter] = useState(initial)\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        if(filter.length === 0) {\n            return state.premixes.premixes\n        }\n        return state.premixes.premixes.filter((el : productType) => el.name.includes(filter))\n    })\n    const updateFilter = (value : string) => {\n        setFilter(value)\n    }\n    return [products,updateFilter]\n    \n}\n\nexport const useWindowInnerWidth = () => {\n    const [windowWidth,setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        const handleResizeWindow = () => setWindowWidth(window.innerWidth)\n        window.addEventListener(\"resize\",handleResizeWindow)\n        return () => {\n            window.removeEventListener(\"resize\",handleResizeWindow)\n        }\n    },[])\n    return windowWidth\n}\n\nexport const useTheme = () => {\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return theme\n}\n\nexport const useDebounce = (callback : (...args:any) => {},delay : number,value : any)=> {\n    const timer = useRef(null);\n    const dispatch : any = useDispatch();\n    const DebounceCallback = useCallback((...args : any) => {\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        else {\n            setTimeout(() => {\n                console.log(\"DISPATHED\")\n               dispatch(callback(value));\n            },delay)\n        }\n    },[callback,delay]);\n\n    console.log(DebounceCallback)\n    return DebounceCallback;\n}\n\n\n/**\n * \n * @param initialValue initial value for boolean flag\n * @returns [actualState,TogglerFunction]\n */\nexport const UseToggle = (initialValue : boolean) : [boolean,() => void] => {\n\n    let [state,setState] = useState<boolean>(initialValue);\n    \n    function toggle () {\n        setState(!state);\n    }\n\n    return [state,toggle];\n}","// React,ReactHooks\nimport {useState } from \"react\"\n// Redux,ThunkActions\nimport { productType } from \"../../Redux/Types\";\n// Helpers\nimport { parseComposition } from \"../../Helpers/Helpers\";\n\n\n// DECLARE PROPS TYPE\n\n// -----------------\ntype ProductCompositionType = {\n    isEditMode: boolean,\n    composition: {}[],\n    card: productType\n}\n// -----------------\n\n\n/**\n * A component displaying the composition of the current product. \n * And also the product card editor depending on the isEditMode prop\n *\n * @param props {isEditMode : boolean,composition {}[] ,card}\n * \n * @returns React.Element\n */\nexport const ProductComposition = (props: ProductCompositionType) => {\n    // Hide or show component state\n    let [isOpen, setIsOpen] = useState<boolean>(false);\n\n    // Show|Hide toggler function\n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // If isOpen === false render the Show button\n    if (!isOpen) {\n        return (\n            <button onClick={toggle}>Composition</button>\n        )\n    }\n\n    else {\n        return (\n            <section>\n                <button onClick={toggle}>Composition</button>\n                <p className=\"composition\">{parseComposition(props.composition)}</p>\n            </section>\n        )\n    }\n\n\n}","// React,ReactHooks\nimport React, { useState } from \"react\";\n// Helpeers\nimport { calculateAndParseIntoComponent } from \"../../Helpers/Helpers\";\n// Types\nimport { productType } from \"../../Redux/Types\";\n\n\n\nexport const ProdicuCalculater = (props : { product: productType | null}) => {\n    // Multiplier value\n    let [value, setValue] = useState(1);\n    console.log(props.product);\n    // Input Handler\n    // Function to calculate value of prdoduct composition\n    function calculate(event: React.SyntheticEvent<HTMLInputElement>) {\n        if (event.currentTarget.value.length < 1) {\n            setValue(1)\n        } else {\n            setValue(Number(event.currentTarget.value))\n        }\n    };\n\n    return (\n      \n            <section className=\"product-card__calculator\">\n                <input type=\"number\" placeholder=\" How much do we need?\" onChange={calculate} />\n                <br />\n                <div className=\"calculated_result\">\n                    {calculateAndParseIntoComponent(props.product?.composition as {}[], value)}\n                </div>\n            </section>\n\n\n    )\n}","// React,ReactHooks\nimport { Dispatch, useState } from \"react\"\n// Styles and Assets\nimport \"../../Assets/Styles/PeoduxtCard.css\";\n// Redux,Reducers\nimport { useDispatch } from \"react-redux\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\n\n\n// Define a `props` type to component\ntype propsType = {\n    setState: Dispatch<{ type: string, payload: any }>,\n    isEditMode: boolean,\n    description: string\n}\n\n/**\n * \n * @param props propsType\n * ProductCard Description component\n * Render actual card description and set them if 'EditMode' is enabled\n * \n * @returns React.Ellement\n */\n\nexport const ProductDescription = (props: propsType) : React.ReactElement => {\n    // Is Description Opened\n    // Shoow <p></p> ellement if true anoterwose just render the Button\n    let [isOpened, setIsOpened] = useState<boolean>(false);\n\n    const dispatch: any = useDispatch();\n    // Description open Toggler function\n    function toggle() {\n        setIsOpened(!isOpened);\n    }\n    // OnChange event handler that we use in textarea if props.isEditMode === true\n    function onChangeHandler(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    }\n \n    if (!isOpened) {\n        // Render Description or textarea to Edit descritpion\n        return (\n            <section >\n                <button onClick={toggle}>Dscription</button>\n                {!props.isEditMode ? <p className=\"composition\">{props.description}</p> :\n                    <textarea\n                        onChange={onChangeHandler}\n                        className=\"description-textarea\"\n                        value={props.description}></textarea>}\n            </section>\n        )\n    }\n    else {\n        return (\n            <button onClick={toggle}>Description</button>\n        )\n    }\n\n}","// TYPES\nimport { productType } from \"../../Redux/Types\"\n// Components\nimport { ProductComposition } from \"./Composition\"\nimport { ProdicuCalculater } from \"./ProductCalculator\"\nimport { ProductDescription } from \"./ProductDescription\"\n\n// DEFINE A PROP TYPE\n// ------------------\ntype CardPropsType = {\n    isEditMode : {isEditMode : boolean},\n    setEditMode : any,\n    card : productType,\n}\n// -----------------\n\n/**\n * Render product card page if isEditMode equals to false in parent component\n * @param props CardPropdType\n * @returns React.Element\n */\n\nexport const ProductCard : React.FC<CardPropsType> = (props : CardPropsType) => {\n    return (\n        <>\n            <ProductDescription isEditMode={props.isEditMode.isEditMode} setState={props.setEditMode} description={props.card?.description as string} />\n            <ProductComposition card={props.card as productType} isEditMode={props.isEditMode.isEditMode} composition={props.card?.composition as {}[]} />\n            <ProdicuCalculater product={props.card} />\n        </>\n    )\n\n}","// React,Hooks\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\"\n\n// Redux,Redux-thunks\n\ntype inputEventType = React.SyntheticEvent<HTMLInputElement>;\ntype setStateType = Dispatch<SetStateAction<string>>;\n\n/**\n//  * INPUTS HOOK\n * \n * @param value default value <string>\n * @param placeholder input placeholder text <string>\n * @returns InputElement : input element : <ReactNode>\n *          state : actual state value : <string>\n *          setState : Dispatch<SetStateAction<string>>\n */\n\nexport const useInput = (value: string = \"\", placeholder: string): [ReactNode, string,setStateType] => {\n    // Input state set default from params\n    const [state, setState] = useState(\"\");\n\n    // On changeHandler tah will be passed into input \n    function onChangeHandler(event: inputEventType) {\n        setState(event.currentTarget.value);\n    };\n\n    let InputElement = <input placeholder={placeholder} value={state} onChange={onChangeHandler} maxLength={100}/>;\n\n    // Return typple with 3 elements [input,state,setState]\n    return [InputElement, state, setState];\n\n\n}\n\n/**\n * VALIDATOR HOOK\n * \n * @param regExp pattern to validate\n * @returns tupple [isError,ErrorText,vslidate function]\n * \n */\nexport const useValidator = (regExp : RegExp) : [boolean,string,(val : string) => void] => {\n    // Boolean error flag\n    let [isError,setError] = useState<boolean>(false);\n    // error message text\n    let [errorText,setErrorText] = useState<string>(\"\");\n    \n    // Define a pattern to validate frpm params\n    let pattern = regExp;\n\n    function validate (value : string) {\n        if(!pattern.test(value))\n        {\n            setError(true);\n            setErrorText(\"Error : invalid input\");\n        }\n    }\n\n    return [isError,errorText,validate]\n}","// React,ReactHooks\nimport { useDispatch } from \"react-redux\"\n// Redux,Actions\nimport { AnyAction, Dispatch } from \"redux\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\n// Types\nimport { ReactNode, useState } from \"react\";\nimport { productType } from \"../../Redux/Types\"\n// Custom hooks\nimport { useInput } from \"../../Modules/ChecklistApp/Components/Hooks.\";\n\n\n// DECLARE PROP TYPE\n\n// -----------------\ntype EditorPropType = {\n    card: productType,\n}\n\n/** \n * Product card editor component\n * \n * Render only when the isEdit flag is true\n * \n * @param props card : prdocuctType\n * @returns ReactEllement\n */\n\nexport const Editor: React.FC<EditorPropType> = (props: EditorPropType) => {\n    const dispatch: Dispatch<AnyAction> = useDispatch();\n    // Textarea onChange handler\n    function onChange(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    };\n    // Delete handler function \n    function deleteHandler(event: React.SyntheticEvent<HTMLSpanElement>) {\n        dispatch(productActions.deleteComponent(event.currentTarget.id));\n    };\n    // Compoennts to be added state from useInput custom Hook\n    let [input, setInput] = useInput(\"Name\", \"Type name\");\n    // New ingridient state\n    let [key, setKey] = useState(\"\");\n    let [value, setValue] = useState(\"\");\n    // Add component Handler\n    function addComponent() {\n        dispatch(productActions.addComonent({ [key]: value }));\n        setValue(\"\");\n        setKey(\"\");\n    }\n    \n    return (\n        <section className=\"editor\">\n            <h3 className=\"editor__tittle\">Description : </h3>\n            <textarea\n                onChange={onChange}\n                className=\"editor__desctiption-textarea\"\n                // Get actual value from store -> prpops\n                value={props.card.description}>\n            </textarea>\n            <h3 className=\"editor__tittle\">Composition : </h3>\n\n            <ul className=\"editor__composition\">\n                {props.card.composition.map((el: {}, index: number, array: {}[]) => {\n                    return (\n                        <li className=\"editor__item\">\n                            <span>{Object.keys(el)[0] + \" : \"}</span>\n                            <span >{Object.values(el)[0] as ReactNode}</span>\n                            {/* DELETE BUTTON */}\n                            <span\n                                id={Object.keys(el)[0]}\n                                className=\"editot__component__delete\"\n                                onClick={deleteHandler}>Delete</span>\n                            <br />\n                        </li>)\n                })}\n            </ul>\n            {/* Render inputs */}\n            <div className=\"editor__newcomponent-input\">\n                {/* KEY INPUT */}\n                <input type=\"text\"\n                 value={key} placeholder=\"Name\" \n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setKey(e.currentTarget.value)}}/>\n                 {/* VAKUE INPUT */}\n                <input type=\"text\"\n                 value={value} \n                 placeholder=\"Value\"\n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setValue(e.currentTarget.value)}} />\n            </div>\n            <button onClick={addComponent}>Add</button>\n        </section>\n    )\n}","// React,ReactHooks\nimport { Dispatch } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\";\n// Redux,Reducers\nimport { deleteProductCrad } from \"../../Redux/ProductReduxer\";\nimport { UseToggle } from \"../../Helpers/CustomHooks\";\nimport { useDispatch } from \"react-redux\";\n// Types\nimport { productType } from \"../../Redux/Types\";\nimport { premixAPI } from \"../../services/Firebase/PremixAPI\";\n\n\n// PROPS TYPE\n// --------------\ntype DotsMenuPropsType = {\n    setEditMode: Dispatch<{ type: string, payload: any }>,              //EditMode toggler\n    isEditMode: boolean,\n    card: productType                                                  //Prdouct data\n}\n// --------------\n\n\n\n/**\n * DOTS   MENU COMPONENT : \n * \n * Contains isEditMode toggling function and delete product card\n * \n * @param props DotsMenuPropsType {Dispatch,isEditMode,card}\n * @returns React.Ellement\n */\nexport const DotsMenu = (props: DotsMenuPropsType) => {\n\n    // Get boolean state and toggler function from hook\n    // If isOpen === true render menu with containig items anotherwise\n    // Render three dots menu icon\n    let [isOpen, toggle] = UseToggle(false);\n\n    // Ge id of prdocut card\n    const productID = useLocation().pathname.split(\"=\")[1]\n\n    // Navigate function\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    // Delete button handller\n    function deleteProduct() {\n        dispatch(deleteProductCrad(productID));\n        navigate(\"/premixes\");\n    }\n\n    // Eidt mode toggler\n    function setEditMode() {\n        props.setEditMode({ type: \"toggleEditMode\", payload: undefined }); //FIX THIS `UNDEFINED` LATER\n        toggle();\n    }\n    // SaveChanges handler \n    function saveChanges () {\n        premixAPI.updatePrdocurCard(props.card);\n        props.setEditMode({type : 'toggleEditMode',payload : undefined});\n        toggle();\n    }\n    if (!isOpen) {\n        return (\n            <section className=\"dots-menu\" onClick={toggle}>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n\n            </section>\n        )\n\n    }\n    else {\n        return (\n            <section className=\"menu-options\">\n                {props.isEditMode && <span className=\"save-changes\" onClick={saveChanges}>{\"Save changes\"}</span>}\n                <span onClick={setEditMode}>{props.isEditMode ? \"Cancel Editing\" : \"Edit\"}</span>\n                <span onClick={deleteProduct}>Delete</span>\n                <span onClick={toggle}>Close</span>\n\n            </section>\n        )\n    }\n\n}\n","const TOGGLE_EDIT_MODE = \"toggleEditMode\";\n\n\ntype ActionType = {\n    type : string,\n    payload : any\n}\ntype initialStateType = {\n    isEditMode : boolean\n}\n\nexport const Reducer = (state : initialStateType,action : ActionType) => {\n    switch(action.type) {\n        case TOGGLE_EDIT_MODE : {\n            return {\n                ...state,\n                isEditMode : !state.isEditMode\n            }\n        }\n        default : \n            return state\n    }\n}","// React,React hooks\nimport { Suspense, useReducer } from \"react\";\n// Components\nimport { ProductCard } from \"./ProductCard\";\nimport { Editor } from \"./Editor\";\nimport { Preloader } from \"../../Modules/PremixesApp/Components/Preloader\";\nimport { DotsMenu } from \"./Menu\";\n// Styles and Assets\nimport \"../../Assets/Styles/PeoduxtCard.css\";\n// Redux \nimport { Reducer } from \"./Reducer\";\nimport { productType } from \"../../Redux/Types\";\n// Custom hooks\nimport { useProductCard } from \"./UseProductCard\";\n\n\n\n\n/**\n * productCard Container Compoennt\n * @returns React.Ellement\n */\n\nexport const ProductCardContainer = () => {\n    // Get data from hook\n    let card = useProductCard();\n    // General reducer for all chil compoennt\n    // Toogle card Editing mode\n    let [isEditMode, setEditMode] = useReducer(Reducer, { isEditMode: false });\n    // Check if card not equals to null\n    if (card) {\n        return (\n\n            <section className={`product_card container translate_animation`}>\n\n                <h1>{card?.name}</h1>\n                {/* Pass Edit mode toggler into Menu component props */}\n                <DotsMenu isEditMode={isEditMode.isEditMode} setEditMode={setEditMode} card={card as productType} />\n                {isEditMode.isEditMode ?\n                // Render Editor compomnent if Editing\n                    <Editor card={card as productType} />\n                    :\n                // Or render prdocut card information\n                    <ProductCard isEditMode={isEditMode} setEditMode={setEditMode} card={card} />\n                }\n\n            </section>\n\n        )\n    }\n    // Anotherwise reutn Preloader\n    else {\n        return <Preloader />\n    }\n\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\"\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { setProductCardThunk } from \"../../Redux/ProductReduxer\";\n\n\nexport const useProductCard = () => {\n    const dispatch : any = useDispatch();\n    // Get current location and select product id from him\n    let location = useLocation().pathname.split(\"=\")[1];\n    let products = useSelector((state : Global_state_type) => state.premixes.actualProductCard);\n\n    \n    useEffect(() => {\n        dispatch(setProductCardThunk(location));\n    },[]);\n    if(products)\n    {\n        return products;\n    }\n    else\n    {\n        return null;\n    }\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { cocltalCardType, getCocktailByID } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CoctailCard.css\"\n\nexport const CocktailCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCocktailByID(location))\n    },[])\n    let currentCocktail = useSelector((state : Global_state_type) => state.knowledgeBase.currentCocktail) as cocltalCardType\n\n \n    return (\n        <article className=\"cocktail_card_container contaoiner translate_animation\">\n            <figure>\n            <h2>{currentCocktail?.strDrink}</h2>\n            <img id=\"cocktail_photo\" src={currentCocktail?.strDrinkThumb} alt=\"\" />\n           \n            </figure>\n            <article>\n            <span>Бокал : {currentCocktail?.strGlass }</span>\n            <span>Категория IBA : {currentCocktail?.strIBA ? currentCocktail.strIBA : \"не входит в IBA\"}</span>\n            <span>Категория : {currentCocktail?.strCategory}</span>\n            <h3>Технология приготовления : </h3>\n            <p>{currentCocktail?.strInstructions}</p>\n            <h3>Состав : </h3>\n            {currentCocktail ? Object.keys(currentCocktail.composition).map((el : string,index : number) => {\n                return (\n                    <span>{el + \" : \" + Object.values(currentCocktail.composition)[index]}</span>\n                )\n            }) : null}\n            </article>\n           \n        </article>\n    )\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clanActions, createClanThunk } from \"../../Redux/TeamReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CreateTeam.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport {initializeThunk} from \"../../Redux/AppReducer\"\n\nexport const CreateTeam = () => {\n    const dispatch : any = useDispatch()\n    const navigate = useNavigate()\n    const isDarkTheme = useSelector((state : Global_state_type) => state.App.isDarktheme)\n    const newTeam = useSelector((state : Global_state_type) => state.clans.newTeam)\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const onSubmit = () => {\n        dispatch(createClanThunk(newTeam as {newTeamName : string,newTeamDescription : string,newTeamAvatar : ArrayBuffer},\n            user.userID as string,user.userName as string))\n           \n        dispatch(initializeThunk())\n        navigate(\"/home\")\n    }\n\n    const onNameChangeHandler = (e : React.SyntheticEvent<HTMLInputElement>) => {\n        dispatch(clanActions.setNewClanName(e.currentTarget.value))\n    }\n    const onDescriptionChangeHandler = (e : React.SyntheticEvent<HTMLTextAreaElement>) => {\n        dispatch(clanActions.setNewTeamDiescription(e.currentTarget.value))\n    }\n    return (\n        <section className={\"create_team_container translate_animation container\"}>\n            <input type=\"text\" placeholder=\"Название\" onChange={onNameChangeHandler}/>\n            <h3>Описание :</h3>\n            <br />\n            <textarea name=\"\" id=\"\" onChange={onDescriptionChangeHandler} ></textarea>\n         \n            <button onClick={onSubmit}>Создать команду</button>\n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { ClanType, getAllClans, joinTheClan } from \"../../Redux/TeamReducer\";\nimport \"../../Assets/Styles/TeamPage.css\"\nimport { useNavigate } from \"react-router-dom\";\n\nexport const JoinTeam = () => {\n    const dispatch : any = useDispatch()\n    useEffect(( ) => {\n        dispatch(getAllClans())\n    },[])\n    const navigate = useNavigate()\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const teamList = useSelector((state : Global_state_type) => state.clans.teamList)\n    const joinTeamHandler = (teamID : string,teamName : string) => {\n        dispatch(joinTheClan(user.userID as string,user.userName as string,teamID,teamName))\n        navigate(\"/home\")\n\n    }\n    \n    return (\n        <section className={\"join_team container\"} >\n            <input type=\"text\" placeholder=\"Искать по имени\"/>\n            {teamList?.map((el : ClanType) => {\n                return (\n                    <div className=\"single_team\">\n                    <span>{el.teamName}</span>\n                    <span id=\"join\" onClick={() => {joinTeamHandler(el.teamID,el.teamName)}}>\n                        Присоединиться\n                    </span>\n                    </div>\n                )\n            })}\n        </section>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"main_page_navigation\":\"HomePage_main_page_navigation__aiF1m\",\"home_page_container\":\"HomePage_home_page_container__5i8ay\",\"home_page_info\":\"HomePage_home_page_info__GShzs\"};","import React, { useState } from \"react\";\nimport \"../Assets/Styles/ThemeSwitcher.css\"\nimport { useDispatch } from \"react-redux\";\nimport { app_actions } from \"../Redux/AppReducer\";\nimport moonIcon from \"../Assets/Icons/icons8-moon-symbol-90.png\"\nimport sunicon from \"../Assets/Icons/icons8-sun-96.png\"\n\nexport const ThemeSwitcher = (props : {theme : boolean}) => {\n    const [isDarktheme,setTheme] = useState(true)\n    const dispatch = useDispatch()\n    const onClcikHandler = () => {\n      dispatch(app_actions.toggleTheme())\n      setTheme(!isDarktheme)\n    }\n    return (\n      <section className={`theme-switcher-container ${isDarktheme ? `DarkTheme` : `LightTheme`}`}>\n        <span>{isDarktheme ? \"Dark\" : \"Light\"}</span>\n        <img className=\"icon\" src={isDarktheme ? moonIcon : sunicon} alt=\"\" />\n      <div  onClick={onClcikHandler} className={props.theme ? \"darkTheme_container\" : \"lightThemeContainer\"}>\n        <div className={props.theme ? \"dark\" : \"light\"}></div>\n        \n      </div>\n        \n      </section>\n            \n          \n        \n\n    )\n}","import { useNavigate } from \"react-router-dom\";\nimport styles from \"../Assets/Styles/HomePage.module.css\"\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { ThemeSwitcher } from \"./ThemeSwitcher\";\nimport docIcon from \"../Assets/Icons/icons8-document-64.png\"\nimport teamicon from \"../Assets/Icons/icons8-team-96.png\"\nimport chemistryIcon from \"../Assets/Icons/icons8-chemistry-100(1).png\"\nimport sheldue from \"../Assets/Icons/icons8-edit-96.png\"\nimport { useWindowInnerWidth } from \"../Helpers/CustomHooks\";\n\nexport const Header = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n\n    return (\n        <header>\n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Premixes</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>Sheldue</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n            <div className={styles.swithcer}>\n                <ThemeSwitcher theme={theme} />\n            </div>\n        </header>\n\n\n    )\n}\n\nconst MainPageNavigation = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return (\n        <section className=\"main_page_navigation\">\n             <div className={styles.swithcer}>\n                <ThemeSwitcher theme={theme} />\n            </div>\n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Premixes</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>Sheldue</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n        </section>\n    )\n}\n\nexport const HomePage = () => {\n    const profile = useSelector((state: Global_state_type) => {\n        return state.App.user\n    })\n\n    const windowWidth = useWindowInnerWidth()\n    return (\n        <section className={`${styles.home_page_container} ${styles.translate_animation}`}>\n            <h2>Bartend</h2>\n            <div className={styles.home_page_info}>\n                <h1 id={styles.userName}>Hi,{profile.userName}!\n\n                </h1>\n                <span>{profile.team ? profile.team : null}</span>\n                <br />\n\n\n\n            </div>\n            <MainPageNavigation /> \n\n\n        </section>\n    )\n}","\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\"\nimport { useDispatch } from \"react-redux\";\nimport {newCardActions } from \"../..//Redux/NewCardReducer\";\nimport \"../../Assets/Styles/NewProduct.css\"\n\n\nexport const NewIngridientSingleForm = () => {\n    const dispatch: any = useDispatch()\n    // VALIDATION SHEMA\n    const validationSchema = yup.object().shape({\n        key: yup.string().typeError(\"This field should be a string\").min(1).max(20).required(\"This field is Required\"),\n        value: yup.number().typeError(\"This field should be a digit\").min(1).max(20).required(\"This field is Required\")\n\n    })\n    // SUBMIT FORMS\n    const Submit = (values: { key: string, value: string }) => {\n        let newIngridient = { [values.key]: values.value }\n        console.log(newIngridient)\n        dispatch(newCardActions.addNewIngridient(newIngridient))\n    }\n    return (\n        <div className=\"single_input\">\n            <Formik initialValues={{ key: \"\", value: \"\" }}\n                enableReinitialize={true}\n                validateOnBlur={true}\n                onSubmit={Submit}\n            //   validationSchema={validationSchema}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                    return (\n                        <div className=\"input_container\">\n                            <input type=\"text\" id=\"key\" autoComplete=\"off\" onChange={handleChange} />\n                            <input type=\"number\" id=\"value\" autoComplete=\"off\" onChange={handleChange} />\n\n                            <button\n                                //@ts-ignore \n                                onClick={handleSubmit} id=\"add_component\" type=\"submit\">+</button>\n\n                        </div>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"../../Assets/Styles/NewProduct.css\"\nimport {newCardActions } from \"../../Redux/NewCardReducer\";\nimport { NewIngridientSingleForm } from \"./NewIngridientSingleForm\";\nimport styles from \"../../Assets/Styles/ProductConstructor.module.css\"\n\nexport const FirstStep = (props : {isDarkTheme : boolean}) => {\n    const dispatch: any = useDispatch()\n\n\n    // ADD NEW INPUTS FOR NEW COMPONENT\n    const addInput = (e: React.MouseEvent<HTMLElement>) => {\n        setForms([...forms, <NewIngridientSingleForm/>])\n\n    }\n    // SET NAME\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        dispatch(newCardActions.setNewName(e.currentTarget.value))\n    }\n    // ARRAY OF FORMS FOR ADDING NEW COMMPOENT OBJET\n    let [forms, setForms] = useState([\n       <NewIngridientSingleForm/>\n    ])\n    return (\n        <section className={props.isDarkTheme ? \"new_premix_first_step container DarkTheme\" : \"container LightTheme\"}>\n            <input type=\"text\" placeholder=\"Наименование\" id=\"name\" onChange={(e) => { onNameChange(e) }} />\n            <section className=\"compound\">\n                <h2>СComposition : </h2>\n                <div className=\"compound_inputs\">\n                    {forms}\n\n                </div>\n                <button onClick={addInput} >Add ingrideint</button>\n            </section>\n\n        </section>\n    )\n}","\nimport \"../../Assets/Styles/NewProduct.css\"\nimport { FirstStep } from \"./FirstStep\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport const NewProduct = (props : {isDarkTheme : boolean} ) => {\n\n    const location = useLocation().pathname.split(\"/\")[1]\n    const navigate = useNavigate()\n    console.log(location)\n    return (\n        <section className=\"container translate_animation\">\n            <FirstStep isDarkTheme={props.isDarkTheme}/>\n            <button className=\"confirm_button\" onClick={() => {navigate(\"/add-step-two\")}} id=\"next_button\">Next</button>\n        \n        </section>\n    )\n}","import React from \"react\";\nimport { createNewIngridientCard, newCardActions } from \"../../Redux/NewCardReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../Assets/Styles/SecondStep.css\"\nimport backArrow from \"../../Assets/Icons/icons8-back-90.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { productType } from \"../../Redux/Types\";\nimport { NewProduct } from \"./NewProduct\";\n\nexport const SecondStep = (props : {isDarkTheme : boolean}) => {\n    const dispatch : any = useDispatch()\n\n    // SET DESCRITION\n    const setDescription = (e : React.FormEvent<HTMLTextAreaElement>) => {\n        dispatch(newCardActions.setNewDescription(e.currentTarget.value))\n    }\n    const newProduct = useSelector((state : Global_state_type) => state.newCard)\n    const teamID = useSelector((state : Global_state_type) => state.App.user.teamID)\n    const navigate = useNavigate()\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects (obj : object) {\n            let resultObject = Object.keys(obj).map((el : string,index : number,array : any[]) => {\n                return {\n                    [el] : Object.values(obj)[index]\n                }\n            });\n            return resultObject;\n        }\n        console.log(convertObjectToArrayOfObjects(newProduct));\n        if(teamID){\n            let card : productType = {\n                name : newProduct.name,\n                description : newProduct.description,\n                composition : convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID : teamID,\n                \n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        }else{\n            navigate(\"/clan-list\")\n        }\n     \n      \n    }\n    return (\n        <div className={props.isDarkTheme ? \"second_step container translate_animation DarkTheme\" : \"second_step container translate_animation LightTeheme\"}>\n            <div className=\"controls_item\"  onClick={() => {navigate(-1)}}>\n                <span>Back</span>\n                <img className=\"icon\" src={backArrow} />\n            </div>\n        \n            <h2>Технология приготовления : </h2>\n            <textarea name=\"Description\" id=\"description\" onChange={setDescription}></textarea>\n            <button className=\"confirm_button\" onClick={createnewProduct}>Создать</button>\n\n        </div>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { getClanListByUserID, leaveTheTeam } from \"../../Redux/TeamReducer\";\nimport \"../../Assets/Styles/TeamPage.css\"\nimport \"../../App.css\"\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { app_actions } from \"../../Redux/AppReducer\";\n\n\n\nexport const TeamPage = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n    const user = useSelector((state: Global_state_type) => state.App.user)\n\n    useEffect(() => {\n        dispatch(getClanListByUserID(user.userID as string))\n    }, [])\n    let team = useSelector((state: Global_state_type) => state.clans.team)\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    const LeaveTheTeamHandler = (team: string, userID: string, userName: string) => {\n        dispatch(leaveTheTeam(team, userID, userName))\n        dispatch(app_actions.setUserPage({ ...user, team: null, teamID: null }))\n    }\n\n    return (\n        <section className={`team_page container  translate_animation `}>\n            <h2>{team?.teamName}</h2>\n\n            <section className=\"team_page_info\">\n                <section className=\"team_page_info__team-description\">\n                    <h3>Описание </h3>\n                    <p>{team?.description}</p>\n                </section>\n                <section className=\"team_users\">\n                    <h3>Участники : </h3>\n                    <ul>\n                    {team?.users.map((el: string, index) => {\n                        return (\n                            <li key={index} >{el}</li>\n                                \n                        )\n                    })}\n                    </ul>\n                    \n                </section>\n            </section>\n\n            <button id=\"leave_the_team\" onClick={() => {\n                LeaveTheTeamHandler(teamID as string, user.userID as string, user.userName as string)\n            }}>Покинуть Команду</button>\n\n\n        </section>\n    )\n}\n\nexport const TeamPageContainer = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n    const user = useSelector((state: Global_state_type) => state.App.user)\n    const pic = useSelector((state: Global_state_type) => state.clans.team?.teamAvatar)\n    useEffect(() => {\n        dispatch(getClanListByUserID(user.userID as string))\n\n    }, [])\n\n    return (\n        <section className={\"team_page_container container\"}>\n            {user.teamID ? <TeamPage isDarkTheme={props.isDarkTheme} /> :\n                <div className={\"empty_team container \"}>\n                    <h2>Вы не состоите в команде</h2>\n                    <NavLink to={\"/join-team\"}>Присоединиться</NavLink>\n                    <NavLink to={\"/create-team\"}>Создать команду</NavLink>\n                </div>\n\n            }\n            <img src={pic as string} alt=\"\" />\n        </section>\n    )\n}","// Custom Hooks\nimport { useInput, useValidator } from \"./Hooks.\";\n// React,ReactHooks\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// API functions\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\n// Styles and Assesets\nimport add from \"../../../Assets/Icons/icons8-done-150.png\"\nimport \"../../../Assets/Styles/CheckLists.css\"\n// Types\nimport { Global_state_type } from \"../../../Redux/Store\";\n// Route\nimport { CHECK_LIST } from \"../../../Router/Routes\";\n\n\nexport const NewCheckList = () => {\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    let navigate = useNavigate();\n\n    // Get inputs from Hook \n    let [nameInput, nameValue] = useInput(\"Untitled\", \"Type name\");\n    let [taskInput, taskValue, setInput] = useInput(\"\", \"Task\");\n    // Define tasks array\n    let [tasks, setTasks] = useState<string[]>([]);\n    // On Error State if input value is not valid\n\n    // Define a RegExp to validate inputs\n    let [onError, errorMessage, validate] = useValidator(/^[a-zA-Z0-9]+$/);\n\n    // Push new task into \"tasks\" array\n    const onAddClickHandler = () => {\n        // Validate input by rgExp\n        validate(taskValue);\n        if (!onError) {\n            setTasks([...tasks, taskValue]);\n            setInput(\"\");\n        }\n\n    }\n    const createCheckList = () => {\n        // Check if task name are valid\n        validate(nameValue);\n        if (!onError) {\n            //  If valid add new checklist\n            CheckListsAPI.addCheckList(teamID as string, tasks, nameValue);\n            // Movae bavk to check-lists route\n            navigate(CHECK_LIST);\n        }\n\n    }\n    return (\n        <section className=\"new_check_list_container container translate_animation\">\n            <h1>\n                {/* Finish editing */}\n                <button onClick={createCheckList} id=\"add_ckeck_list\">Done</button>\n            </h1>\n            {/* Cheklist Name Input */}\n            {nameInput}\n            <ul className=\"task_list\">\n                {/* Render the added tasks array */}\n                {tasks.map((task: string) => <li key={task}>{task}</li>)}\n            </ul>\n            {/* New task Input */}\n            <div className=\"new_check_list_controls\">\n                {taskInput}\n                <button className=\"confirm_button\" onClick={onAddClickHandler}>\n                    <img src={add} alt=\"\" />\n                </button>\n                <br />\n                {/* Error message (Renders if input conyain errors) */}\n                <span>{onError ? errorMessage : null}</span>\n            </div>\n        </section>\n    )\n}\n\n","import React from \"react\";\nimport { cocltalCardType } from \"../../Redux/KnowledgeBaseReducer\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const CoctailPreview = (props : {cocktail : cocltalCardType}) => {\n    const navigate = useNavigate()\n    \n    return (\n        <section className=\"cocktail_card\" onClick={() => {navigate(`/cocktail/id=${props.cocktail.idDrink}`)}}>\n            <img className=\"cocktail_preview\" src={props.cocktail.strDrinkThumb} alt=\"\" />\n            <div className=\"coctail_info\">\n            <span>{props.cocktail.strDrink}</span>\n            <br />\n            <span>{props.cocktail.strIBA}</span>\n            </div>\n         \n        </section>\n    )\n}\n","import React ,{useEffect}from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nimport { cocltalCardType, getCocktailsByName, getCocktailsThunk } from \"../../Redux/KnowledgeBaseReducer\";\nimport { CoctailPreview } from \"./CocktailPrewiew\";\nexport const CoctailList = () => {\n    let dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getCocktailsThunk())\n    }, [])\n    let cocktailsFromState : cocltalCardType[] = useSelector((state: Global_state_type) => state.knowledgeBase.cocktails as cocltalCardType[]);\n    // let cocktailsFromState : cocltalCardType[] = [];\n\n    function searchByName(e: React.SyntheticEvent<HTMLInputElement>): void {\n\n        // dispatch(getCocktailsByName(e.currentTarget.value));\n\n    }\n    // debugger\n    console.log(\"RENDER\");\n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <section className=\"filters\">\n                <input type=\"text\"  placeholder=\"Искать по названию\" onChange={searchByName}/>\n            </section>\n            <div className=\"list\">\n            {cocktailsFromState?.map((cocktail : cocltalCardType) => {\n                return (\n                    <div key={cocktail.idDrink}>\n                          <CoctailPreview cocktail={cocktail}/>\n                    </div>\n                 \n                )\n            })}\n            </div>\n          \n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSpiritsThunk, spiritType } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const SpiritList = () => {\n    const dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getSpiritsThunk())\n    }, [])\n    let spirits = useSelector((state: Global_state_type) => state.knowledgeBase.spirits)\n \n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <ul className=\"spirit_list list\">\n                {spirits?.map((el: spiritType) => {\n                    return (\n                        <li key={el.ID} className=\"cocktail_card\">\n                            <NavLink to={`/ingridient/id=${el.ID}`}>\n                                <img className=\"cocktail_preview\" src={el.image} alt=\"\" />\n                                <br />\n                                <span>{el.displayName}</span>\n                            </NavLink>\n                        </li>\n\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import React from \"react\";\nimport { CoctailList } from \"./CocktailList\";\nimport { SpiritList } from \"./SpiritList\";\n\nexport const KnowledgeBaseContent = (props : {value : number}) => {\n    switch(props.value){\n        case 0 : {\n            return (\n                <CoctailList/>\n            )\n        }\n        case 1 : {\n            return (\n                <SpiritList/>\n            )\n        }\n        default : \n            return (\n                <>\n                    <h3>Пусто</h3>\n                </>\n            )\n    }\n}\n","import React, { useEffect } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\nimport \"../../Assets/Styles/CocktailList.css\"\nimport { KnowledgeBaseContent } from \"./KnowledgeBaseContent\";\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\n\n\n\n\nexport const KnowledgeBase = () => {\n\n  \n    const [value, setValue] = React.useState(0);\n    const isDarkTheme = useSelector((state : Global_state_type) => state.App.isDarktheme)\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n      \n    };\n\n    return (\n        <section className=\"knwoledge_base_container container\">\n            <h2>База знаний</h2>\n            <Box sx={{width: '100%',marginBottom : \"5px\" }}>\n                <Tabs value={value} onChange={handleChange} sx={{}} >\n                    <Tab sx={{width : \"33%\",fontSize : \"14px\",color : isDarkTheme ? \"white\" : \"black\"}} label=\"Coktails\" />\n                    <Tab  sx={{width : \"33%\",fontSize : \"14px\",color :  isDarkTheme ? \"white\" : \"black\"}}  label=\"Spirits\" />\n                    <Tab  sx={{width : \"33%\",fontSize : \"14px\",color :  isDarkTheme ? \"white\" : \"black\"}}  label=\"Premixes\" />\n                </Tabs>\n            </Box>\n            <KnowledgeBaseContent value={value}/>\n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { getCurrentIngridient } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const IngridientCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCurrentIngridient(location))\n    },[])\n    let currentIngridient = useSelector((state : Global_state_type) => state.knowledgeBase.currentSpirit)\n    return (\n        <section className=\" container spirit_card translate_animation\">\n            <figure>\n                <figcaption><h2>{currentIngridient?.displayName}</h2></figcaption>\n            <img id=\"cocktail_photo\" src={currentIngridient?.image} alt=\"\" />\n            </figure>\n            <article>\n\n            <h4>Описание : </h4>\n            <p>\n                {currentIngridient?.definition}\n            </p>\n        \n            <span>Технология произодства : </span>\n            <p>{currentIngridient?.production}</p>\n            </article>\n         \n        </section>\n    )\n}","import { useState } from \"react\";\nimport logo from \"../../Assets/Icons/bartendLogo.png\"\nimport { Formik } from \"formik\";\nimport \"../../Assets/Styles/Login.css\"\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { loginByEmailAndPassword, signInWithGooglePopUp } from \"../../Redux/AppReducer\";\nimport showPass from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePass from \"../../Assets/Icons/icons8-hide-password-100.png\"\nimport { loginValidationShema} from \"../../Helpers/Helpers\";\n\n\nexport const LoginPage = () => {\n    const dispatch : any = useDispatch()\n    const [hidePassword, setHidePassword] = useState(true)\n    const onShowPasswordHandler = () => {\n        if (hidePassword) {\n            setHidePassword(false)\n        } else {\n            setHidePassword(true)\n        }\n    }\n\n    //Login by email & password\n    const Submit = (values: { email: string, password: string }) => {\n       \n        dispatch(loginByEmailAndPassword(values.email,values.password))\n    }\n    function GogleSignIn () {\n        dispatch(signInWithGooglePopUp());\n    }\n    return (\n        <section className=\"login_page_container translate_animation\">\n\n            <div className=\"login_form\">\n            <img src={logo} alt=\"\" className=\"logo\"/>\n                <Formik initialValues={{\n                    email: \"\",\n                    password: \"\"\n                }}\n                    enableReinitialize={true}\n                    validateOnBlur={true}\n                    onSubmit={Submit}\n                    validationSchema={loginValidationShema}>\n                    {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                        return (\n                            <section className=\"LoginByEmailAndPassword\">\n                                <h1>Login</h1>\n                               \n                                <input id=\"email\" autoComplete=\"off\" type=\"text\" name=\"email\" onChange={handleChange} placeholder={\"Email\"} onBlur={handleBlur} value={values.email} />\n                              \n                                <br />\n                                <span className=\"spanError\">{touched.email ? errors.email : null}</span>\n                               \n                                \n                                <br />\n                                <div className=\"input_container\">\n                                <input autoComplete=\"off\" id=\"passwordInput\" type={hidePassword ? \"password\" : \"text\"} name=\"password\" onChange={handleChange} placeholder={\"Password\"} onBlur={handleBlur} value={values.password} />\n                                <div className=\"show\" onClick={onShowPasswordHandler}><img  id=\"passwordShow\" src={hidePassword ? showPass : hidePass} alt=\"\" /></div>\n                                </div>\n                                <br />\n                                <span className=\"spanError\">{touched.password ? errors.password : null}</span>\n                                <button id=\"loginButton\" type=\"submit\" \n                                    //@ts-ignore\n                                    onClick={handleSubmit} disabled={false}>Login</button>\n                                <br />\n                                {/* GOGGLE AUTH  */}\n                                <button onClick={GogleSignIn} className=\"google-auth\">Sign in with Google</button>\n                                <h3>или</h3>\n                                <NavLink to=\"/registration\" style={{\"fontSize\" : \"x-large\",\"color\" : \"rgb(242, 122, 67)\"}}>Create account</NavLink>\n                            </section>\n                        )\n                    }}\n                </Formik>\n\n            </div>\n        </section>\n    )\n}   ","\n// Define Props Type\ntype registrationFormType = {\n    touched: boolean | undefined,\n    handleChange : (e : React.ChangeEvent<any>) => void,\n    errors : string | undefined,\n    type : string,\n    id : string,\n    callback? : () => {},\n\n}\n/**\n * This component return input and span component containig error message\n * If error was thrown\n * \n * @param props registrationFormType\n * @returns React.Ellemet\n */\nexport const RegistrationFormInput: React.FC<registrationFormType> = (props : registrationFormType) => {\n    return (\n        <>\n            <input type={props.type} id={props.id} autoComplete=\"off\" onChange={props.handleChange} placeholder={props.id} />\n            <span className=\"onInputError\">{props.touched ? props.errors : null}</span>\n        </>\n    )\n}\n","// React,ReactHooks\nimport { useState } from \"react\";\n\n// Components\nimport { RegistrationFormInput } from \"./RegistrationForm\";\n\n// API funcions,Helpers\nimport { validationShema } from \"../../Helpers/Helpers\";\nimport { authApi } from \"../../services/Firebase/AuthAPI\";\nimport { FirebaseError } from \"firebase/app\";\n\n// Styles and Assets\nimport \"../../Assets/Styles/Registration.css\"\nimport showPasswordIcon from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePasswordIcon from \"../../Assets/Icons/icons8-hide-password-100.png\"\n\n// Formik\nimport { Formik } from \"formik\"\n\n\n\n/**\n * New user registration component.\n * Uses the Formik library for form control and validation\n * \n * @returns React.Ellement\n */\nexport const Registration = () => {\n\n    // Show hide password boolean flag\n    let [isPasswordHided, setPasswordHided] = useState(false);\n    // Error message state\n    let [error, setError] = useState<string>(\"\")\n\n    // Create user function \n    const Submit = async (values: { nickName: string, email: string, password: string, repeatPassword: string }) => {\n        // Try to create user \n        await authApi.createUserWithEmailAndPassword(values.email, values.password, values.nickName)\n            .catch((ex: FirebaseError) => {\n                // If error was throwed set error message\n                setError(ex.message.split(\"(\")[1].split(\")\")[0]);\n            });\n    }\n    // Show hode password toggler function\n    function togglePassword() {\n        setPasswordHided(!isPasswordHided);\n    }\n    return (\n        <section className=\"create_the_team_container\">\n            <h1>Create account</h1>\n\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ nickName: \"\", companyName: \"\", email: \"\", password: \"\", repeatPassword: \"\" }}\n                onSubmit={Submit}\n                // Formik Validation Shema imported from Helpers\n                validationSchema={validationShema}\n                validateOnBlur={true}\n\n            >\n                {({ errors, touched, handleChange, handleBlur, handleSubmit }) => {\n                    return (\n                        <div className=\"create_team_inputs translate_animation\">\n                            <span className=\"onInputError\">{error}</span>\n                            <RegistrationFormInput type=\"text\" touched={touched.nickName} id={\"nickName\"} handleChange={handleChange} errors={errors.nickName} />\n                            <RegistrationFormInput type=\"text\" id=\"email\" touched={touched.email} handleChange={handleChange} errors={errors.email} />\n\n                            {/* Password input with show password button */}\n                            <div className=\"passwordFirstInput\">\n                                <RegistrationFormInput type={isPasswordHided ? \"password\" : \"text\"}\n                                    handleChange={handleChange} id=\"password\" touched={touched.password} errors={errors.password} />\n                                {/* Show - hide password toggler */}\n                                <img id=\"passwordToggle\" src={isPasswordHided ? showPasswordIcon : hidePasswordIcon} onClick={togglePassword} alt=\"\" />\n                            </div>\n                            <span className=\"onInputError\"> {touched.password ? errors.password : null}</span>\n                            <RegistrationFormInput touched={touched.repeatPassword} errors={errors.repeatPassword} id=\"repeatPassword\"\n                                type={isPasswordHided ? \"password\" : \"text\"} handleChange={handleChange} />\n\n                            <button\n                                // @ts-ignore \n                                onClick={handleSubmit} id=\"submit_reg\" type=\"submit\">Create account</button>\n                        </div>\n                    )\n                }}\n            </Formik>\n\n\n        </section>\n    )\n}\n\n","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Types\nimport { productType } from \"../../../../Redux/Types\";\n\ntype PropsType = {\n    products: productType[]\n}\n\n\nexport const ProgressBar = (props: PropsType) => {\n\n    let { products } = props;\n    // Here we get the percentage and number of finished ingredients for the progress bar\n    let readyProducts = products.filter((item: any) => item.isDone === true);\n    let percent = 100 / products.length * Number(readyProducts.length);\n    return (\n\n        <div className=\"progress_bar\">\n            <span>{readyProducts.length + \"/\" + products.length}</span>\n            <span>{percent.toFixed(1) + \"%\"}</span>\n        </div>\n    )\n}","\n\ntype IngridientsListItem = {\n    name: string,\n    isDone: boolean,\n    itemId: string,\n    toggle: any\n}\n\nexport let IngridentsItem = (props: IngridientsListItem,) => {\n    console.log(props.itemId);\n    return (\n        <li key={props.itemId}>\n            <a href={\"#/card/id=\" + props.itemId}>\n                <span>{props.name}</span>\n            </a>\n            <span onClick={() => {\n                    console.log(\"Click\");\n                    props.toggle(props.itemId);\n                }}>{!props.isDone ? \"In progress\" : \"Done\"}</span>\n        </li>\n    )\n}\n","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Components\nimport { IngridentsItem } from \"./IngridentItem\";\n//Types\nimport { productType } from \"../../../../Redux/Types\";\n\n\n\nexport const IngridientList = (props: { ingridients: productType[], setState: React.Dispatch<any> }) => {\n    function toogleItem (id : string ) {\n        // Define an action object\n        let action = {\n            type : 'toggle',\n            payload : id\n        }\n        // Pass action into the set state\n        props.setState(action);\n    }\n    return (\n        <section className=\"product_list_container \">\n            <ul className=\"products__list\">\n                {props.ingridients.map((el: any) => {\n                    return (\n                        <>\n                            <IngridentsItem key={el.itemId} itemId={el.id as string} name={el.name} toggle={toogleItem} isDone={el.isDone as boolean} />\n                        </>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import { NavLink } from \"react-router-dom\";\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n// ---------\n// If theres is no open shift at this time - return this component\n\nexport const EmptyShift = () => {\n    return (\n        <section className={`empty_shift_container container`}>\n        <span>There is no open shift</span>\n        {/* Link to shifth constructor */}\n        <NavLink className={`nav_link begin-shift`} to={\"create-new\"}>\n            Begin\n        </NavLink>\n    </section>\n    )\n}","import { productType } from \"../../../Redux/Types\";\n\n\ntype ActionType = {\n    type: string,\n    payload: string | productType[]\n}\n\nexport const Reducer  = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case \"toggle\" : {\n            return [\n                ...state.map((el: any) => {\n                    if(el.id === action.payload) {\n                        return {...el,isDone : !el.isDone};\n                    }\n                    return el\n                })\n            ]\n            }\n            case 'set-state' : {\n                return [...action.payload as productType[]]\n            }\n            default:\n                return state\n        }\n    }","// React, custom hooks imports\nimport React, { useEffect, useReducer } from \"react\";\nimport { useDispatch } from \"react-redux\";\n// Components \nimport { ProgressBar } from \"./ProgressBar\";\nimport { IngridientList } from \"./IngridientList\";\nimport { EmptyShift } from \"./EmtyShiftPage\";\n\n// Styles imports\nimport \"../../../../Assets/Styles/BlamkShift.css\";\nimport { blankShiftType, productType } from \"../../../../Redux/Types\";\n\n\n// Redux imports\nimport { closeCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\nimport { Reducer } from \"../../Reducers/Reducer\";\n\ntype currentShiftPropType = {\n    products: productType[],\n    shift: blankShiftType\n}\n\n\nexport const CurrentShift = React.memo((props: currentShiftPropType) => {\n    const dispatch: any = useDispatch();\n    // Get current shift ibject by TeamID\n    let [state, setState] = useReducer(Reducer, props.products as unknown as productType[])\n    // Use set state effect if we get a new data in props\n    // By default props.products is an empty array\n    useEffect(() => {\n        let action = {\n            type: \"set-state\",\n            payload: props.products\n        }\n        setState(action);\n    }, [props.products.length]);\n    // End shift handler\n    const endShift = function () {\n        dispatch(closeCurrentShiftByCompanyID(props.shift));\n    }\n\n\n    if (props.shift.shiftID?.length as number > 1) {\n        return (\n            <section className={`current_shift_container translate_animation`}>\n                <ProgressBar products={state} />\n                <IngridientList ingridients={state} setState={setState} />\n                <button\n                    className={'confirm_button'}\n                    onClick={endShift}>End shift\n                </button>\n            </section>\n        )\n    } else {\n        // Render empty shift Component\n        return (\n            <EmptyShift />\n        )\n    }\n\n})","\n// Define the props type for ShiftPreview component\ntype ShiftPreviewType = {\n    employee: string;\n    date: string;\n    count: number;\n    onClickHandler: (shiftID: string) => void;\n    shiftID: string | undefined;\n};\n\n/**\n * A component for displaying shift preview information.\n * @param props - The properties for the ShiftPreview component.\n * @returns The ShiftPreview component.\n */\nexport const ShiftPreview = (props: ShiftPreviewType) => {\n    return (\n        <li key={props.shiftID} className=\"passed_shift_preview_item\" onClick={() => props.onClickHandler(props.shiftID as string)}>\n            <span>Date: {props.date}</span>\n            <span>Employee: {props.employee}</span>\n            <span>Number of Positions: {props.count}</span>\n            <span id={`showMore`} onClick={() => props.onClickHandler(props.shiftID as string)} >Show More</span>\n        </li>\n    );\n};","// Iport Rweact and Components\nimport { useNavigate } from \"react-router-dom\";\nimport { ShiftPreview } from \"./ShiftPreview\";\n// Redux imports and types\nimport { blankShiftType } from \"../../../../Redux/Types\";\n\n// Styles imports \nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n\nexport const ShiftsHistory = (props : { shifts : blankShiftType[]}) => {\n    const navigate = useNavigate()\n    // Navigate to specified shift in history by id\n    const onClickHandler = (id: string) => {\n        navigate(`id=${id}`)\n    }\n\n    if (props.shifts.length > 0) {\n        return (\n            <section className={`history_container translate_animation`}>\n\n                {props.shifts.map((el: blankShiftType) => {\n                    return (\n                        <ShiftPreview \n                        date={el.date} \n                        employee={el.employe} \n                        count={el.count} \n                        onClickHandler={onClickHandler} \n                        shiftID={el.shiftID} />\n                    )\n                })}\n            </section>\n        )\n    } else {\n        return (\n            <div id=\"empty_history\">There is no shift hgistory</div>\n        )\n    }\n\n}\n","// Components\nimport { CurrentShift } from \"../CurrentShiftPage/CurrentShift\";\nimport { ShiftsHistory } from \"../HistoryPage/ShiftsHistory\";\n\n// React hooks \nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Redux state and thunks\nimport { app_actions } from \"../../../../Redux/AppReducer\";\nimport {\n    getShiftsHistoryByCompanyID\n} from \"../../../../Redux/BlankShiftReducer\";\n\n// Custom Hooks\nimport { useProducts } from \"../CurrentShiftPage/useProducts\";\nimport { useNavbar } from \"./UseNabar\";\n\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { Preloader } from \"../Preloader\";\n\n\n\n// Main BlankShiftManager component\n// Container component that receives data for \n// the components current Shift (Object of the current shift) \n// and shiftHistory (Object displaying the history of closed shifts)\n\nexport const MainPage = () => {\n    const dispatch: any = useDispatch();\n    // Get TeamID from global state to fetch current blank shift data\n    let companyID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get an array of closed shits for <ShiftHistoy> component\n    let shifts = useSelector((state: Global_state_type) => state.blankShift.closedShifts);\n    // -------  \n    // Get shift object fro global state to pass him into <CurrentShift> Component\n    //  \n    // This function need to bi fixed (Deed to add fucntion thah will clodse current shift only by ID)\n    // -------\n    let shift = useSelector((state: Global_state_type) => state.blankShift.currentShift);\n    // GET IS FETCH FLAG\n    let isFetch = useSelector((state: Global_state_type) => state.App.isFetch);\n\n    useEffect(() => {\n        dispatch(getShiftsHistoryByCompanyID(companyID as string));\n    }, []);\n    // Get an aray of premixes objects from hook\n    let products = useProducts(companyID as string);\n\n\n    //Get a tuple from the navbar component and the current state of the currentShift variable\n    const [Navbar, shiftType] = useNavbar();\n\n    // Render <Preloader/> or content depending on isFetch boolean flag\n    if (!isFetch) {\n        return (\n            <section className={`blank_shift_container translate_animation`}>\n                {Navbar}\n                {/* Depending on the shift type, we display the corresponding component */}\n                {shiftType === 0 ? <CurrentShift products={products} shift={shift} /> : <ShiftsHistory shifts={shifts} />}\n            </section>\n        );\n    }\n    else {\n        return <Preloader />\n    }\n\n}\n\n","\nimport {  useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../../Redux/Store\"\nimport { useEffect } from \"react\"\nimport { getCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\"\nimport { productType } from \"../../../../Redux/Types\"\n\n\nexport const useProducts = (companyID : string) => {\n    const dispatch : any = useDispatch();\n\n    useEffect(() => {\n        dispatch(getCurrentShiftByCompanyID(companyID));\n    },[]);\n    \n    let products = useSelector((state: Global_state_type) => state.blankShift.currentShift.products);\n\n    products = products.map((el : productType) => {\n        return {\n            ...el,\n            isDone : false  \n        }\n    });\n    if(Array.isArray(products)) {\n        return products;\n    }\n    else\n    {\n        return [];\n    }\n};\n","import React, { useState } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\n\n// Custom hook for a navigation bar\nexport const useNavbar = () => {\n  // State for tracking the selected tab\n  const [shiftType, setShiftType] = useState(0);\n\n  // Event handler for tab changes\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setShiftType(newValue);\n    console.log(newValue);\n  };\n\n  // JSX for the navigation bar\n  const navbar = (\n    <Box sx={{ width: '100%', marginBottom: \"5px\" }}>\n      <Tabs value={shiftType} onChange={handleChange} sx={{}} >\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"Current Shift\" />\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"History\" />\n      </Tabs>\n    </Box>\n  );\n\n  // Returning the navigation bar JSX and the selected tab value\n  return [navbar, shiftType];\n};\n","\nimport {MainPage} from \"./Components/MainPage/MainPage\"\n\nexport const PremixesApp = () => {\n    return (\n        <section>\n            <MainPage/>\n        </section>\n    )\n}","// Comoponents,Hooks\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Redux\nimport { getPassedShiftByID } from \"../../../../Redux/BlankShiftReducer\";\n// Styles\nimport \"../../../../Assets/Styles/PassedShift.css\";\n// Types\nimport { productType } from \"../../../../Redux/Types\";\nimport { Global_state_type } from \"../../../../Redux/Store\";\n\n\nexport const PassedShift = () => {\n    const dispatch: any = useDispatch();\n    const navigate = useNavigate();\n\n    // Get shiftID from URL\n    const shiftID = useLocation().pathname.split(\"=\")[1];\n    \n    // Fetch passed shift data by ID\n    useEffect(() => {\n        dispatch(getPassedShiftByID(shiftID));\n    }, []); // Empty array of dependencies to run the effect only once\n\n    // Get passedShift data from Redux store\n    const PassedShift = useSelector(\n        (state: Global_state_type) => state.blankShift.passedShift\n    );\n\n\n    return (\n        <section className=\"container passed_shift_container translate_animation\">\n            <table>\n                {/* Display shift details */}\n                <tr>Смена от : <td>{PassedShift?.date}</td></tr>\n                <tr>Заготовщик :<td>{PassedShift?.employe}</td></tr>\n                <tr>Сделано позиций : <td>{PassedShift?.products.length}</td></tr>\n                {/* Display list of products */}\n                {PassedShift?.products.map((el: productType) => {\n                    return (\n                        <tr>\n                            <td>{el.name}</td>\n                        </tr>\n                    );\n                })}\n            </table>\n            {/* Go back link */}\n            <button onClick={() => { navigate(-1) }}>Back</button>\n        </section>\n    );\n};\n\n","\ntype ProdcustItemItemType = {\n    name: string,\n    isChecked: boolean,\n    id: string,\n    toggleFunction: (action: { type: string, payload: string }) => void\n}\n\n\nexport const ProdcustItem = (props: ProdcustItemItemType) => {\n\n    function toggle(id: string) {\n        props.toggleFunction({\n            type: 'toggle-item',\n            payload: id\n        })\n    }\n    return (\n        <li key={props.id}\n            // Is element checked flag\n            className={props.isChecked ? `checked_element` : `unchecked_element`}\n            onClick={() => { toggle(props.id) }} id={props.id}>\n\n            <span>{props.name}</span>\n        </li>\n    )\n};","// Coponents\nimport { ProdcustItem } from \"./PrroductItem\"\n// Types\nimport { productType } from \"../../../../Redux/Types\"\n\n\ntype prdocuctListType = {\n    products: productType[],\n    dispatch : (action : {type : string,payload : string}) => void\n}\n\n\nexport const ProductList = (props: prdocuctListType) => {\n    return (\n        <ul>\n            {props.products.map((el: productType) => {\n                 return (\n                    <ProdcustItem name={el.name} isChecked={el.checked as boolean} toggleFunction={props.dispatch} id={el.id as string} />\n                )\n            })}\n        </ul>\n    )\n}","import { productType } from \"../../../Redux/Types\"\n\n\ntype ActionType = {\n    type: string,\n    payload: any\n}\n\nexport const Reducer = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case 'toggle-item': {\n            console.log(action.payload)\n            return [\n                ...state.map((el: productType) => {\n                    if (el.id === action.payload) {\n\n                        return {...el,checked : !el.checked};\n                    }\n                    return el;\n                })\n            ]\n        }\n        case 'toggle-all': {\n            return [\n                ...state.map((el: productType) => {\n                    return { ...el, checked: !el.checked }\n                })\n            ]\n        }\n        case 'set-products' : {\n            console.log(action.payload)\n            return [\n                ...action.payload\n            ]\n        }\n        default:\n            return state;\n    }\n}","// REDUX\nimport { setCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\n// TYPES\nimport { productType, userPageType } from \"../../../../Redux/Types\";\n// React imports\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\n// IMPORT ICONS AND STYLES\nimport \"../../../../Assets/Styles/BlamkShift.css\"\nimport startIcon from \"../../../../Assets/Icons/icons8-start-64.png\"\n\n\n\n\ntype shiftConstructorTopPControls = {\n    products: productType[],\n    user: userPageType,\n    dispatchProducts : any\n}\n\n/**\n *  Check is all items was selected \n * @param products ArrayProductType\n * @returns boolean\n */\n\nfunction checkSelection (products : productType[]) {\n    let result = products.filter((el : productType) => el.checked == true);\n    if (result.length > 0) {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n};\n\n\nexport const CreateNewShiftControls = (props: shiftConstructorTopPControls) => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n    // Check if all items was selectrd or not\n    let isAllSelected = checkSelection(props.products);\n    // Create shift hanler ,get all data and creates new shift object and pass them into \n    // setCurrentShift thunk\n    const createShift = () => {\n        dispatch(setCurrentShiftByCompanyID(\n            props.user.team as string,\n            props.user.teamID as string,\n            props.products,\n            props.user.userName as string));\n\n        navigate(\"/begin-blank-shift\");\n\n    }\n    // Toggler fuction (comes from props)\n    function toggleAll () {\n        props.dispatchProducts({type : 'toggle-all'});\n    }\n    return (\n        <ul className={`controls`}>\n            <li \n                onClick={toggleAll}>\n                {isAllSelected ? \"Clear\" : \"Select all\"}\n            </li>\n            <li onClick={createShift}>Start\n                <img className=\"icon\" src={startIcon} alt=\"\" />\n            </li>\n\n        </ul>\n    )\n}","// React,React hooks\nimport { useEffect, useReducer } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n// Components\nimport { ProductList } from \"./PrdocuctList\";\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\n// Custom Hooks\nimport { Reducer } from \"../../Reducers/constructorReducer\";\n// Redux.Redux thunks\nimport { CreateNewShiftControls } from \"./CreateNewShiftControls\";\nimport { getProductsByCompanyID } from \"../../../../Redux/ProductReduxer\";\n\n\n\n\nexport const ShiftConstructorContainer = () => {\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    let products = useSelector((state: Global_state_type) => state.blankShift.productList);\n    const dispatch: any = useDispatch();\n    // Define a localal reducer with custom toggling state\n    let [state, dispatchProducts] = useReducer(Reducer, products);\n    // Get products and pass them into the local state\n    useEffect(() => {\n        dispatchProducts({\n            type: 'set-products',\n            payload: products\n        });\n    }, [products.length]);\n\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(user.teamID as string))\n    }, []);\n\n\n    return (\n        <section className=\"shift-constructor container\">\n            <CreateNewShiftControls products={state} user={user} dispatchProducts={dispatchProducts}/>\n            <ProductList products={state} dispatch={dispatchProducts}  />\n        </section>\n    )\n};","// ---------- IMPORT REACT COMPOENTS\n\nimport { Navigate } from \"react-router-dom\";\nimport { CheckLists } from \"../Modules/ChecklistApp/Components/CheckLists\";\nimport { CheckListPage } from \"../Modules/ChecklistApp/Components/CheclListPage\";\nimport { Premixes } from \"../Components/Ingridients/Premixes\";\nimport { ProductCardContainer } from \"../Components/Ingridients/ProductCardContainer\";\nimport { CocktailCard } from \"../Components/KnowledjeBase/CoctrailCard\";\n\n\nimport { CreateTeam } from \"../Components/Teams/CreateTeam\";\nimport { JoinTeam } from \"../Components/Teams/JoinTeam\";\nimport { HomePage } from \"../Components/mainScreen\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { NewProduct } from \"../Components/NewProduct/NewProduct\";\nimport { SecondStep } from \"../Components/NewProduct/SecondStep\";\nimport { TeamPageContainer } from \"../Components/Teams/ClanList\";\nimport { NewCheckList } from \"../Modules/ChecklistApp/Components/NewCheckList\";\nimport { KnowledgeBase } from \"../Components/KnowledjeBase/KnowledgeBase\";\nimport { IngridientCard } from \"../Components/KnowledjeBase/Ingridient\";\nimport { LoginPage } from \"../Components/Registration/LoginPage\";\nimport { Registration } from \"../Components/Registration/Registration\";\nimport { PremixesApp } from \"../Modules/PremixesApp/Premixes\";\nimport { PassedShift } from \"../Modules/PremixesApp/Components/HistoryPage/PassedShiftItem\";\nimport { ShiftConstructorContainer } from \"../Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer\";\n\n\n// ---------- ROUTES STRINGS\nexport const SHIFT_MANAGER = '/shiftManager/*'\nexport const HOME = \"/home\"\nexport const COCKTAIL_CARD = \"/cocktail/:id\"\nexport const PREMIX_LIST = \"/premixes\"\nexport const ADD_PRODUCT = \"/add\"\nexport const PRODUCT_CARD = \"/card/:id\"\nexport const LOG_OUT = \"/logOut\"\nexport const REGISTRATION = \"/registration\"\n// export const NO_MATCH_ROUTE = \"*\"\nexport const BLANK_SHIFT = \"/blank-shift/*\"\nexport const STEP_2 = \"add-step-two\"\nexport const NEW_BLANK_SHIFT = \"/shiftManager/create-new\"  \n\nexport const CHECK_LISTS = \"/check-lists\"\nexport const PASSED_SHIFT = \"shiftManager/:id\"\nexport const CLAN_LISTS = \"/clan-list\"\nexport const CREATE_TEAM = \"/create-team\"\nexport const JOIN_TEAM = \"/join-team\"\nexport const NEW_CHECK_LIST = \"/new-check-list\"\nexport const CHECK_LIST = \"/check-lists/:id\"\nexport const KNIWLEDGE_BASE = \"knowledge-base\"\nexport const INGRIDIENT = \"ingridient/:id\"\nexport const HISTORY = '/blank-shift/history'\n\nexport const PRIVATE_ROUTES : ROUTE[] = [\n    {\n        path : HISTORY,\n        element : <h1>History</h1>\n    },\n    {\n        path : HOME,\n        element : <HomePage/>\n    },\n    {\n        path : COCKTAIL_CARD,\n        element : <CocktailCard/>\n    },\n    {\n        path : JOIN_TEAM,\n        element : <JoinTeam/>\n    },\n    {\n        path : CREATE_TEAM,\n        element : <CreateTeam/>\n    },\n    {\n        path : SHIFT_MANAGER,\n        element : <PremixesApp/>\n    },\n    {\n        path : CHECK_LIST,\n        element : <CheckListPage/>\n    },\n    {\n        path : PASSED_SHIFT,\n        element : <PassedShift/>\n    },\n    {\n        path : BLANK_SHIFT,\n        element : <PremixesApp/>\n    },\n    {\n        path : PREMIX_LIST,\n        element : <Premixes/>\n    },\n    {\n        path : PRODUCT_CARD,\n        element : <ProductCardContainer/>\n    },\n    {\n        path : NEW_BLANK_SHIFT,\n        element : <ShiftConstructorContainer/>\n    },\n    {\n        path : CHECK_LISTS,\n        element : <CheckLists/>\n    },\n    // {\n    //     path : NO_MATCH_ROUTE,\n    //     element : <Navigate to=\"/home\" />\n    // },\n    {\n        path : ADD_PRODUCT,\n        element : <NewProduct isDarkTheme={true}/>\n    },\n    {\n        path : STEP_2,\n        element : <SecondStep isDarkTheme={true}/>\n    },\n    {\n        path : CLAN_LISTS,\n        element : <TeamPageContainer isDarkTheme={true}/>\n    },\n    {\n        path : NEW_CHECK_LIST,\n        element : <NewCheckList/>\n    },\n    {\n        path : KNIWLEDGE_BASE,\n        element : <KnowledgeBase/>\n    },\n    {\n        path : INGRIDIENT,\n        element : <IngridientCard/>\n    }\n]\n\nexport const PUBLICK_ROUTES : ROUTE [] = [\n    {\n        path : LOG_OUT,\n        element : <LoginPage/>\n    },\n    // {\n    //     path : NO_MATCH_ROUTE,\n    //     element : <Navigate to={\"/logOut\"}/>\n    // },\n    {\n        path : REGISTRATION,\n        element : <Registration/>\n    }\n\n]","\n// ---------- REACT & REACT HOOKS\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ---------- REDUX\nimport { Global_state_type } from \"../Redux/Store\";\n\n// ---------- IMPORT PROVATE & PUBLICK ROUND & ROUTE INTERFACE\nimport { PRIVATE_ROUTES, PUBLICK_ROUTES } from \"./Routes\";\nimport { ROUTE } from \"../Redux/Types\";\n\n// The router component iterates over the routes array and returns a route component\n//  with the corresponding react component. if user is not authorized iterates over PUBLKICK_ROUTES array\n// anotherwise over PRIVATE_ROUTES\n\n\nconst Router = React.memo((props: { isDarkTheme: boolean }) => {\n    \n    const isAuth = useSelector((state: Global_state_type) => { return state.App.isAuth })\n    console.log(\"Route\")\n    if (isAuth) {\n\n        return (\n            <div className=\"content\">\n                <Routes>\n                    {PRIVATE_ROUTES.map((route : ROUTE) => {\n                        return (\n                            <Route key={route.path} element={route.element} path={route.path}/>\n                        )\n                    })}\n                </Routes>\n           \n            </div>\n        )\n    }\n\n    else {\n        return (\n            <>\n                <Routes>\n                    {PUBLICK_ROUTES.map((route : ROUTE) => <Route path={route.path} element={route.element}/>)}\n                </Routes>\n            </>\n        )\n    }\n\n})\n\nexport default Router;"],"names":["CheckListPreview","props","jsxTasks","tasks","length","i","push","_jsx","className","children","renderTasksPreview","_jsxs","NavLink","to","concat","id","name","map","el","_Fragment","ItemList","navigate","useNavigate","checkLists","onClick","CheckLists","checklists","useChecklistList","dispatch","useDispatch","teamID","useSelector","state","App","user","useEffect","getCheckListsthunk","chcekLists","Modal","CheckListPage","checklist","deleteHandler","useTaskList","useLocation","pathname","split","find","deleteChekListThunk","isModal","setModal","useState","src","index","type","PremixesList","blanks","productActions","Navigate","parseElementNameToString","alt","Premixes","isDarkTheme","isDarktheme","products","filterProducts","initial","filter","setFilter","getProductsByCompanyID","premixes","includes","value","useProductFilter","isSearch","setIsSearch","onChange","e","currentTarget","backIcom","ProductComposition","isOpen","setIsOpen","toggle","parseComposition","composition","ProdicuCalculater","_props$product","setValue","console","log","product","placeholder","event","Number","calculateAndParseIntoComponent","ProductDescription","isOpened","setIsOpened","isEditMode","description","ProductCard","_props$card","_props$card2","setState","setEditMode","card","useInput","arguments","undefined","maxLength","Editor","input","setInput","key","setKey","array","Object","keys","values","DotsMenu","initialValue","UseToggle","productID","premixAPI","payload","deleteProductCrad","Reducer","action","ProductCardContainer","useProductCard","location","actualProductCard","setProductCardThunk","useReducer","Preloader","CocktailCard","getCocktailByID","currentCocktail","knowledgeBase","strDrink","strDrinkThumb","strGlass","strIBA","strCategory","strInstructions","CreateTeam","newTeam","clans","clanActions","onSubmit","createClanThunk","userID","userName","initializeThunk","JoinTeam","getAllClans","teamList","teamName","joinTeamHandler","joinTheClan","ThemeSwitcher","setTheme","onClcikHandler","app_actions","theme","MainPageNavigation","styles","HomePage","profile","useWindowInnerWidth","windowWidth","setWindowWidth","window","innerWidth","handleResizeWindow","addEventListener","removeEventListener","team","NewIngridientSingleForm","yup","shape","typeError","min","max","required","Formik","initialValues","enableReinitialize","validateOnBlur","newIngridient","newCardActions","_ref","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","autoComplete","FirstStep","forms","setForms","onNameChange","NewProduct","SecondStep","newProduct","newCard","backArrow","createnewProduct","convertObjectToArrayOfObjects","obj","createNewIngridientCard","TeamPage","getClanListByUserID","users","LeaveTheTeamHandler","leaveTheTeam","TeamPageContainer","pic","_state$clans$team","teamAvatar","NewCheckList","nameInput","nameValue","taskInput","taskValue","setTasks","onError","errorMessage","validate","regExp","isError","setError","errorText","setErrorText","pattern","test","useValidator","createCheckList","CheckListsAPI","CHECK_LIST","task","onAddClickHandler","CoctailPreview","cocktail","idDrink","CoctailList","getCocktailsThunk","cocktailsFromState","cocktails","SpiritList","getSpiritsThunk","spirits","ID","image","displayName","KnowledgeBaseContent","KnowledgeBase","React","Box","sx","width","marginBottom","Tabs","newValue","Tab","fontSize","color","label","IngridientCard","getCurrentIngridient","currentIngridient","currentSpirit","definition","production","LoginPage","hidePassword","setHidePassword","onShowPasswordHandler","GogleSignIn","signInWithGooglePopUp","logo","email","password","loginByEmailAndPassword","validationSchema","loginValidationShema","onBlur","showPass","hidePass","disabled","style","RegistrationFormInput","Registration","isPasswordHided","setPasswordHided","error","togglePassword","nickName","companyName","repeatPassword","async","authApi","catch","ex","message","validationShema","showPasswordIcon","hidePasswordIcon","ProgressBar","readyProducts","item","isDone","percent","toFixed","IngridentsItem","itemId","href","IngridientList","toogleItem","ingridients","EmptyShift","CurrentShift","_props$shift$shiftID","endShift","closeCurrentShiftByCompanyID","shift","shiftID","ShiftPreview","onClickHandler","date","employee","count","ShiftsHistory","shifts","employe","MainPage","companyID","blankShift","closedShifts","currentShift","isFetch","getShiftsHistoryByCompanyID","getCurrentShiftByCompanyID","Array","isArray","useProducts","Navbar","shiftType","useNavbar","setShiftType","PremixesApp","PassedShift","getPassedShiftByID","passedShift","ProdcustItem","isChecked","toggleFunction","ProductList","checked","CreateNewShiftControls","isAllSelected","dispatchProducts","createShift","setCurrentShiftByCompanyID","ShiftConstructorContainer","productList","PRIVATE_ROUTES","path","element","PUBLICK_ROUTES","isAuth","Routes","route","Route"],"sourceRoot":""}