{"version":3,"file":"static/js/452.2986450c.chunk.js","mappings":"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","sources":["Modules/ChecklistApp/CheckListPreview.tsx","Modules/ChecklistApp/Components/ChekListItem.tsx","Modules/ChecklistApp/Components/CheckLists.tsx","Modules/ChecklistApp/Components/Hooks.tsx","Modules/ChecklistApp/Components/CheclListPage.tsx","Components/Premixes/BlankList.tsx","Components/Ingridients/Premixes.tsx","Helpers/CustomHooks.tsx","Components/Ingridients/Composition.tsx","Components/Ingridients/ProductCalculator.tsx","Components/Ingridients/ProductDescription.tsx","Components/Ingridients/ProductCard.tsx","Modules/ChecklistApp/Components/Hooks..tsx","Components/Ingridients/Editor.tsx","Components/Ingridients/Menu.tsx","Components/Ingridients/Reducer.ts","Components/Ingridients/ProductCardContainer.tsx","Components/Ingridients/UseProductCard.tsx","Components/KnowledjeBase/CoctrailCard.tsx","Components/Teams/CreateTeam.tsx","Components/Teams/JoinTeam.tsx","webpack://bartend/./src/Assets/Styles/HomePage.module.css?cf67","Components/ThemeSwitcher.tsx","Components/mainScreen.tsx","Components/NewProduct/NewIngridientSingleForm.tsx","Components/NewProduct/FirstStep.tsx","Components/NewProduct/NewProduct.tsx","Components/NewProduct/SecondStep.tsx","Components/Teams/ClanList.tsx","Modules/ChecklistApp/Components/NewCheckList.tsx","Components/KnowledjeBase/CocktailPrewiew.tsx","Components/KnowledjeBase/CocktailList.tsx","Components/KnowledjeBase/SpiritList.tsx","Components/KnowledjeBase/KnowledgeBaseContent.tsx","Components/KnowledjeBase/KnowledgeBase.tsx","Components/KnowledjeBase/Ingridient.tsx","Components/Registration/LoginPage.tsx","Components/Registration/Registration.tsx","Modules/PremixesApp/Components/CurrentShiftPage/ProgressBar.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridentItem.tsx","Modules/PremixesApp/Components/CurrentShiftPage/IngridientList.tsx","Modules/PremixesApp/Components/CurrentShiftPage/EmtyShiftPage.tsx","Modules/PremixesApp/Reducers/Reducer.ts","Modules/PremixesApp/Components/CurrentShiftPage/CurrentShift.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftPreview.tsx","Modules/PremixesApp/Components/HistoryPage/ShiftsHistory.tsx","Modules/PremixesApp/Components/MainPage/MainPage.tsx","Modules/PremixesApp/Components/CurrentShiftPage/useProducts.tsx","Modules/PremixesApp/Components/MainPage/UseNabar.tsx","Modules/PremixesApp/Premixes.tsx","Modules/PremixesApp/Components/HistoryPage/PassedShiftItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrroductItem.tsx","Modules/PremixesApp/Components/ConstructorPage/PrdocuctList.tsx","Modules/PremixesApp/Reducers/constructorReducer.tsx","Modules/PremixesApp/Components/ConstructorPage/CreateNewShiftControls.tsx","Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer.tsx","Router/Routes.tsx","Router/Router.tsx"],"sourcesContent":["import { ReactJSXElement } from \"@emotion/react/types/jsx-namespace\";\nimport { NavLink } from \"react-router-dom\";\n\n\n\n\n\nexport const CheckListPreview = (props: { name: string, tasks: string[], id: string }) => {\n    let jsxTasks: ReactJSXElement[] = [];\n    function renderTasksPreview(tasks: string[]) {\n        if (tasks.length <= 4) {\n            for (let i = 0; i < tasks.length; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length > 4) {\n            for (let i = 0; i < 4; i++) {\n\n                jsxTasks.push(<span className=\"preview__item__task\">{tasks[i]}</span>);\n\n            }\n        }\n        if (tasks.length == 0) {\n            jsxTasks.push(<span className=\"preview__item--no-task\">No tasks added ...</span>)\n        }\n\n    }\n    renderTasksPreview(props.tasks);\n    return (\n        <li key={props.id} className=\"cheklist-preview__item\">\n            <NavLink key={props.id} to={`/check-lists/id=${props.id}`}>\n                <h3>{props.name}</h3>\n                {jsxTasks.map((el: ReactJSXElement) => {\n                    return (\n                        <>\n                            {el}\n                            <br />\n                        </>\n                    )\n                })}\n            </NavLink>\n\n        </li>\n    )\n}","// React,hooks\nimport { NavLink, useNavigate } from \"react-router-dom\"\n// Types\nimport { checkListType } from \"../../../Redux/CheckListReducer\"\nimport { CheckListPreview } from \"../CheckListPreview\";\n\n\nexport const ItemList = (props: { checkLists: checkListType[] }) => {\n    const navigate = useNavigate();\n\n    const onClickHandler = function () {\n        // navigate by click\n        navigate(\"/new-check-list\");\n    }\n    return (\n        <div className=\"single_check_list container\">\n            <ul className=\"checklis-list\">\n            {props.checkLists.map((el: checkListType) => {\n                return (\n                    <CheckListPreview name={el.name} tasks={el.tasks} id={el.id}/>\n                )\n            })}\n            </ul>\n            {/* If there is no existing cheklists propose to create */}\n            <button className=\"confirm_button\" \n            onClick={onClickHandler}>Добавить</button>\n        </div >\n    )\n}","// React,Components,ReactHooks\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { ItemList } from \"./ChekListItem\"\n// CustomHooks\nimport { useChecklistList } from \"./Hooks\";\n// Styles\nimport \"../../../Assets/Styles/CheckLists.css\"\n\n\nexport const CheckLists = () => {\n\n    let checklists = useChecklistList();\n\n    return (\n        <section className=\"check_lists_container container page_apperas_animation\">\n            <div className=\"ckeck-lists-content\">\n                {checklists.length > 0 ?\n                    <ItemList checkLists={checklists} />\n                    :\n                    <section className=\"check_lists_container__empty-check-list-container\">\n                        <h3>\n                            Чек листов нет\n                        </h3>\n                        <NavLink to={\"/new-check-list\"}>Добавить</NavLink>\n                    </section>\n                }\n            </div>\n\n        </section>\n    )\n}","\n// React,hooks\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useEffect } from \"react\";\n// Redux,thunks\nimport { checkListType, deleteChekListThunk, getCheckListsthunk } from \"../../../Redux/CheckListReducer\";\n// Types\n\n\n\n\nimport { Global_state_type } from \"../../../Redux/Store\";\n/**\n* @params none\n* \n* \n* Return a typple with specifik checklist object that contains \n* ist of tasks and handler to delete them\n* @returns [checklist,deleteHanler]\n*/\n\nexport const useTaskList = (): [checkListType | null, () => void] => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    let id = useLocation().pathname.split(\"=\")[1];\n    let checklist: checkListType | null = useSelector((state: Global_state_type) => {\n        let result = state.chcekLists.checkLists.find((el: checkListType) => el.id === id);\n        if (result) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    });\n    const deleteHandler = () => {\n        dispatch(deleteChekListThunk(id))\n        navigate(\"/check-lists\")\n    };\n    return [checklist, deleteHandler];\n}\n\n\n/**\n * \n * Return a list of checklists for current establishment\n * @returtn array checkListType[]\n */\nexport const useChecklistList = () => {\n    const dispatch: any = useDispatch();\n    // Get team id to fetch data by him\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Fetch data\n    useEffect(() => {\n        dispatch(getCheckListsthunk(teamID as string))\n    }, []);\n    let checkLists = useSelector((state: Global_state_type) => state.chcekLists.checkLists);\n    \n    return checkLists;\n}","// Assets\nimport { useState } from \"react\";\nimport menuIcon from \"../../../Assets/Icons/menu.png\"\n// Hooks\nimport { useTaskList } from \"./Hooks\";\n// Styles\nimport \"../../../Assets/Styles/CheckLists.css\"\n\nexport const Modal =  () => {\n    return (\n        <section className=\"modal\">\n            <span>Modal</span>\n            <span>Edit</span>\n            <span>Delete</span>\n            <button className=\"modal_btn\">Close</button>\n        </section>\n    )\n}\n\nexport const CheckListPage = () => {\n    // Get checklist object amd delete hadler from hook\n    let [checklist, deleteHandler] = useTaskList();\n    let [isModal,setModal] = useState<boolean>(false);\n    function toggleModal () {\n        setModal(!isModal);\n    }\n    return (\n        <section className=\"single-check-list container {}\">\n            {isModal ? <Modal/> : null}\n            <div className=\"check-list-controls\">\n                <span className=\"check-list__menu-back\">Back ...</span>\n                <img className=\"check-list__menu-icon\" src={menuIcon} onClick={toggleModal}></img>\n            </div>\n\n            <ul className=\"tasks\">\n                {checklist?.tasks.map((el: string, index: number) => {\n                    return (\n                        <li className=\"tasks-item\">\n                            <div>\n                            <input className=\"tasks-item__checkbox\" type=\"checkbox\" />\n\n                            </div>\n                            <span>{index + 1 + \".\" + el}</span>\n                            <br />\n                        </li>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","\nimport { productType } from \"../../Redux/Types\";\nimport { NavLink } from \"react-router-dom\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\nimport empty from \"../../Assets/Icons/icons8-empty-90.png\"\nimport { parseElementNameToString } from \"../../Helpers/Helpers\";\n\n\n\nexport const PremixesList = (props: { blanks: productType[] ,dispatch : any,Navigate : (a : string) => any}) => {\n\n    if (props.blanks.length > 0) {\n        return (\n            <>\n                {props.blanks.map((el : productType) => {\n                    return (\n                        <div key={el.id} className=\"element\" onClick={() => {\n                            props.dispatch(productActions.setAcualProductCard(el))\n                            props.Navigate(\"/card/id=\" + el.id)\n                            }}>\n                        \n                            <NavLink to={\"/product/id=\" + el.id}>\n                            <span>{parseElementNameToString(el.name)}</span>\n                            </NavLink>\n                         \n                            <br />\n                          \n                        </div>\n                    )\n                })}\n            </>\n        )\n        \n              \n    }else{\n        return (\n            <div className=\"nothing_found\">\n            <img src={empty} className=\"emtyIcon\" alt=\"\" />\n            <h1>Список пуст</h1>\n        </div>\n        )\n    }\n}","// ----------------\n// REACT AND HOOKS\n// ----------------\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { useNavigate } from \"react-router-dom\";\n// ----------------\n// STYLES\n// ----------------\nimport \"../../Assets/Styles/Premixes.css\"\n// ----------------\n// IMPORT ICONS\n// ----------------\n// import searchIcon from \"../../Assets/icons8-search-100.png\";\nimport searchIcon from \"../../Assets/Icons/icons8-search-100.png\"\nimport backIcom from \"../../Assets/Icons/icons8-back-90.png\";\nimport addIcon from \"../../Assets/Icons/icons8-add-100.png\";\nimport backIconsLight from \"../../Assets/Icons/icons8-reply-arrow-100.png\"\nimport addIconLight from \"../../Assets/Icons/icons8-add-100 (1).png\"\nimport searchIconLight from \"../../Assets/Icons/icons8-search-100(1).png\"\n// ----------------\n// IMPORT COMPONENTS\n// ----------------\nimport { PremixesList } from \"../Premixes/BlankList\";\n// ----------------\n// IMPORT HELPERS\n// ----------------\nimport { useProductFilter, useProducts } from \"../../Helpers/CustomHooks\";\n\n\n\n\nexport const Premixes = () => {\n    \n    const dispatch: any = useDispatch()\n    const isDarkTheme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    const [products,filterProducts] = useProductFilter(\"\")\n    let [isSearch, setIsSearch] = useState(false)\n    const Navigate = useNavigate()\n\n    return (\n        <section className={isDarkTheme ? \"container translate_animation DarkTheme\" : \"container translate_animation LightTheme\"}>\n            {isSearch ? \n            <div className=\"search_controls\">\n                \n                <input className=\"search\" onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {filterProducts(e.currentTarget.value)}}></input>\n                <button id=\"search_controls__button\" onClick={() => {setIsSearch(false)}}>Отмена</button>\n            </div>\n         :\n                <ul className=\"controls\">\n                    <li className=\"menu-item\" onClick={() => {Navigate(-1)}}>\n                        <span>Назад</span>\n                        <img className=\"icon\" src={isDarkTheme ? backIcom : backIconsLight} id=\"back\"  alt=\"\" />\n                    </li>\n                    <li className=\"menu-item\" onClick={() => {Navigate(\"/add\")}}>\n                      <span >Добавить</span> \n                        <img className=\"icon\" src={isDarkTheme ? addIcon : addIconLight}  alt=\"\" />\n                    </li>\n                    <li  className=\"menu-item\"onClick={() => { setIsSearch(!isSearch) }} >\n                        <span >Поиск</span>\n                        <img className=\"icon\" src={isDarkTheme ? searchIcon : searchIconLight} alt=\"\" />\n\n                    </li>\n\n\n                </ul>\n            }\n\n            <section className=\"conteiner translate_animation\">\n                <PremixesList dispatch={dispatch} Navigate={Navigate} blanks={products || []} />\n\n            </section>\n        </section>\n    )\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { productType } from \"../Redux/Types\";\nimport { set } from \"firebase/database\";\nimport { getProductsByCompanyID } from \"../Redux/ProductReduxer\";\n\n\nexport const useProducts = () => {\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        return state.premixes.premixes\n    })\n    if(products.length > 0) {\n        return products\n    }\n    else{\n        return []\n    }\n}\n\nexport const useProductFilter = (initial : string) : [productType[],(e : string) => void] => {\n    const [filter,setFilter] = useState(initial)\n    const dispatch : any = useDispatch() \n    const teamID = useSelector((state: Global_state_type) => { return state.App.user.teamID })\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(teamID as string))\n    }, [])\n    let products = useSelector((state: Global_state_type) => {\n        if(filter.length === 0) {\n            return state.premixes.premixes\n        }\n        return state.premixes.premixes.filter((el : productType) => el.name.includes(filter))\n    })\n    const updateFilter = (value : string) => {\n        setFilter(value)\n    }\n    return [products,updateFilter]\n    \n}\n\nexport const useWindowInnerWidth = () => {\n    const [windowWidth,setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        const handleResizeWindow = () => setWindowWidth(window.innerWidth)\n        window.addEventListener(\"resize\",handleResizeWindow)\n        return () => {\n            window.removeEventListener(\"resize\",handleResizeWindow)\n        }\n    },[])\n    return windowWidth\n}\n\nexport const useTheme = () => {\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return theme\n}\n\nexport const useDebounce = (callback : (...args:any) => {},delay : number,value : any)=> {\n    const timer = useRef(null);\n    const dispatch : any = useDispatch();\n    const DebounceCallback = useCallback((...args : any) => {\n        if(timer.current){\n            clearTimeout(timer.current);\n        }\n        else {\n            setTimeout(() => {\n                console.log(\"DISPATHED\")\n               dispatch(callback(value));\n            },delay)\n        }\n    },[callback,delay]);\n\n    console.log(DebounceCallback)\n    return DebounceCallback;\n}\n\n\n/**\n * \n * @param initialValue initial value for boolean flag\n * @returns [actualState,TogglerFunction]\n */\nexport const UseToggle = (initialValue : boolean) : [boolean,() => void] => {\n\n    let [state,setState] = useState<boolean>(initialValue);\n    \n    function toggle () {\n        setState(!state);\n    }\n\n    return [state,toggle];\n}","// React,ReactHooks\nimport {useState } from \"react\"\n// Redux,ThunkActions\nimport { productType } from \"../../Redux/Types\";\n// Helpers\nimport { parseComposition } from \"../../Helpers/Helpers\";\n\n\n// DECLARE PROPS TYPE\n\n// -----------------\ntype ProductCompositionType = {\n    isEditMode: boolean,\n    composition: {}[],\n    card: productType\n}\n// -----------------\n\n\n/**\n * A component displaying the composition of the current product. \n * And also the product card editor depending on the isEditMode prop\n *\n * @param props {isEditMode : boolean,composition {}[] ,card}\n * \n * @returns React.Element\n */\nexport const ProductComposition = (props: ProductCompositionType) => {\n    // Hide or show component state\n    let [isOpen, setIsOpen] = useState<boolean>(false);\n\n    // Show|Hide toggler function\n    function toggle() {\n        setIsOpen(!isOpen);\n    }\n\n    // If isOpen === false render the Show button\n    if (!isOpen) {\n        return (\n            <button onClick={toggle}>Composition</button>\n        )\n    }\n\n    else {\n        return (\n            <section>\n                <button onClick={toggle}>Composition</button>\n                <p className=\"composition\">{parseComposition(props.composition)}</p>\n            </section>\n        )\n    }\n\n\n}","// React,ReactHooks\nimport React, { useState } from \"react\";\n// Helpeers\nimport { calculateAndParseIntoComponent } from \"../../Helpers/Helpers\";\n// Types\nimport { productType } from \"../../Redux/Types\";\n\n\n\nexport const ProdicuCalculater = (props : { product: productType | null}) => {\n    // Multiplier value\n    let [value, setValue] = useState(1);\n    console.log(props.product);\n    // Input Handler\n    // Function to calculate value of prdoduct composition\n    function calculate(event: React.SyntheticEvent<HTMLInputElement>) {\n        if (event.currentTarget.value.length < 1) {\n            setValue(1)\n        } else {\n            setValue(Number(event.currentTarget.value))\n        }\n    };\n\n    return (\n      \n            <section className=\"product-card__calculator\">\n                <input type=\"number\" placeholder=\" How much do we need?\" onChange={calculate} />\n                <br />\n                <div className=\"calculated_result\">\n                    {calculateAndParseIntoComponent(props.product?.composition as {}[], value)}\n                </div>\n            </section>\n\n\n    )\n}","// React,ReactHooks\nimport { Dispatch, useState } from \"react\"\n// Styles and Assets\nimport \"../../Assets/Styles/PeoduxtCard.css\";\n// Redux,Reducers\nimport { useDispatch } from \"react-redux\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\n\n\n// Define a `props` type to component\ntype propsType = {\n    setState: Dispatch<{ type: string, payload: any }>,\n    isEditMode: boolean,\n    description: string\n}\n\n/**\n * \n * @param props propsType\n * ProductCard Description component\n * Render actual card description and set them if 'EditMode' is enabled\n * \n * @returns React.Ellement\n */\n\nexport const ProductDescription = (props: propsType) : React.ReactElement => {\n    // Is Description Opened\n    // Shoow <p></p> ellement if true anoterwose just render the Button\n    let [isOpened, setIsOpened] = useState<boolean>(false);\n\n    const dispatch: any = useDispatch();\n    // Description open Toggler function\n    function toggle() {\n        setIsOpened(!isOpened);\n    }\n    // OnChange event handler that we use in textarea if props.isEditMode === true\n    function onChangeHandler(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    }\n \n    if (!isOpened) {\n        // Render Description or textarea to Edit descritpion\n        return (\n            <section >\n                <button onClick={toggle}>Dscription</button>\n                {!props.isEditMode ? <p className=\"composition\">{props.description}</p> :\n                    <textarea\n                        onChange={onChangeHandler}\n                        className=\"description-textarea\"\n                        value={props.description}></textarea>}\n            </section>\n        )\n    }\n    else {\n        return (\n            <button onClick={toggle}>Description</button>\n        )\n    }\n\n}","// TYPES\nimport { productType } from \"../../Redux/Types\"\n// Components\nimport { ProductComposition } from \"./Composition\"\nimport { ProdicuCalculater } from \"./ProductCalculator\"\nimport { ProductDescription } from \"./ProductDescription\"\n\n// DEFINE A PROP TYPE\n// ------------------\ntype CardPropsType = {\n    isEditMode : {isEditMode : boolean},\n    setEditMode : any,\n    card : productType,\n}\n// -----------------\n\n/**\n * Render product card page if isEditMode equals to false in parent component\n * @param props CardPropdType\n * @returns React.Element\n */\n\nexport const ProductCard : React.FC<CardPropsType> = (props : CardPropsType) => {\n    return (\n        <>\n            <ProductDescription isEditMode={props.isEditMode.isEditMode} setState={props.setEditMode} description={props.card?.description as string} />\n            <ProductComposition card={props.card as productType} isEditMode={props.isEditMode.isEditMode} composition={props.card?.composition as {}[]} />\n            <ProdicuCalculater product={props.card} />\n        </>\n    )\n\n}","// React,Hooks\nimport React, { Dispatch, ReactNode, SetStateAction, useState } from \"react\"\n\n// Redux,Redux-thunks\n\ntype inputEventType = React.SyntheticEvent<HTMLInputElement>;\ntype setStateType = Dispatch<SetStateAction<string>>;\n\n/**\n//  * INPUTS HOOK\n * \n * @param value default value <string>\n * @param placeholder input placeholder text <string>\n * @returns InputElement : input element : <ReactNode>\n *          state : actual state value : <string>\n *          setState : Dispatch<SetStateAction<string>>\n */\n\nexport const useInput = (value: string = \"\", placeholder: string): [ReactNode, string,setStateType] => {\n    // Input state set default from params\n    const [state, setState] = useState(\"\");\n\n    // On changeHandler tah will be passed into input \n    function onChangeHandler(event: inputEventType) {\n        setState(event.currentTarget.value);\n    };\n\n    let InputElement = <input placeholder={placeholder} value={state} onChange={onChangeHandler} maxLength={100}/>;\n\n    // Return typple with 3 elements [input,state,setState]\n    return [InputElement, state, setState];\n\n\n}\n\n/**\n * VALIDATOR HOOK\n * \n * @param regExp pattern to validate\n * @returns tupple [isError,ErrorText,vslidate function]\n * \n */\nexport const useValidator = (regExp : RegExp) : [boolean,string,(val : string) => void] => {\n    // Boolean error flag\n    let [isError,setError] = useState<boolean>(false);\n    // error message text\n    let [errorText,setErrorText] = useState<string>(\"\");\n    \n    // Define a pattern to validate frpm params\n    let pattern = regExp;\n\n    function validate (value : string) {\n        if(!pattern.test(value))\n        {\n            setError(true);\n            setErrorText(\"Error : invalid input\");\n        }\n    }\n\n    return [isError,errorText,validate]\n}","// React,ReactHooks\nimport { useDispatch } from \"react-redux\"\n// Redux,Actions\nimport { AnyAction, Dispatch } from \"redux\";\nimport { productActions } from \"../../Redux/ProductReduxer\";\n// Types\nimport { ReactNode, useState } from \"react\";\nimport { productType } from \"../../Redux/Types\"\n// Custom hooks\nimport { useInput } from \"../../Modules/ChecklistApp/Components/Hooks.\";\n\n\n// DECLARE PROP TYPE\n\n// -----------------\ntype EditorPropType = {\n    card: productType,\n}\n\n/** \n * Product card editor component\n * \n * Render only when the isEdit flag is true\n * \n * @param props card : prdocuctType\n * @returns ReactEllement\n */\n\nexport const Editor: React.FC<EditorPropType> = (props: EditorPropType) => {\n    const dispatch: Dispatch<AnyAction> = useDispatch();\n    // Textarea onChange handler\n    function onChange(event: React.SyntheticEvent<HTMLTextAreaElement>) {\n        dispatch(productActions.updateDescription(event.currentTarget.value));\n    };\n    // Delete handler function \n    function deleteHandler(event: React.SyntheticEvent<HTMLSpanElement>) {\n        dispatch(productActions.deleteComponent(event.currentTarget.id));\n    };\n    // Compoennts to be added state from useInput custom Hook\n    let [input, setInput] = useInput(\"Name\", \"Type name\");\n    // New ingridient state\n    let [key, setKey] = useState(\"\");\n    let [value, setValue] = useState(\"\");\n    // Add component Handler\n    function addComponent() {\n        dispatch(productActions.addComonent({ [key]: value }));\n        setValue(\"\");\n        setKey(\"\");\n    }\n    \n    return (\n        <section className=\"editor\">\n            <h3 className=\"editor__tittle\">Description : </h3>\n            <textarea\n                onChange={onChange}\n                className=\"editor__desctiption-textarea\"\n                // Get actual value from store -> prpops\n                value={props.card.description}>\n            </textarea>\n            <h3 className=\"editor__tittle\">Composition : </h3>\n\n            <ul className=\"editor__composition\">\n                {props.card.composition.map((el: {}, index: number, array: {}[]) => {\n                    return (\n                        <li className=\"editor__item\">\n                            <span>{Object.keys(el)[0] + \" : \"}</span>\n                            <span >{Object.values(el)[0] as ReactNode}</span>\n                            {/* DELETE BUTTON */}\n                            <span\n                                id={Object.keys(el)[0]}\n                                className=\"editot__component__delete\"\n                                onClick={deleteHandler}>Delete</span>\n                            <br />\n                        </li>)\n                })}\n            </ul>\n            {/* Render inputs */}\n            <div className=\"editor__newcomponent-input\">\n                {/* KEY INPUT */}\n                <input type=\"text\"\n                 value={key} placeholder=\"Name\" \n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setKey(e.currentTarget.value)}}/>\n                 {/* VAKUE INPUT */}\n                <input type=\"text\"\n                 value={value} \n                 placeholder=\"Value\"\n                 onChange={(e : React.SyntheticEvent<HTMLInputElement>) => {setValue(e.currentTarget.value)}} />\n            </div>\n            <button onClick={addComponent}>Add</button>\n        </section>\n    )\n}","// React,ReactHooks\nimport { Dispatch } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\";\n// Redux,Reducers\nimport { deleteProductCrad } from \"../../Redux/ProductReduxer\";\nimport { UseToggle } from \"../../Helpers/CustomHooks\";\nimport { useDispatch } from \"react-redux\";\n// Types\nimport { productType } from \"../../Redux/Types\";\nimport { Firestore_instance } from \"../../services/Firebase/PremixesAPI\";\n\n\n// PROPS TYPE\n// --------------\ntype DotsMenuPropsType = {\n    setEditMode: Dispatch<{ type: string, payload: any }>,              //EditMode toggler\n    isEditMode: boolean,\n    card: productType                                                  //Prdouct data\n}\n// --------------\n\n\n\n/**\n * DOTS   MENU COMPONENT : \n * \n * Contains isEditMode toggling function and delete product card\n * \n * @param props DotsMenuPropsType {Dispatch,isEditMode,card}\n * @returns React.Ellement\n */\nexport const DotsMenu = (props: DotsMenuPropsType) => {\n\n    // Get boolean state and toggler function from hook\n    // If isOpen === true render menu with containig items anotherwise\n    // Render three dots menu icon\n    let [isOpen, toggle] = UseToggle(false);\n\n    // Ge id of prdocut card\n    const productID = useLocation().pathname.split(\"=\")[1]\n\n    // Navigate function\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n\n    // Delete button handller\n    function deleteProduct() {\n        dispatch(deleteProductCrad(productID));\n        navigate(\"/premixes\");\n    }\n\n    // Eidt mode toggler\n    function setEditMode() {\n        props.setEditMode({ type: \"toggleEditMode\", payload: undefined }); //FIX THIS `UNDEFINED` LATER\n        toggle();\n    }\n    // SaveChanges handler \n    function saveChanges () {\n        Firestore_instance.updatePrdocurCard(props.card);\n        props.setEditMode({type : 'toggleEditMode',payload : undefined});\n        toggle();\n    }\n    if (!isOpen) {\n        return (\n            <section className=\"dots-menu\" onClick={toggle}>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n                <li className=\"dots-menu__dot\"></li>\n\n            </section>\n        )\n\n    }\n    else {\n        return (\n            <section className=\"menu-options\">\n                {props.isEditMode && <span className=\"save-changes\" onClick={saveChanges}>{\"Save changes\"}</span>}\n                <span onClick={setEditMode}>{props.isEditMode ? \"Cancel Editing\" : \"Edit\"}</span>\n                <span onClick={deleteProduct}>Delete</span>\n                <span onClick={toggle}>Close</span>\n\n            </section>\n        )\n    }\n\n}\n","const TOGGLE_EDIT_MODE = \"toggleEditMode\";\n\n\ntype ActionType = {\n    type : string,\n    payload : any\n}\ntype initialStateType = {\n    isEditMode : boolean\n}\n\nexport const Reducer = (state : initialStateType,action : ActionType) => {\n    switch(action.type) {\n        case TOGGLE_EDIT_MODE : {\n            return {\n                ...state,\n                isEditMode : !state.isEditMode\n            }\n        }\n        default : \n            return state\n    }\n}","// React,React hooks\nimport { Suspense, useReducer } from \"react\";\n// Components\nimport { ProductCard } from \"./ProductCard\";\nimport { Editor } from \"./Editor\";\nimport { Preloader } from \"../../Modules/PremixesApp/Components/Preloader\";\nimport { DotsMenu } from \"./Menu\";\n// Styles and Assets\nimport \"../../Assets/Styles/PeoduxtCard.css\";\n// Redux \nimport { Reducer } from \"./Reducer\";\nimport { productType } from \"../../Redux/Types\";\n// Custom hooks\nimport { useProductCard } from \"./UseProductCard\";\n\n\n\n\n/**\n * productCard Container Compoennt\n * @returns React.Ellement\n */\n\nexport const ProductCardContainer = () => {\n    // Get data from hook\n    let card = useProductCard();\n    // General reducer for all chil compoennt\n    // Toogle card Editing mode\n    let [isEditMode, setEditMode] = useReducer(Reducer, { isEditMode: false });\n    // Check if card not equals to null\n    if (card) {\n        return (\n\n            <section className={`product_card container translate_animation`}>\n\n                <h1>{card?.name}</h1>\n                {/* Pass Edit mode toggler into Menu component props */}\n                <DotsMenu isEditMode={isEditMode.isEditMode} setEditMode={setEditMode} card={card as productType} />\n                {isEditMode.isEditMode ?\n                // Render Editor compomnent if Editing\n                    <Editor card={card as productType} />\n                    :\n                // Or render prdocut card information\n                    <ProductCard isEditMode={isEditMode} setEditMode={setEditMode} card={card} />\n                }\n\n            </section>\n\n        )\n    }\n    // Anotherwise reutn Preloader\n    else {\n        return <Preloader />\n    }\n\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\"\nimport { Firestore_instance } from \"../../services/Firebase/PremixesAPI\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { setProductCardThunk } from \"../../Redux/ProductReduxer\";\n\n\nexport const useProductCard = () => {\n    const dispatch : any = useDispatch();\n    // Get current location and select product id from him\n    let location = useLocation().pathname.split(\"=\")[1];\n    let products = useSelector((state : Global_state_type) => state.premixes.actualProductCard);\n\n    \n    useEffect(() => {\n        dispatch(setProductCardThunk(location));\n    },[]);\n    if(products)\n    {\n        return products;\n    }\n    else\n    {\n        return null;\n    }\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { cocltalCardType, getCocktailByID } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CoctailCard.css\"\n\nexport const CocktailCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCocktailByID(location))\n    },[])\n    let currentCocktail = useSelector((state : Global_state_type) => state.knowledgeBase.currentCocktail) as cocltalCardType\n\n \n    return (\n        <article className=\"cocktail_card_container contaoiner translate_animation\">\n            <figure>\n            <h2>{currentCocktail?.strDrink}</h2>\n            <img id=\"cocktail_photo\" src={currentCocktail?.strDrinkThumb} alt=\"\" />\n           \n            </figure>\n            <article>\n            <span>Бокал : {currentCocktail?.strGlass }</span>\n            <span>Категория IBA : {currentCocktail?.strIBA ? currentCocktail.strIBA : \"не входит в IBA\"}</span>\n            <span>Категория : {currentCocktail?.strCategory}</span>\n            <h3>Технология приготовления : </h3>\n            <p>{currentCocktail?.strInstructions}</p>\n            <h3>Состав : </h3>\n            {currentCocktail ? Object.keys(currentCocktail.composition).map((el : string,index : number) => {\n                return (\n                    <span>{el + \" : \" + Object.values(currentCocktail.composition)[index]}</span>\n                )\n            }) : null}\n            </article>\n           \n        </article>\n    )\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clanActions, createClanThunk } from \"../../Redux/TeamReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport \"../../Assets/Styles/CreateTeam.css\"\nimport { useNavigate } from \"react-router-dom\";\nimport {initializeThunk} from \"../../Redux/AppReducer\"\n\nexport const CreateTeam = () => {\n    const dispatch : any = useDispatch()\n    const navigate = useNavigate()\n    const isDarkTheme = useSelector((state : Global_state_type) => state.App.isDarktheme)\n    const newTeam = useSelector((state : Global_state_type) => state.clans.newTeam)\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const onSubmit = () => {\n        dispatch(createClanThunk(newTeam as {newTeamName : string,newTeamDescription : string,newTeamAvatar : ArrayBuffer},\n            user.userID as string,user.userName as string))\n           \n        dispatch(initializeThunk())\n        navigate(\"/home\")\n    }\n\n    const onNameChangeHandler = (e : React.SyntheticEvent<HTMLInputElement>) => {\n        dispatch(clanActions.setNewClanName(e.currentTarget.value))\n    }\n    const onDescriptionChangeHandler = (e : React.SyntheticEvent<HTMLTextAreaElement>) => {\n        dispatch(clanActions.setNewTeamDiescription(e.currentTarget.value))\n    }\n    return (\n        <section className={\"create_team_container translate_animation container\"}>\n            <input type=\"text\" placeholder=\"Название\" onChange={onNameChangeHandler}/>\n            <h3>Описание :</h3>\n            <br />\n            <textarea name=\"\" id=\"\" onChange={onDescriptionChangeHandler} ></textarea>\n         \n            <button onClick={onSubmit}>Создать команду</button>\n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { ClanType, getAllClans, joinTheClan } from \"../../Redux/TeamReducer\";\nimport \"../../Assets/Styles/TeamPage.css\"\nimport { useNavigate } from \"react-router-dom\";\n\nexport const JoinTeam = () => {\n    const dispatch : any = useDispatch()\n    useEffect(( ) => {\n        dispatch(getAllClans())\n    },[])\n    const navigate = useNavigate()\n    const user = useSelector((state : Global_state_type) => state.App.user)\n    const teamList = useSelector((state : Global_state_type) => state.clans.teamList)\n    const joinTeamHandler = (teamID : string,teamName : string) => {\n        dispatch(joinTheClan(user.userID as string,user.userName as string,teamID,teamName))\n        navigate(\"/home\")\n\n    }\n    \n    return (\n        <section className={\"join_team container\"} >\n            <input type=\"text\" placeholder=\"Искать по имени\"/>\n            {teamList?.map((el : ClanType) => {\n                return (\n                    <div className=\"single_team\">\n                    <span>{el.teamName}</span>\n                    <span id=\"join\" onClick={() => {joinTeamHandler(el.teamID,el.teamName)}}>\n                        Присоединиться\n                    </span>\n                    </div>\n                )\n            })}\n        </section>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"main_page_navigation\":\"HomePage_main_page_navigation__aiF1m\",\"home_page_container\":\"HomePage_home_page_container__5i8ay\",\"home_page_info\":\"HomePage_home_page_info__GShzs\"};","import React, { useState } from \"react\";\nimport \"../Assets/Styles/ThemeSwitcher.css\"\nimport { useDispatch } from \"react-redux\";\nimport { app_actions } from \"../Redux/AppReducer\";\nimport moonIcon from \"../Assets/Icons/icons8-moon-symbol-90.png\"\nimport sunicon from \"../Assets/Icons/icons8-sun-96.png\"\n\nexport const ThemeSwitcher = (props : {theme : boolean}) => {\n    const [isDarktheme,setTheme] = useState(true)\n    const dispatch = useDispatch()\n    const onClcikHandler = () => {\n      dispatch(app_actions.toggleTheme())\n      setTheme(!isDarktheme)\n    }\n    return (\n      <section className={`theme-switcher-container ${isDarktheme ? `DarkTheme` : `LightTheme`}`}>\n        <span>{isDarktheme ? \"Dark\" : \"Light\"}</span>\n        <img className=\"icon\" src={isDarktheme ? moonIcon : sunicon} alt=\"\" />\n      <div  onClick={onClcikHandler} className={props.theme ? \"darkTheme_container\" : \"lightThemeContainer\"}>\n        <div className={props.theme ? \"dark\" : \"light\"}></div>\n        \n      </div>\n        \n      </section>\n            \n          \n        \n\n    )\n}","import { useNavigate } from \"react-router-dom\";\nimport styles from \"../Assets/Styles/HomePage.module.css\"\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../Redux/Store\";\nimport { ThemeSwitcher } from \"./ThemeSwitcher\";\nimport docIcon from \"../Assets/Icons/icons8-document-64.png\"\nimport teamicon from \"../Assets/Icons/icons8-team-96.png\"\nimport chemistryIcon from \"../Assets/Icons/icons8-chemistry-100(1).png\"\nimport sheldue from \"../Assets/Icons/icons8-edit-96.png\"\nimport { useWindowInnerWidth } from \"../Helpers/CustomHooks\";\n\nexport const Header = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n\n    return (\n        <header>\n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Premixes</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>Sheldue</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n            <div className={styles.swithcer}>\n                <ThemeSwitcher theme={theme} />\n            </div>\n        </header>\n\n\n    )\n}\n\nconst MainPageNavigation = () => {\n    const navigate = useNavigate()\n    const theme = useSelector((state: Global_state_type) => state.App.isDarktheme)\n    return (\n        <section className=\"main_page_navigation\">\n             <div className={styles.swithcer}>\n                <ThemeSwitcher theme={theme} />\n            </div>\n            <ul className={styles.main_page_navigation}>\n                <li id=\"ckecklist\" className={styles.blue} onClick={() => { navigate(\"/check-lists\") }}>\n\n                    <a>Check - lists</a>\n\n                    <img className=\"icon\" src={docIcon} alt=\"\" />\n\n                </li>\n                <li id=\"blank-shift\" className={styles.green} onClick={() => { navigate(\"/shiftManager\") }}>\n\n\n                    <a>Premixes</a>\n                    <img className=\"icon\" src={chemistryIcon} alt=\"\" />\n\n                </li>\n\n                <li id=\"sheldue\" className={styles.darkBlue} onClick={() => { navigate(\"/check_lists\") }}>\n\n\n                    <a>Sheldue</a>\n                    <img className=\"icon\" src={sheldue} alt=\"\" />\n\n                </li>\n                <li id=\"team\" className={styles.orange} onClick={() => { navigate(\"/clan-list\") }}>\n\n\n                    <a>Team</a>\n                    <img className=\"icon\" src={teamicon} alt=\"\" />\n\n                </li>\n\n            </ul>\n        </section>\n    )\n}\n\nexport const HomePage = () => {\n    const profile = useSelector((state: Global_state_type) => {\n        return state.App.user\n    })\n\n    const windowWidth = useWindowInnerWidth()\n    return (\n        <section className={`${styles.home_page_container} ${styles.translate_animation}`}>\n            <h2>Bartend</h2>\n            <div className={styles.home_page_info}>\n                <h1 id={styles.userName}>Hi,{profile.userName}!\n\n                </h1>\n                <span>{profile.team ? profile.team : null}</span>\n                <br />\n\n\n\n            </div>\n            <MainPageNavigation /> \n\n\n        </section>\n    )\n}","\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\"\nimport { useDispatch } from \"react-redux\";\nimport {newCardActions } from \"../..//Redux/NewCardReducer\";\nimport \"../../Assets/Styles/NewProduct.css\"\n\n\nexport const NewIngridientSingleForm = () => {\n    const dispatch: any = useDispatch()\n    // VALIDATION SHEMA\n    const validationSchema = yup.object().shape({\n        key: yup.string().typeError(\"This field should be a string\").min(1).max(20).required(\"This field is Required\"),\n        value: yup.number().typeError(\"This field should be a digit\").min(1).max(20).required(\"This field is Required\")\n\n    })\n    // SUBMIT FORMS\n    const Submit = (values: { key: string, value: string }) => {\n        let newIngridient = { [values.key]: values.value }\n        console.log(newIngridient)\n        dispatch(newCardActions.addNewIngridient(newIngridient))\n    }\n    return (\n        <div className=\"single_input\">\n            <Formik initialValues={{ key: \"\", value: \"\" }}\n                enableReinitialize={true}\n                validateOnBlur={true}\n                onSubmit={Submit}\n            //   validationSchema={validationSchema}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                    return (\n                        <div className=\"input_container\">\n                            <input type=\"text\" id=\"key\" autoComplete=\"off\" onChange={handleChange} />\n                            <input type=\"number\" id=\"value\" autoComplete=\"off\" onChange={handleChange} />\n\n                            <button\n                                //@ts-ignore \n                                onClick={handleSubmit} id=\"add_component\" type=\"submit\">+</button>\n\n                        </div>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"../../Assets/Styles/NewProduct.css\"\nimport {newCardActions } from \"../../Redux/NewCardReducer\";\nimport add from \"../../Assets/Icons/icons8-add-96.png\"\nimport { NewIngridientSingleForm } from \"./NewIngridientSingleForm\";\n\n\nexport const FirstStep = (props : {isDarkTheme : boolean}) => {\n    const dispatch: any = useDispatch()\n\n\n    // ADD NEW INPUTS FOR NEW COMPONENT\n    const addInput = (e: React.MouseEvent<HTMLElement>) => {\n        setForms([...forms, <NewIngridientSingleForm/>])\n\n    }\n    // SET NAME\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        dispatch(newCardActions.setNewName(e.currentTarget.value))\n    }\n    // ARRAY OF FORMS FOR ADDING NEW COMMPOENT OBJET\n    let [forms, setForms] = useState([\n       <NewIngridientSingleForm/>\n    ])\n    return (\n        <section className={props.isDarkTheme ? \"new_premix_first_step container DarkTheme\" : \"container LightTheme\"}>\n            <h2>Введите наименование : </h2>\n            <input type=\"text\" placeholder=\"Наименование\" id=\"name\" onChange={(e) => { onNameChange(e) }} />\n            <section className=\"compound\">\n                <h2>Состав : </h2>\n                <div className=\"compound_inputs\">\n                    {forms}\n\n                </div>\n                <button onClick={addInput} >Add ingrideint</button>\n            </section>\n\n        </section>\n    )\n}","\nimport \"../../Assets/Styles/NewProduct.css\"\nimport { FirstStep } from \"./FirstStep\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport const NewProduct = (props : {isDarkTheme : boolean} ) => {\n\n    const location = useLocation().pathname.split(\"/\")[1]\n    const navigate = useNavigate()\n    console.log(location)\n    return (\n        <section className=\"container translate_animation\">\n            <FirstStep isDarkTheme={props.isDarkTheme}/>\n            <button className=\"confirm_button\" onClick={() => {navigate(\"/add-step-two\")}} id=\"next_button\">Next</button>\n        \n        </section>\n    )\n}","import React from \"react\";\nimport { createNewIngridientCard, newCardActions } from \"../../Redux/NewCardReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../Assets/Styles/SecondStep.css\"\nimport backArrow from \"../../Assets/Icons/icons8-back-90.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { productType } from \"../../Redux/Types\";\nimport { NewProduct } from \"./NewProduct\";\n\nexport const SecondStep = (props : {isDarkTheme : boolean}) => {\n    const dispatch : any = useDispatch()\n\n    // SET DESCRITION\n    const setDescription = (e : React.FormEvent<HTMLTextAreaElement>) => {\n        dispatch(newCardActions.setNewDescription(e.currentTarget.value))\n    }\n    const newProduct = useSelector((state : Global_state_type) => state.newCard)\n    const teamID = useSelector((state : Global_state_type) => state.App.user.teamID)\n    const navigate = useNavigate()\n    const createnewProduct = () => {\n        function convertObjectToArrayOfObjects (obj : object) {\n            let resultObject = Object.keys(obj).map((el : string,index : number,array : any[]) => {\n                return {\n                    [el] : Object.values(obj)[index]\n                }\n            });\n            return resultObject;\n        }\n        console.log(convertObjectToArrayOfObjects(newProduct));\n        if(teamID){\n            let card : productType = {\n                name : newProduct.name,\n                description : newProduct.description,\n                composition : convertObjectToArrayOfObjects(newProduct.composition as {}),\n                teamID : teamID,\n                \n            }\n            dispatch(createNewIngridientCard(card))\n            navigate(\"/premixes\")\n        }else{\n            navigate(\"/clan-list\")\n        }\n     \n      \n    }\n    return (\n        <div className={props.isDarkTheme ? \"second_step container translate_animation DarkTheme\" : \"second_step container translate_animation LightTeheme\"}>\n            <div className=\"controls_item\"  onClick={() => {navigate(-1)}}>\n                <span>Back</span>\n                <img className=\"icon\" src={backArrow} />\n            </div>\n        \n            <h2>Технология приготовления : </h2>\n            <textarea name=\"Description\" id=\"description\" onChange={setDescription}></textarea>\n            <button className=\"confirm_button\" onClick={createnewProduct}>Создать</button>\n\n        </div>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { getClanListByUserID, leaveTheTeam } from \"../../Redux/TeamReducer\";\nimport \"../../Assets/Styles/TeamPage.css\"\nimport \"../../App.css\"\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { app_actions } from \"../../Redux/AppReducer\";\n\n\n\nexport const TeamPage = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n    const user = useSelector((state: Global_state_type) => state.App.user)\n\n    useEffect(() => {\n        dispatch(getClanListByUserID(user.userID as string))\n    }, [])\n    let team = useSelector((state: Global_state_type) => state.clans.team)\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID)\n    const LeaveTheTeamHandler = (team: string, userID: string, userName: string) => {\n        dispatch(leaveTheTeam(team, userID, userName))\n        dispatch(app_actions.setUserPage({ ...user, team: null, teamID: null }))\n    }\n\n    return (\n        <section className={`team_page container  translate_animation `}>\n            <h2>{team?.teamName}</h2>\n\n            <section className=\"team_page_info\">\n                <section className=\"team_page_info__team-description\">\n                    <h3>Описание </h3>\n                    <p>{team?.description}</p>\n                </section>\n                <section className=\"team_users\">\n                    <h3>Участники : </h3>\n                    <ul>\n                    {team?.users.map((el: string, index) => {\n                        return (\n                            <li key={index} >{el}</li>\n                                \n                        )\n                    })}\n                    </ul>\n                    \n                </section>\n            </section>\n\n            <button id=\"leave_the_team\" onClick={() => {\n                LeaveTheTeamHandler(teamID as string, user.userID as string, user.userName as string)\n            }}>Покинуть Команду</button>\n\n\n        </section>\n    )\n}\n\nexport const TeamPageContainer = (props: { isDarkTheme: boolean }) => {\n    const dispatch: any = useDispatch()\n    const user = useSelector((state: Global_state_type) => state.App.user)\n    const pic = useSelector((state: Global_state_type) => state.clans.team?.teamAvatar)\n    useEffect(() => {\n        dispatch(getClanListByUserID(user.userID as string))\n\n    }, [])\n\n    return (\n        <section className={\"team_page_container container\"}>\n            {user.teamID ? <TeamPage isDarkTheme={props.isDarkTheme} /> :\n                <div className={\"empty_team container \"}>\n                    <h2>Вы не состоите в команде</h2>\n                    <NavLink to={\"/join-team\"}>Присоединиться</NavLink>\n                    <NavLink to={\"/create-team\"}>Создать команду</NavLink>\n                </div>\n\n            }\n            <img src={pic as string} alt=\"\" />\n        </section>\n    )\n}","// Custom Hooks\nimport { useInput, useValidator } from \"./Hooks.\";\n// React,ReactHooks\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// API functions\nimport { CheckListsAPI } from \"../../../services/Firebase/CkeckListsAPI\";\n// Styles and Assesets\nimport add from \"../../../Assets/Icons/icons8-done-150.png\"\nimport \"../../../Assets/Styles/CheckLists.css\"\n// Types\nimport { Global_state_type } from \"../../../Redux/Store\";\n// Route\nimport { CHECK_LIST } from \"../../../Router/Routes\";\n\n\nexport const NewCheckList = () => {\n    let teamID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    let navigate = useNavigate();\n\n    // Get inputs from Hook \n    let [nameInput, nameValue] = useInput(\"Untitled\", \"Type name\");\n    let [taskInput, taskValue, setInput] = useInput(\"\", \"Task\");\n    // Define tasks array\n    let [tasks, setTasks] = useState<string[]>([]);\n    // On Error State if input value is not valid\n\n    // Define a RegExp to validate inputs\n    let [onError, errorMessage, validate] = useValidator(/^[a-zA-Z0-9]+$/);\n\n    // Push new task into \"tasks\" array\n    const onAddClickHandler = () => {\n        // Validate input by rgExp\n        validate(taskValue);\n        if (!onError) {\n            setTasks([...tasks, taskValue]);\n            setInput(\"\");\n        }\n\n    }\n    const createCheckList = () => {\n        // Check if task name are valid\n        validate(nameValue);\n        if (!onError) {\n            //  If valid add new checklist\n            CheckListsAPI.addCheckList(teamID as string, tasks, nameValue);\n            // Movae bavk to check-lists route\n            navigate(CHECK_LIST);\n        }\n\n    }\n    return (\n        <section className=\"new_check_list_container container translate_animation\">\n            <h1>\n                {/* Finish editing */}\n                <button onClick={createCheckList} id=\"add_ckeck_list\">Done</button>\n            </h1>\n            {/* Cheklist Name Input */}\n            {nameInput}\n            <ul className=\"task_list\">\n                {/* Render the added tasks array */}\n                {tasks.map((task: string) => <li key={task}>{task}</li>)}\n            </ul>\n            {/* New task Input */}\n            <div className=\"new_check_list_controls\">\n                {taskInput}\n                <button className=\"confirm_button\" onClick={onAddClickHandler}>\n                    <img src={add} alt=\"\" />\n                </button>\n                <br />\n                {/* Error message (Renders if input conyain errors) */}\n                <span>{onError ? errorMessage : null}</span>\n            </div>\n        </section>\n    )\n}\n\n","import React from \"react\";\nimport { cocltalCardType } from \"../../Redux/KnowledgeBaseReducer\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const CoctailPreview = (props : {cocktail : cocltalCardType}) => {\n    const navigate = useNavigate()\n    \n    return (\n        <section className=\"cocktail_card\" onClick={() => {navigate(`/cocktail/id=${props.cocktail.idDrink}`)}}>\n            <img className=\"cocktail_preview\" src={props.cocktail.strDrinkThumb} alt=\"\" />\n            <div className=\"coctail_info\">\n            <span>{props.cocktail.strDrink}</span>\n            <br />\n            <span>{props.cocktail.strIBA}</span>\n            </div>\n         \n        </section>\n    )\n}\n","import React ,{useEffect}from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nimport { cocltalCardType, getCocktailsByName, getCocktailsThunk } from \"../../Redux/KnowledgeBaseReducer\";\nimport { CoctailPreview } from \"./CocktailPrewiew\";\nexport const CoctailList = () => {\n    let dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getCocktailsThunk())\n    }, [])\n    let cocktailsFromState : cocltalCardType[] = useSelector((state: Global_state_type) => state.knowledgeBase.cocktails as cocltalCardType[]);\n    // let cocktailsFromState : cocltalCardType[] = [];\n\n    function searchByName(e: React.SyntheticEvent<HTMLInputElement>): void {\n\n        // dispatch(getCocktailsByName(e.currentTarget.value));\n\n    }\n    // debugger\n    console.log(\"RENDER\");\n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <section className=\"filters\">\n                <input type=\"text\"  placeholder=\"Искать по названию\" onChange={searchByName}/>\n            </section>\n            <div className=\"list\">\n            {cocktailsFromState?.map((cocktail : cocltalCardType) => {\n                return (\n                    <div key={cocktail.idDrink}>\n                          <CoctailPreview cocktail={cocktail}/>\n                    </div>\n                 \n                )\n            })}\n            </div>\n          \n        </section>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSpiritsThunk, spiritType } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const SpiritList = () => {\n    const dispatch: any = useDispatch()\n    useEffect(() => {\n        dispatch(getSpiritsThunk())\n    }, [])\n    let spirits = useSelector((state: Global_state_type) => state.knowledgeBase.spirits)\n \n    return (\n        <section className=\"cocktail_list translate_animation\">\n            <ul className=\"spirit_list list\">\n                {spirits?.map((el: spiritType) => {\n                    return (\n                        <li key={el.ID} className=\"cocktail_card\">\n                            <NavLink to={`/ingridient/id=${el.ID}`}>\n                                <img className=\"cocktail_preview\" src={el.image} alt=\"\" />\n                                <br />\n                                <span>{el.displayName}</span>\n                            </NavLink>\n                        </li>\n\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import React from \"react\";\nimport { CoctailList } from \"./CocktailList\";\nimport { SpiritList } from \"./SpiritList\";\n\nexport const KnowledgeBaseContent = (props : {value : number}) => {\n    switch(props.value){\n        case 0 : {\n            return (\n                <CoctailList/>\n            )\n        }\n        case 1 : {\n            return (\n                <SpiritList/>\n            )\n        }\n        default : \n            return (\n                <>\n                    <h3>Пусто</h3>\n                </>\n            )\n    }\n}\n","import React, { useEffect } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\nimport \"../../Assets/Styles/CocktailList.css\"\nimport { KnowledgeBaseContent } from \"./KnowledgeBaseContent\";\nimport { useSelector } from \"react-redux\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\n\n\n\n\nexport const KnowledgeBase = () => {\n\n  \n    const [value, setValue] = React.useState(0);\n    const isDarkTheme = useSelector((state : Global_state_type) => state.App.isDarktheme)\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n      \n    };\n\n    return (\n        <section className=\"knwoledge_base_container container\">\n            <h2>База знаний</h2>\n            <Box sx={{width: '100%',marginBottom : \"5px\" }}>\n                <Tabs value={value} onChange={handleChange} sx={{}} >\n                    <Tab sx={{width : \"50%\",fontSize : \"14px\",color : isDarkTheme ? \"white\" : \"black\"}} label=\"Коктейли\" />\n                    <Tab  sx={{width : \"50%\",fontSize : \"14px\",color :  isDarkTheme ? \"white\" : \"black\"}}  label=\"Спирты\" />\n                </Tabs>\n            </Box>\n            <KnowledgeBaseContent value={value}/>\n        </section>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { getCurrentIngridient } from \"../../Redux/KnowledgeBaseReducer\";\nimport { Global_state_type } from \"../../Redux/Store\";\n\n\nexport const IngridientCard = () => {\n    const dispatch : any = useDispatch()\n    const location = useLocation().pathname.split(\"=\")[1]\n    useEffect(() => {\n        dispatch(getCurrentIngridient(location))\n    },[])\n    let currentIngridient = useSelector((state : Global_state_type) => state.knowledgeBase.currentSpirit)\n    return (\n        <section className=\" container spirit_card translate_animation\">\n            <figure>\n                <figcaption><h2>{currentIngridient?.displayName}</h2></figcaption>\n            <img id=\"cocktail_photo\" src={currentIngridient?.image} alt=\"\" />\n            </figure>\n            <article>\n\n            <h4>Описание : </h4>\n            <p>\n                {currentIngridient?.definition}\n            </p>\n        \n            <span>Технология произодства : </span>\n            <p>{currentIngridient?.production}</p>\n            </article>\n         \n        </section>\n    )\n}","\nimport { useState } from \"react\";\nimport logo from \"../../Assets/Icons/bartendLogo.png\"\nimport { Formik } from \"formik\";\nimport \"../../Assets/Styles/Login.css\"\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { loginByEmailAndPassword } from \"../../Redux/AppReducer\";\nimport showPass from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePass from \"../../Assets/Icons/icons8-hide-password-100.png\"\nimport { loginValidationShema} from \"../../Helpers/Helpers\";\n\n\nexport const LoginPage = () => {\n    const dispatch : any = useDispatch()\n    const [hidePassword, setHidePassword] = useState(true)\n    const onShowPasswordHandler = () => {\n        if (hidePassword) {\n            setHidePassword(false)\n        } else {\n            setHidePassword(true)\n        }\n    }\n\n    //Login by email & password\n    const Submit = (values: { email: string, password: string }) => {\n       \n        dispatch(loginByEmailAndPassword(values.email,values.password))\n    }\n\n    return (\n        <section className=\"login_page_container translate_animation\">\n\n            <div className=\"login_form\">\n            <img src={logo} alt=\"\" className=\"logo\"/>\n                <Formik initialValues={{\n                    email: \"\",\n                    password: \"\"\n                }}\n                    enableReinitialize={true}\n                    validateOnBlur={true}\n                    onSubmit={Submit}\n                    validationSchema={loginValidationShema}>\n                    {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                        return (\n                            <section className=\"LoginByEmailAndPassword\">\n                                <h1>Логин</h1>\n                               \n                                <input id=\"email\" autoComplete=\"off\" type=\"text\" name=\"email\" onChange={handleChange} placeholder={\"Email\"} onBlur={handleBlur} value={values.email} />\n                              \n                                <br />\n                                <span className=\"spanError\">{touched.email ? errors.email : null}</span>\n                               \n                                \n                                <br />\n                                <div className=\"input_container\">\n                                <input autoComplete=\"off\" id=\"passwordInput\" type={hidePassword ? \"password\" : \"text\"} name=\"password\" onChange={handleChange} placeholder={\"Password\"} onBlur={handleBlur} value={values.password} />\n                                <div className=\"show\" onClick={onShowPasswordHandler}><img  id=\"passwordShow\" src={hidePassword ? showPass : hidePass} alt=\"\" /></div>\n                                </div>\n                                <br />\n                                <span className=\"spanError\">{touched.password ? errors.password : null}</span>\n                                <button id=\"loginButton\" type=\"submit\" \n                                    //@ts-ignore\n                                    onClick={handleSubmit} disabled={false}>Войти</button>\n                                <br />\n                                <h3>или</h3>\n                                <NavLink to=\"/registration\" style={{\"fontSize\" : \"x-large\",\"color\" : \"rgb(242, 122, 67)\"}}>Создать аккаунт</NavLink>\n                            </section>\n                        )\n                    }}\n                </Formik>\n            </div>\n        </section>\n    )\n}   ","import { Formik } from \"formik\"\nimport  \"../../Assets/Styles/Registration.css\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { RegistrationActions, createNewUserByEmailAndPassword } from \"../../Redux/RegistrationReducer\";\nimport { useState } from \"react\";\nimport showPasswordIcon from \"../../Assets/Icons/icons8-eye-96.png\"\nimport hidePasswordIcon from \"../../Assets/Icons/icons8-hide-password-100.png\"\nimport { validationShema } from \"../../Helpers/Helpers\";\n\n\n\nexport const Registration = () => {\n    const dispatch: any = useDispatch()\n    \n\n    let [isPasswordHided,setPasswordHided] = useState(false)\n    \n    const Submit = (values :{nickName : string ,email : string,password : string,repeatPassword : string}) => {\n        dispatch(RegistrationActions.setEmail(values.email))\n        dispatch(RegistrationActions.setPassword(values.password))\n        dispatch(RegistrationActions.setRepeatPassword(values.repeatPassword))\n        dispatch(createNewUserByEmailAndPassword(values.nickName,values.email,values.password))\n\n    }\n\n    return (\n        <section className=\"create_the_team_container\">\n                <h1>Создать аккаунт</h1>\n          \n                <Formik enableReinitialize={true}\n                    initialValues={{ nickName: \"\", companyName: \"\",email: \"\",password : \"\",repeatPassword : \"\"}}\n                    onSubmit={Submit}\n                    \n                validationSchema={validationShema}\n                validateOnBlur={true}\n                \n                >\n                    {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => {\n                        return (\n                            <div className=\"create_team_inputs translate_animation\">\n\n                                <input type=\"text\" id=\"nickName\" autoComplete=\"off\" onChange={handleChange} placeholder=\"Имя\" />\n                                <span className=\"onInputError\">{touched.nickName  ? errors.nickName : null}</span>\n                                <input type=\"text\" id=\"email\" autoComplete=\"off\" onChange={handleChange} placeholder=\"Почта\" />\n                                <span className=\"onInputError\"> {touched.email ? errors.email : null}</span>\n\n                                <div className=\"passwordFirstInput\">\n                                <input id=\"password\" className=\"password\" name=\"password\" type={isPasswordHided ? \"password\" : \"text\"}  autoComplete=\"off\" onChange={handleChange} placeholder=\"Пароль \" />\n                               \n\n                                <img id=\"passwordToggle\" src={isPasswordHided ? showPasswordIcon : hidePasswordIcon}\n                                 onClick={() => {\n                                    setPasswordHided(!isPasswordHided)\n                                 }}alt=\"\" />\n                                </div>\n                                <span className=\"onInputError\"> {touched.password ? errors.password : null}</span>\n                              \n                                <input type={isPasswordHided ? \"password\" : \"text\"} id=\"repeatPassword\"  autoComplete=\"off\" onChange={handleChange} placeholder=\"Повторите пароль\"/>\n                                <span className=\"onInputError\"> {touched.repeatPassword ? errors.repeatPassword : null}</span>\n\n                                <button\n                                    // @ts-ignore \n                                    onClick={handleSubmit} id=\"submit_reg\" type=\"submit\">Создать акаунт</button>\n                            \n                            </div>\n                        )\n                    }}\n            </Formik>\n             \n            \n        </section>\n    )\n}","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Types\nimport { productType } from \"../../../../Redux/Types\";\n\ntype PropsType = {\n    products: productType[]\n}\n\n\nexport const ProgressBar = (props: PropsType) => {\n\n    let { products } = props;\n    // Here we get the percentage and number of finished ingredients for the progress bar\n    let readyProducts = products.filter((item: any) => item.isDone === true);\n    let percent = 100 / products.length * Number(readyProducts.length);\n    return (\n\n        <div className=\"progress_bar\">\n            <span>{readyProducts.length + \"/\" + products.length}</span>\n            <span>{percent.toFixed(1) + \"%\"}</span>\n        </div>\n    )\n}","\n\ntype IngridientsListItem = {\n    name: string,\n    isDone: boolean,\n    itemId: string,\n    toggle: any\n}\n\nexport let IngridentsItem = (props: IngridientsListItem,) => {\n    console.log(props.itemId);\n    return (\n        <li key={props.itemId}>\n            <a href={\"#/card/id=\" + props.itemId}>\n                <span>{props.name}</span>\n            </a>\n            <span onClick={() => {\n                    console.log(\"Click\");\n                    props.toggle(props.itemId);\n                }}>{!props.isDone ? \"In progress\" : \"Done\"}</span>\n        </li>\n    )\n}\n","// Styles\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n// Components\nimport { IngridentsItem } from \"./IngridentItem\";\n//Types\nimport { productType } from \"../../../../Redux/Types\";\n\n\n\nexport const IngridientList = (props: { ingridients: productType[], setState: React.Dispatch<any> }) => {\n    function toogleItem (id : string ) {\n        // Define an action object\n        let action = {\n            type : 'toggle',\n            payload : id\n        }\n        // Pass action into the set state\n        props.setState(action);\n    }\n    return (\n        <section className=\"product_list_container \">\n            <ul className=\"products__list\">\n                {props.ingridients.map((el: any) => {\n                    return (\n                        <>\n                            <IngridentsItem key={el.itemId} itemId={el.id as string} name={el.name} toggle={toogleItem} isDone={el.isDone as boolean} />\n                        </>\n                    )\n                })}\n            </ul>\n        </section>\n    )\n}","import { NavLink } from \"react-router-dom\";\nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n// ---------\n// If theres is no open shift at this time - return this component\n\nexport const EmptyShift = () => {\n    return (\n        <section className={`empty_shift_container container`}>\n        <span>There is no open shift</span>\n        {/* Link to shifth constructor */}\n        <NavLink className={`nav_link begin-shift`} to={\"create-new\"}>\n            Begin\n        </NavLink>\n    </section>\n    )\n}","import { productType } from \"../../../Redux/Types\";\n\n\ntype ActionType = {\n    type: string,\n    payload: string | productType[]\n}\n\nexport const Reducer  = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case \"toggle\" : {\n            return [\n                ...state.map((el: any) => {\n                    if(el.id === action.payload) {\n                        return {...el,isDone : !el.isDone};\n                    }\n                    return el\n                })\n            ]\n            }\n            case 'set-state' : {\n                return [...action.payload as productType[]]\n            }\n            default:\n                return state\n        }\n    }","// React, custom hooks imports\nimport React, { useEffect, useReducer } from \"react\";\nimport { useDispatch } from \"react-redux\";\n// Components \nimport { ProgressBar } from \"./ProgressBar\";\nimport { IngridientList } from \"./IngridientList\";\nimport { EmptyShift } from \"./EmtyShiftPage\";\n\n// Styles imports\nimport \"../../../../Assets/Styles/BlamkShift.css\";\nimport { blankShiftType, productType } from \"../../../../Redux/Types\";\n\n\n// Redux imports\nimport { closeCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\nimport { Reducer } from \"../../Reducers/Reducer\";\n\ntype currentShiftPropType = {\n    products: productType[],\n    shift: blankShiftType\n}\n\n\nexport const CurrentShift = React.memo((props: currentShiftPropType) => {\n    const dispatch: any = useDispatch();\n    // Get current shift ibject by TeamID\n    let [state, setState] = useReducer(Reducer, props.products as unknown as productType[])\n    // Use set state effect if we get a new data in props\n    // By default props.products is an empty array\n    useEffect(() => {\n        let action = {\n            type: \"set-state\",\n            payload: props.products\n        }\n        setState(action);\n    }, [props.products.length]);\n    // End shift handler\n    const endShift = function () {\n        dispatch(closeCurrentShiftByCompanyID(props.shift));\n    }\n\n\n    if (props.shift.shiftID?.length as number > 1) {\n        return (\n            <section className={`current_shift_container translate_animation`}>\n                <ProgressBar products={state} />\n                <IngridientList ingridients={state} setState={setState} />\n                <button\n                    className={'confirm_button'}\n                    onClick={endShift}>End shift\n                </button>\n            </section>\n        )\n    } else {\n        // Render empty shift Component\n        return (\n            <EmptyShift />\n        )\n    }\n\n})","\n// Define the props type for ShiftPreview component\ntype ShiftPreviewType = {\n    employee: string;\n    date: string;\n    count: number;\n    onClickHandler: (shiftID: string) => void;\n    shiftID: string | undefined;\n};\n\n/**\n * A component for displaying shift preview information.\n * @param props - The properties for the ShiftPreview component.\n * @returns The ShiftPreview component.\n */\nexport const ShiftPreview = (props: ShiftPreviewType) => {\n    return (\n        <li key={props.shiftID} className=\"passed_shift_preview_item\" onClick={() => props.onClickHandler(props.shiftID as string)}>\n            <span>Date: {props.date}</span>\n            <span>Employee: {props.employee}</span>\n            <span>Number of Positions: {props.count}</span>\n            <span id={`showMore`} onClick={() => props.onClickHandler(props.shiftID as string)} >Show More</span>\n        </li>\n    );\n};","// Iport Rweact and Components\nimport { useNavigate } from \"react-router-dom\";\nimport { ShiftPreview } from \"./ShiftPreview\";\n// Redux imports and types\nimport { blankShiftType } from \"../../../../Redux/Types\";\n\n// Styles imports \nimport \"../../../../Assets/Styles/BlamkShift.css\"\n\n\n\nexport const ShiftsHistory = (props : { shifts : blankShiftType[]}) => {\n    const navigate = useNavigate()\n    // Navigate to specified shift in history by id\n    const onClickHandler = (id: string) => {\n        navigate(`id=${id}`)\n    }\n\n    if (props.shifts.length > 0) {\n        return (\n            <section className={`history_container translate_animation`}>\n\n                {props.shifts.map((el: blankShiftType) => {\n                    return (\n                        <ShiftPreview \n                        date={el.date} \n                        employee={el.employe} \n                        count={el.count} \n                        onClickHandler={onClickHandler} \n                        shiftID={el.shiftID} />\n                    )\n                })}\n            </section>\n        )\n    } else {\n        return (\n            <div id=\"empty_history\">There is no shift hgistory</div>\n        )\n    }\n\n}\n","// Components\nimport { CurrentShift } from \"../CurrentShiftPage/CurrentShift\";\nimport { ShiftsHistory } from \"../HistoryPage/ShiftsHistory\";\n\n// React hooks \nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Redux state and thunks\nimport { app_actions } from \"../../../../Redux/AppReducer\";\nimport {\n    getShiftsHistoryByCompanyID\n} from \"../../../../Redux/BlankShiftReducer\";\n\n// Custom Hooks\nimport { useProducts } from \"../CurrentShiftPage/useProducts\";\nimport { useNavbar } from \"./UseNabar\";\n\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\nimport { Preloader } from \"../Preloader\";\n\n\n\n// Main BlankShiftManager component\n// Container component that receives data for \n// the components current Shift (Object of the current shift) \n// and shiftHistory (Object displaying the history of closed shifts)\n\nexport const MainPage = () => {\n    const dispatch: any = useDispatch();\n    // Get TeamID from global state to fetch current blank shift data\n    let companyID = useSelector((state: Global_state_type) => state.App.user.teamID);\n    // Get an array of closed shits for <ShiftHistoy> component\n    let shifts = useSelector((state: Global_state_type) => state.blankShift.closedShifts);\n    // -------  \n    // Get shift object fro global state to pass him into <CurrentShift> Component\n    //  \n    // This function need to bi fixed (Deed to add fucntion thah will clodse current shift only by ID)\n    // -------\n    let shift = useSelector((state: Global_state_type) => state.blankShift.currentShift);\n    // GET IS FETCH FLAG\n    let isFetch = useSelector((state: Global_state_type) => state.App.isFetch);\n\n    useEffect(() => {\n        dispatch(getShiftsHistoryByCompanyID(companyID as string));\n    }, []);\n    // Get an aray of premixes objects from hook\n    let products = useProducts(companyID as string);\n\n\n    //Get a tuple from the navbar component and the current state of the currentShift variable\n    const [Navbar, shiftType] = useNavbar();\n\n    // Render <Preloader/> or content depending on isFetch boolean flag\n    if (!isFetch) {\n        return (\n            <section className={`blank_shift_container translate_animation`}>\n                {Navbar}\n                {/* Depending on the shift type, we display the corresponding component */}\n                {shiftType === 0 ? <CurrentShift products={products} shift={shift} /> : <ShiftsHistory shifts={shifts} />}\n            </section>\n        );\n    }\n    else {\n        return <Preloader />\n    }\n\n}\n\n","\nimport {  useDispatch, useSelector } from \"react-redux\"\nimport { Global_state_type } from \"../../../../Redux/Store\"\nimport { useEffect } from \"react\"\nimport { getCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\"\nimport { productType } from \"../../../../Redux/Types\"\n\n\nexport const useProducts = (companyID : string) => {\n    const dispatch : any = useDispatch();\n\n    useEffect(() => {\n        dispatch(getCurrentShiftByCompanyID(companyID));\n    },[]);\n    \n    let products = useSelector((state: Global_state_type) => state.blankShift.currentShift.products);\n\n    products = products.map((el : productType) => {\n        return {\n            ...el,\n            isDone : false  \n        }\n    });\n    if(Array.isArray(products)) {\n        return products;\n    }\n    else\n    {\n        return [];\n    }\n};\n","import React, { useState } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\n\n// Custom hook for a navigation bar\nexport const useNavbar = () => {\n  // State for tracking the selected tab\n  const [shiftType, setShiftType] = useState(0);\n\n  // Event handler for tab changes\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setShiftType(newValue);\n    console.log(newValue);\n  };\n\n  // JSX for the navigation bar\n  const navbar = (\n    <Box sx={{ width: '100%', marginBottom: \"5px\" }}>\n      <Tabs value={shiftType} onChange={handleChange} sx={{}} >\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"Current Shift\" />\n        <Tab sx={{ width: \"50%\", fontSize: \"14px\", color: \"white\" }} label=\"History\" />\n      </Tabs>\n    </Box>\n  );\n\n  // Returning the navigation bar JSX and the selected tab value\n  return [navbar, shiftType];\n};\n","\nimport {MainPage} from \"./Components/MainPage/MainPage\"\n\nexport const PremixesApp = () => {\n    return (\n        <section>\n            <MainPage/>\n        </section>\n    )\n}","// Comoponents,Hooks\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// Redux\nimport { getPassedShiftByID } from \"../../../../Redux/BlankShiftReducer\";\n// Styles\nimport \"../../../../Assets/Styles/PassedShift.css\";\n// Types\nimport { productType } from \"../../../../Redux/Types\";\nimport { Global_state_type } from \"../../../../Redux/Store\";\n\n\nexport const PassedShift = () => {\n    const dispatch: any = useDispatch();\n    const navigate = useNavigate();\n\n    // Get shiftID from URL\n    const shiftID = useLocation().pathname.split(\"=\")[1];\n    \n    // Fetch passed shift data by ID\n    useEffect(() => {\n        dispatch(getPassedShiftByID(shiftID));\n    }, []); // Empty array of dependencies to run the effect only once\n\n    // Get passedShift data from Redux store\n    const PassedShift = useSelector(\n        (state: Global_state_type) => state.blankShift.passedShift\n    );\n\n\n    return (\n        <section className=\"container passed_shift_container translate_animation\">\n            <table>\n                {/* Display shift details */}\n                <tr>Смена от : <td>{PassedShift?.date}</td></tr>\n                <tr>Заготовщик :<td>{PassedShift?.employe}</td></tr>\n                <tr>Сделано позиций : <td>{PassedShift?.products.length}</td></tr>\n                {/* Display list of products */}\n                {PassedShift?.products.map((el: productType) => {\n                    return (\n                        <tr>\n                            <td>{el.name}</td>\n                        </tr>\n                    );\n                })}\n            </table>\n            {/* Go back link */}\n            <button onClick={() => { navigate(-1) }}>Back</button>\n        </section>\n    );\n};\n\n","\ntype ProdcustItemItemType = {\n    name: string,\n    isChecked: boolean,\n    id: string,\n    toggleFunction: (action: { type: string, payload: string }) => void\n}\n\n\nexport const ProdcustItem = (props: ProdcustItemItemType) => {\n\n    function toggle(id: string) {\n        props.toggleFunction({\n            type: 'toggle-item',\n            payload: id\n        })\n    }\n    return (\n        <li key={props.id}\n            // Is element checked flag\n            className={props.isChecked ? `checked_element` : `unchecked_element`}\n            onClick={() => { toggle(props.id) }} id={props.id}>\n\n            <span>{props.name}</span>\n        </li>\n    )\n};","// Coponents\nimport { ProdcustItem } from \"./PrroductItem\"\n// Types\nimport { productType } from \"../../../../Redux/Types\"\n\n\ntype prdocuctListType = {\n    products: productType[],\n    dispatch : (action : {type : string,payload : string}) => void\n}\n\n\nexport const ProductList = (props: prdocuctListType) => {\n    return (\n        <ul>\n            {props.products.map((el: productType) => {\n                 return (\n                    <ProdcustItem name={el.name} isChecked={el.checked as boolean} toggleFunction={props.dispatch} id={el.id as string} />\n                )\n            })}\n        </ul>\n    )\n}","import { productType } from \"../../../Redux/Types\"\n\n\ntype ActionType = {\n    type: string,\n    payload: any\n}\n\nexport const Reducer = (state: productType[], action: ActionType) => {\n    switch (action.type) {\n        case 'toggle-item': {\n            console.log(action.payload)\n            return [\n                ...state.map((el: productType) => {\n                    if (el.id === action.payload) {\n\n                        return {...el,checked : !el.checked};\n                    }\n                    return el;\n                })\n            ]\n        }\n        case 'toggle-all': {\n            return [\n                ...state.map((el: productType) => {\n                    return { ...el, checked: !el.checked }\n                })\n            ]\n        }\n        case 'set-products' : {\n            console.log(action.payload)\n            return [\n                ...action.payload\n            ]\n        }\n        default:\n            return state;\n    }\n}","// REDUX\nimport { setCurrentShiftByCompanyID } from \"../../../../Redux/BlankShiftReducer\";\n// TYPES\nimport { productType, userPageType } from \"../../../../Redux/Types\";\n// React imports\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\n// IMPORT ICONS AND STYLES\nimport \"../../../../Assets/Styles/BlamkShift.css\"\nimport startIcon from \"../../../../Assets/Icons/icons8-start-64.png\"\n\n\n\n\ntype shiftConstructorTopPControls = {\n    products: productType[],\n    user: userPageType,\n    dispatchProducts : any\n}\n\n/**\n *  Check is all items was selected \n * @param products ArrayProductType\n * @returns boolean\n */\n\nfunction checkSelection (products : productType[]) {\n    let result = products.filter((el : productType) => el.checked == true);\n    if (result.length > 0) {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n};\n\n\nexport const CreateNewShiftControls = (props: shiftConstructorTopPControls) => {\n    const navigate = useNavigate();\n    const dispatch: any = useDispatch();\n    // Check if all items was selectrd or not\n    let isAllSelected = checkSelection(props.products);\n    // Create shift hanler ,get all data and creates new shift object and pass them into \n    // setCurrentShift thunk\n    const createShift = () => {\n        dispatch(setCurrentShiftByCompanyID(\n            props.user.team as string,\n            props.user.teamID as string,\n            props.products,\n            props.user.userName as string));\n\n        navigate(\"/begin-blank-shift\");\n\n    }\n    // Toggler fuction (comes from props)\n    function toggleAll () {\n        props.dispatchProducts({type : 'toggle-all'});\n    }\n    return (\n        <ul className={`controls`}>\n            <li \n                onClick={toggleAll}>\n                {isAllSelected ? \"Clear\" : \"Select all\"}\n            </li>\n            <li onClick={createShift}>Start\n                <img className=\"icon\" src={startIcon} alt=\"\" />\n            </li>\n\n        </ul>\n    )\n}","// React,React hooks\nimport { useEffect, useReducer } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n// Components\nimport { ProductList } from \"./PrdocuctList\";\n// Types\nimport { Global_state_type } from \"../../../../Redux/Store\";\n// Custom Hooks\nimport { Reducer } from \"../../Reducers/constructorReducer\";\n// Redux.Redux thunks\nimport { CreateNewShiftControls } from \"./CreateNewShiftControls\";\nimport { getProductsByCompanyID } from \"../../../../Redux/ProductReduxer\";\n\n\n\n\nexport const ShiftConstructorContainer = () => {\n    let user = useSelector((state: Global_state_type) => state.App.user);\n    let products = useSelector((state: Global_state_type) => state.blankShift.productList);\n    const dispatch: any = useDispatch();\n    // Define a localal reducer with custom toggling state\n    let [state, dispatchProducts] = useReducer(Reducer, products);\n    // Get products and pass them into the local state\n    useEffect(() => {\n        dispatchProducts({\n            type: 'set-products',\n            payload: products\n        });\n    }, [products.length]);\n\n    useEffect(() => {\n        dispatch(getProductsByCompanyID(user.teamID as string))\n    }, []);\n\n\n    return (\n        <section className=\"shift-constructor container\">\n            <CreateNewShiftControls products={state} user={user} dispatchProducts={dispatchProducts}/>\n            <ProductList products={state} dispatch={dispatchProducts}  />\n        </section>\n    )\n};","// ---------- IMPORT REACT COMPOENTS\n\nimport { Navigate } from \"react-router-dom\";\nimport { CheckLists } from \"../Modules/ChecklistApp/Components/CheckLists\";\nimport { CheckListPage } from \"../Modules/ChecklistApp/Components/CheclListPage\";\nimport { Premixes } from \"../Components/Ingridients/Premixes\";\nimport { ProductCardContainer } from \"../Components/Ingridients/ProductCardContainer\";\nimport { CocktailCard } from \"../Components/KnowledjeBase/CoctrailCard\";\n\n\nimport { CreateTeam } from \"../Components/Teams/CreateTeam\";\nimport { JoinTeam } from \"../Components/Teams/JoinTeam\";\nimport { HomePage } from \"../Components/mainScreen\";\nimport { ROUTE } from \"../Redux/Types\";\nimport { NewProduct } from \"../Components/NewProduct/NewProduct\";\nimport { SecondStep } from \"../Components/NewProduct/SecondStep\";\nimport { TeamPageContainer } from \"../Components/Teams/ClanList\";\nimport { NewCheckList } from \"../Modules/ChecklistApp/Components/NewCheckList\";\nimport { KnowledgeBase } from \"../Components/KnowledjeBase/KnowledgeBase\";\nimport { IngridientCard } from \"../Components/KnowledjeBase/Ingridient\";\nimport { LoginPage } from \"../Components/Registration/LoginPage\";\nimport { Registration } from \"../Components/Registration/Registration\";\nimport { PremixesApp } from \"../Modules/PremixesApp/Premixes\";\nimport { PassedShift } from \"../Modules/PremixesApp/Components/HistoryPage/PassedShiftItem\";\nimport { ShiftConstructorContainer } from \"../Modules/PremixesApp/Components/ConstructorPage/ShiftCounstructorContainer\";\n\n\n// ---------- ROUTES STRINGS\nexport const SHIFT_MANAGER = '/shiftManager/*'\nexport const HOME = \"/home\"\nexport const COCKTAIL_CARD = \"/cocktail/:id\"\nexport const PREMIX_LIST = \"/premixes\"\nexport const ADD_PRODUCT = \"/add\"\nexport const PRODUCT_CARD = \"/card/:id\"\nexport const LOG_OUT = \"/logOut\"\nexport const REGISTRATION = \"/registration\"\n// export const NO_MATCH_ROUTE = \"*\"\nexport const BLANK_SHIFT = \"/blank-shift/*\"\nexport const STEP_2 = \"add-step-two\"\nexport const NEW_BLANK_SHIFT = \"/shiftManager/create-new\"  \n\nexport const CHECK_LISTS = \"/check-lists\"\nexport const PASSED_SHIFT = \"shiftManager/:id\"\nexport const CLAN_LISTS = \"/clan-list\"\nexport const CREATE_TEAM = \"/create-team\"\nexport const JOIN_TEAM = \"/join-team\"\nexport const NEW_CHECK_LIST = \"/new-check-list\"\nexport const CHECK_LIST = \"/check-lists/:id\"\nexport const KNIWLEDGE_BASE = \"knowledge-base\"\nexport const INGRIDIENT = \"ingridient/:id\"\nexport const HISTORY = '/blank-shift/history'\n\nexport const PRIVATE_ROUTES : ROUTE[] = [\n    {\n        path : HISTORY,\n        element : <h1>History</h1>\n    },\n    {\n        path : HOME,\n        element : <HomePage/>\n    },\n    {\n        path : COCKTAIL_CARD,\n        element : <CocktailCard/>\n    },\n    {\n        path : JOIN_TEAM,\n        element : <JoinTeam/>\n    },\n    {\n        path : CREATE_TEAM,\n        element : <CreateTeam/>\n    },\n    {\n        path : SHIFT_MANAGER,\n        element : <PremixesApp/>\n    },\n    {\n        path : CHECK_LIST,\n        element : <CheckListPage/>\n    },\n    {\n        path : PASSED_SHIFT,\n        element : <PassedShift/>\n    },\n    {\n        path : BLANK_SHIFT,\n        element : <PremixesApp/>\n    },\n    {\n        path : PREMIX_LIST,\n        element : <Premixes/>\n    },\n    {\n        path : PRODUCT_CARD,\n        element : <ProductCardContainer/>\n    },\n    {\n        path : NEW_BLANK_SHIFT,\n        element : <ShiftConstructorContainer/>\n    },\n    {\n        path : CHECK_LISTS,\n        element : <CheckLists/>\n    },\n    // {\n    //     path : NO_MATCH_ROUTE,\n    //     element : <Navigate to=\"/home\" />\n    // },\n    {\n        path : ADD_PRODUCT,\n        element : <NewProduct isDarkTheme={true}/>\n    },\n    {\n        path : STEP_2,\n        element : <SecondStep isDarkTheme={true}/>\n    },\n    {\n        path : CLAN_LISTS,\n        element : <TeamPageContainer isDarkTheme={true}/>\n    },\n    {\n        path : NEW_CHECK_LIST,\n        element : <NewCheckList/>\n    },\n    {\n        path : KNIWLEDGE_BASE,\n        element : <KnowledgeBase/>\n    },\n    {\n        path : INGRIDIENT,\n        element : <IngridientCard/>\n    }\n]\n\nexport const PUBLICK_ROUTES : ROUTE [] = [\n    {\n        path : LOG_OUT,\n        element : <LoginPage/>\n    },\n    // {\n    //     path : NO_MATCH_ROUTE,\n    //     element : <Navigate to={\"/logOut\"}/>\n    // },\n    {\n        path : REGISTRATION,\n        element : <Registration/>\n    }\n\n]","\n// ---------- REACT & REACT HOOKS\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ---------- REDUX\nimport { Global_state_type } from \"../Redux/Store\";\n\n// ---------- IMPORT PROVATE & PUBLICK ROUND & ROUTE INTERFACE\nimport { PRIVATE_ROUTES, PUBLICK_ROUTES } from \"./Routes\";\nimport { ROUTE } from \"../Redux/Types\";\n\n// The router component iterates over the routes array and returns a route component\n//  with the corresponding react component. if user is not authorized iterates over PUBLKICK_ROUTES array\n// anotherwise over PRIVATE_ROUTES\n\n\nconst Router = React.memo((props: { isDarkTheme: boolean }) => {\n    \n    const isAuth = useSelector((state: Global_state_type) => { return state.App.isAuth })\n    console.log(\"Route\")\n    if (isAuth) {\n\n        return (\n            <div className=\"content\">\n                <Routes>\n                    {PRIVATE_ROUTES.map((route : ROUTE) => {\n                        return (\n                            <Route key={route.path} element={route.element} path={route.path}/>\n                        )\n                    })}\n                </Routes>\n           \n            </div>\n        )\n    }\n\n    else {\n        return (\n            <>\n                <Routes>\n                    {PUBLICK_ROUTES.map((route : ROUTE) => <Route path={route.path} element={route.element}/>)}\n                </Routes>\n            </>\n        )\n    }\n\n})\n\nexport default Router;"],"names":["CheckListPreview","props","jsxTasks","tasks","length","i","push","_jsx","className","children","renderTasksPreview","_jsxs","NavLink","to","concat","id","name","map","el","_Fragment","ItemList","navigate","useNavigate","checkLists","onClick","CheckLists","checklists","dispatch","useDispatch","teamID","useSelector","state","App","user","useEffect","getCheckListsthunk","chcekLists","useChecklistList","Modal","CheckListPage","_useTaskList","useLocation","pathname","split","find","deleteChekListThunk","useTaskList","_useTaskList2","_slicedToArray","checklist","_useState","useState","_useState2","isModal","setModal","src","index","type","PremixesList","blanks","productActions","Navigate","parseElementNameToString","alt","Premixes","isDarkTheme","isDarktheme","_useProductFilter","initial","filter","setFilter","getProductsByCompanyID","premixes","includes","value","useProductFilter","_useProductFilter2","products","filterProducts","isSearch","setIsSearch","onChange","e","currentTarget","backIcom","ProductComposition","isOpen","setIsOpen","toggle","parseComposition","composition","ProdicuCalculater","_props$product","setValue","console","log","product","placeholder","event","Number","calculateAndParseIntoComponent","ProductDescription","isOpened","setIsOpened","isEditMode","description","ProductCard","_props$card","_props$card2","setState","setEditMode","card","useInput","arguments","undefined","maxLength","Editor","deleteHandler","_useInput","_useInput2","key","setKey","_useState3","_useState4","array","Object","keys","values","_defineProperty","DotsMenu","_UseToggle","initialValue","_useState5","_useState6","UseToggle","_UseToggle2","productID","Firestore_instance","payload","deleteProductCrad","Reducer","action","_objectSpread","ProductCardContainer","location","actualProductCard","setProductCardThunk","useProductCard","_useReducer","useReducer","_useReducer2","Preloader","CocktailCard","getCocktailByID","currentCocktail","knowledgeBase","strDrink","strDrinkThumb","strGlass","strIBA","strCategory","strInstructions","CreateTeam","newTeam","clans","clanActions","createClanThunk","userID","userName","initializeThunk","JoinTeam","getAllClans","teamList","teamName","joinTheClan","ThemeSwitcher","setTheme","app_actions","theme","MainPageNavigation","styles","HomePage","profile","window","innerWidth","windowWidth","setWindowWidth","handleResizeWindow","addEventListener","removeEventListener","useWindowInnerWidth","team","NewIngridientSingleForm","yup","shape","typeError","min","max","required","Formik","initialValues","enableReinitialize","validateOnBlur","onSubmit","newIngridient","newCardActions","_ref","errors","touched","handleChange","handleSubmit","handleBlur","isValid","dirty","autoComplete","FirstStep","forms","setForms","onNameChange","_toConsumableArray","NewProduct","SecondStep","newProduct","newCard","backArrow","convertObjectToArrayOfObjects","obj","createNewIngridientCard","TeamPage","getClanListByUserID","users","leaveTheTeam","LeaveTheTeamHandler","TeamPageContainer","pic","_state$clans$team","teamAvatar","NewCheckList","nameInput","nameValue","_useInput3","_useInput4","taskInput","taskValue","setInput","setTasks","_useValidator","regExp","isError","setError","errorText","setErrorText","pattern","test","useValidator","_useValidator2","onError","errorMessage","validate","CheckListsAPI","CHECK_LIST","task","CoctailPreview","cocktail","idDrink","CoctailList","getCocktailsThunk","cocktailsFromState","cocktails","SpiritList","getSpiritsThunk","spirits","ID","image","displayName","KnowledgeBaseContent","KnowledgeBase","_React$useState","React","_React$useState2","Box","sx","width","marginBottom","Tabs","newValue","Tab","fontSize","color","label","IngridientCard","getCurrentIngridient","currentIngridient","currentSpirit","definition","production","LoginPage","hidePassword","setHidePassword","onShowPasswordHandler","logo","email","password","loginByEmailAndPassword","validationSchema","loginValidationShema","onBlur","showPass","hidePass","disabled","style","Registration","isPasswordHided","setPasswordHided","nickName","companyName","repeatPassword","RegistrationActions","createNewUserByEmailAndPassword","validationShema","showPasswordIcon","hidePasswordIcon","ProgressBar","readyProducts","item","isDone","percent","toFixed","IngridentsItem","itemId","href","IngridientList","toogleItem","ingridients","EmptyShift","CurrentShift","_props$shift$shiftID","shift","shiftID","closeCurrentShiftByCompanyID","ShiftPreview","onClickHandler","date","employee","count","ShiftsHistory","shifts","employe","MainPage","companyID","blankShift","closedShifts","currentShift","isFetch","getShiftsHistoryByCompanyID","getCurrentShiftByCompanyID","Array","isArray","useProducts","_useNavbar","shiftType","setShiftType","useNavbar","_useNavbar2","Navbar","PremixesApp","PassedShift","getPassedShiftByID","passedShift","ProdcustItem","isChecked","toggleFunction","ProductList","checked","CreateNewShiftControls","isAllSelected","dispatchProducts","setCurrentShiftByCompanyID","ShiftConstructorContainer","productList","PRIVATE_ROUTES","path","element","PUBLICK_ROUTES","isAuth","Routes","route","Route"],"sourceRoot":""}